// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace Desktop.Suwayomi
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public bool RequiresParameters { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
        private static readonly Regex RegexEscapeGraphQlString = new Regex(@"[\\\""/\b\f\n\r\t]", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string EscapeGraphQlStringValue(string value)
        {
            return RegexEscapeGraphQlString.Replace(value, m => @$"\{GetEscapeSequence(m.Value)}");
        }
    
        private static string GetEscapeSequence(string input)
        {
            switch (input)
            {
                case "\\":
                    return "\\";
                case "\"":
                    return "\"";
                case "/":
                    return "/";
                case "\b":
                    return "b";
                case "\f":
                    return "f";
                case "\n":
                    return "n";
                case "\r":
                    return "r";
                case "\t":
                    return "t";
                default:
                    throw new InvalidOperationException($"invalid character: {input}");
            }
        }
    
        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            var serializer = options.ArgumentBuilder ?? DefaultGraphQlArgumentBuilder.Instance;
            if (serializer.TryBuild(new GraphQlArgumentBuilderContext { Value = value, FormatMask = formatMask, Options = options, Level = level }, out var serializedValue))
                return serializedValue;
    
            if (value is null)
                return "null";
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? $"\"{EscapeGraphQlStringValue(formattable.ToString(formatMask, CultureInfo.InvariantCulture))}\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return $"\"{dateTime.ToString("O")}\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return $"\"{dateTimeOffset.ToString("O")}\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);
    
            if (value is Guid)
                return $"\"{value}\"";
    
            if (value is String @string)
                return $"\"{EscapeGraphQlStringValue(@string)}\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = EscapeGraphQlStringValue(Convert.ToString(value, CultureInfo.InvariantCulture));
            return $"\"{argumentValue}\"";
        }
    
        public static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? $"${queryBuilderParameter.Name}"
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    public interface IGraphQlArgumentBuilder
    {
        bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString);
    }
    
    public class GraphQlArgumentBuilderContext
    {
        public object Value { get; set; }
        public string FormatMask { get; set; }
        public GraphQlBuilderOptions Options { get; set; }
        public int Level { get; set; }
    }
    
    public class DefaultGraphQlArgumentBuilder : IGraphQlArgumentBuilder
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
    
        public static readonly DefaultGraphQlArgumentBuilder Instance = new();
    
        public bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString)
        {
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (context.Value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        graphQlString = "null";
                        return true;
    
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        graphQlString = GraphQlQueryHelper.BuildArgumentValue(jValue.Value, null, context.Options, context.Level);
                        return true;
    
                    case JTokenType.String:
                        graphQlString = $"\"{GraphQlQueryHelper.EscapeGraphQlStringValue((string)jValue.Value)}\"";
                        return true;
    
                    default:
                        graphQlString = $"\"{jValue.Value}\"";
                        return true;
                }
            }
    
            if (context.Value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                graphQlString = $"{jProperty.Name}:{(context.Options.Formatting == Formatting.Indented ? " " : null)}{GraphQlQueryHelper.BuildArgumentValue(jProperty.Value, null, context.Options, context.Level)}";
                return true;
            }
    
            if (context.Value is JObject jObject)
            {
                graphQlString = GraphQlQueryHelper.BuildEnumerableArgument(jObject, null, context.Options, context.Level + 1, '{', '}');
                return true;
            }
    #endif
    
            graphQlString = null;
            return false;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
        public IGraphQlArgumentBuilder ArgumentBuilder { get; set; }
    }
    
    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }
    
        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields.Where(f => !f.RequiresParameters));
        }
    
        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            BuildOperationSignature(builder, options, indentationSpace, level);
    
            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);
    
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
    
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        private void BuildOperationSignature(StringBuilder builder, GraphQlBuilderOptions options, string indentationSpace, int level)
        {
            if (String.IsNullOrEmpty(_operationType))
                return;
    
            builder.Append(_operationType);
    
            if (!String.IsNullOrEmpty(_operationName))
            {
                builder.Append(" ");
                builder.Append(_operationName);
            }
    
            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");
    
                var separator = String.Empty;
                var isIndentedFormatting = options.Formatting == Formatting.Indented;
    
                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                    }
                    else
                        builder.Append(separator);
    
                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);
    
                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                    }
    
                    if (!isIndentedFormatting)
                        separator = ",";
                }
    
                builder.Append(")");
            }
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, 0, new Dictionary<Type, int>());
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, int level, Dictionary<Type, int> parentTypeLevel)
        {
            Type builderType = null;
    
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    if (_operationType != null && GetType() == field.QueryBuilderType ||
                        parentTypeLevel.TryGetValue(field.QueryBuilderType, out var parentLevel) && parentLevel < level)
                        continue;
    
                    if (builderType is null)
                    {
                        builderType = GetType();
                        parentLevel = parentTypeLevel.TryGetValue(builderType, out parentLevel) ? parentLevel : level;
                        parentTypeLevel[builderType] = Math.Min(level, parentLevel);
                    }
    
                    var queryBuilder = InitializeChildQueryBuilder(builderType, field.QueryBuilderType, level, parentTypeLevel);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(
                            queryBuilder,
                            new object[] { InitializeChildQueryBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, level, parentTypeLevel) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildQueryBuilder(Type parentQueryBuilderType, Type queryBuilderType, int level, Dictionary<Type, int> parentTypeLevel)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(
                queryBuilder.AllFields.Where(f => !f.RequiresParameters),
                level + 1,
                parentTypeLevel);
    
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
    
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(GraphQlBuilderOptions options, int level);
    
            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : $"${a.ArgumentValue.Name}")}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : $"{alias}:{separator}";
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }
    
    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        /// <summary>
        /// Includes all fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes all scalar fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex && !f.RequiresParameters));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes "__typename" field; included automatically for interface and union types.
        /// </summary>
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string Cursor = "Cursor";
        public const string Float = "Float";
        public const string Int = "Int";
        public const string LongString = "LongString";
        public const string String = "String";
        public const string Upload = "Upload";

        public const string BackupRestoreState = "BackupRestoreState";
        public const string CategoryOrderBy = "CategoryOrderBy";
        public const string ChapterOrderBy = "ChapterOrderBy";
        public const string DownloaderState = "DownloaderState";
        public const string DownloadState = "DownloadState";
        public const string ExtensionOrderBy = "ExtensionOrderBy";
        public const string FetchSourceMangaType = "FetchSourceMangaType";
        public const string IncludeOrExclude = "IncludeOrExclude";
        public const string MangaOrderBy = "MangaOrderBy";
        public const string MangaStatus = "MangaStatus";
        public const string MetaOrderBy = "MetaOrderBy";
        public const string SortOrder = "SortOrder";
        public const string SourceOrderBy = "SourceOrderBy";
        public const string TrackerOrderBy = "TrackerOrderBy";
        public const string TrackRecordOrderBy = "TrackRecordOrderBy";
        public const string TriState = "TriState";
        public const string UpdateState = "UpdateState";
        public const string UpdateStrategy = "UpdateStrategy";
        public const string WebUiChannel = "WebUIChannel";
        public const string WebUiFlavor = "WebUIFlavor";
        public const string WebUiInterface = "WebUIInterface";

        public const string AboutServerPayload = "AboutServerPayload";
        public const string AboutWebUi = "AboutWebUI";
        public const string BackupRestoreStatus = "BackupRestoreStatus";
        public const string BindTrackPayload = "BindTrackPayload";
        public const string CategoryEdge = "CategoryEdge";
        public const string CategoryMetaType = "CategoryMetaType";
        public const string CategoryNodeList = "CategoryNodeList";
        public const string CategoryType = "CategoryType";
        public const string ChapterEdge = "ChapterEdge";
        public const string ChapterMetaType = "ChapterMetaType";
        public const string ChapterNodeList = "ChapterNodeList";
        public const string ChapterType = "ChapterType";
        public const string CheckBoxFilter = "CheckBoxFilter";
        public const string CheckBoxPreference = "CheckBoxPreference";
        public const string CheckForServerUpdatesPayload = "CheckForServerUpdatesPayload";
        public const string ClearCachedImagesPayload = "ClearCachedImagesPayload";
        public const string ClearDownloaderPayload = "ClearDownloaderPayload";
        public const string CreateBackupPayload = "CreateBackupPayload";
        public const string CreateCategoryPayload = "CreateCategoryPayload";
        public const string DeleteCategoryMetaPayload = "DeleteCategoryMetaPayload";
        public const string DeleteCategoryPayload = "DeleteCategoryPayload";
        public const string DeleteChapterMetaPayload = "DeleteChapterMetaPayload";
        public const string DeleteDownloadedChapterPayload = "DeleteDownloadedChapterPayload";
        public const string DeleteDownloadedChaptersPayload = "DeleteDownloadedChaptersPayload";
        public const string DeleteGlobalMetaPayload = "DeleteGlobalMetaPayload";
        public const string DeleteMangaMetaPayload = "DeleteMangaMetaPayload";
        public const string DeleteSourceMetaPayload = "DeleteSourceMetaPayload";
        public const string DequeueChapterDownloadPayload = "DequeueChapterDownloadPayload";
        public const string DequeueChapterDownloadsPayload = "DequeueChapterDownloadsPayload";
        public const string DownloadEdge = "DownloadEdge";
        public const string DownloadNodeList = "DownloadNodeList";
        public const string DownloadStatus = "DownloadStatus";
        public const string DownloadType = "DownloadType";
        public const string EditTextPreference = "EditTextPreference";
        public const string EnqueueChapterDownloadPayload = "EnqueueChapterDownloadPayload";
        public const string EnqueueChapterDownloadsPayload = "EnqueueChapterDownloadsPayload";
        public const string ExtensionEdge = "ExtensionEdge";
        public const string ExtensionNodeList = "ExtensionNodeList";
        public const string ExtensionType = "ExtensionType";
        public const string FetchChapterPagesPayload = "FetchChapterPagesPayload";
        public const string FetchChaptersPayload = "FetchChaptersPayload";
        public const string FetchExtensionsPayload = "FetchExtensionsPayload";
        public const string FetchMangaPayload = "FetchMangaPayload";
        public const string FetchSourceMangaPayload = "FetchSourceMangaPayload";
        public const string GlobalMetaNodeList = "GlobalMetaNodeList";
        public const string GlobalMetaType = "GlobalMetaType";
        public const string GroupFilter = "GroupFilter";
        public const string HeaderFilter = "HeaderFilter";
        public const string InstallExternalExtensionPayload = "InstallExternalExtensionPayload";
        public const string LastUpdateTimestampPayload = "LastUpdateTimestampPayload";
        public const string ListPreference = "ListPreference";
        public const string LoginTrackerCredentialsPayload = "LoginTrackerCredentialsPayload";
        public const string LoginTrackerOAuthPayload = "LoginTrackerOAuthPayload";
        public const string LogoutTrackerPayload = "LogoutTrackerPayload";
        public const string MangaEdge = "MangaEdge";
        public const string MangaMetaType = "MangaMetaType";
        public const string MangaNodeList = "MangaNodeList";
        public const string MangaType = "MangaType";
        public const string MetaEdge = "MetaEdge";
        public const string MultiSelectListPreference = "MultiSelectListPreference";
        public const string Mutation = "Mutation";
        public const string PageInfo = "PageInfo";
        public const string PartialSettingsType = "PartialSettingsType";
        public const string Query = "Query";
        public const string ReorderChapterDownloadPayload = "ReorderChapterDownloadPayload";
        public const string ResetSettingsPayload = "ResetSettingsPayload";
        public const string RestoreBackupPayload = "RestoreBackupPayload";
        public const string SearchTrackerPayload = "SearchTrackerPayload";
        public const string SelectFilter = "SelectFilter";
        public const string SeparatorFilter = "SeparatorFilter";
        public const string SetCategoryMetaPayload = "SetCategoryMetaPayload";
        public const string SetChapterMetaPayload = "SetChapterMetaPayload";
        public const string SetGlobalMetaPayload = "SetGlobalMetaPayload";
        public const string SetMangaMetaPayload = "SetMangaMetaPayload";
        public const string SetSettingsPayload = "SetSettingsPayload";
        public const string SetSourceMetaPayload = "SetSourceMetaPayload";
        public const string SettingsType = "SettingsType";
        public const string SortFilter = "SortFilter";
        public const string SortSelection = "SortSelection";
        public const string SourceEdge = "SourceEdge";
        public const string SourceMetaType = "SourceMetaType";
        public const string SourceNodeList = "SourceNodeList";
        public const string SourceType = "SourceType";
        public const string StartDownloaderPayload = "StartDownloaderPayload";
        public const string StopDownloaderPayload = "StopDownloaderPayload";
        public const string Subscription = "Subscription";
        public const string SwitchPreference = "SwitchPreference";
        public const string TextFilter = "TextFilter";
        public const string TrackerEdge = "TrackerEdge";
        public const string TrackerNodeList = "TrackerNodeList";
        public const string TrackerType = "TrackerType";
        public const string TrackRecordEdge = "TrackRecordEdge";
        public const string TrackRecordNodeList = "TrackRecordNodeList";
        public const string TrackRecordType = "TrackRecordType";
        public const string TrackSearchType = "TrackSearchType";
        public const string TrackStatusType = "TrackStatusType";
        public const string TriStateFilter = "TriStateFilter";
        public const string UpdateCategoriesPayload = "UpdateCategoriesPayload";
        public const string UpdateCategoryMangaPayload = "UpdateCategoryMangaPayload";
        public const string UpdateCategoryOrderPayload = "UpdateCategoryOrderPayload";
        public const string UpdateCategoryPayload = "UpdateCategoryPayload";
        public const string UpdateChapterPayload = "UpdateChapterPayload";
        public const string UpdateChaptersPayload = "UpdateChaptersPayload";
        public const string UpdateExtensionPayload = "UpdateExtensionPayload";
        public const string UpdateExtensionsPayload = "UpdateExtensionsPayload";
        public const string UpdateLibraryMangaPayload = "UpdateLibraryMangaPayload";
        public const string UpdateMangaCategoriesPayload = "UpdateMangaCategoriesPayload";
        public const string UpdateMangaPayload = "UpdateMangaPayload";
        public const string UpdateMangasCategoriesPayload = "UpdateMangasCategoriesPayload";
        public const string UpdateMangasPayload = "UpdateMangasPayload";
        public const string UpdateSourcePreferencePayload = "UpdateSourcePreferencePayload";
        public const string UpdateStatus = "UpdateStatus";
        public const string UpdateStatusCategoryType = "UpdateStatusCategoryType";
        public const string UpdateStatusType = "UpdateStatusType";
        public const string UpdateStopPayload = "UpdateStopPayload";
        public const string UpdateTrackPayload = "UpdateTrackPayload";
        public const string ValidateBackupResult = "ValidateBackupResult";
        public const string ValidateBackupSource = "ValidateBackupSource";
        public const string WebUiUpdateCheck = "WebUIUpdateCheck";
        public const string WebUiUpdateInfo = "WebUIUpdateInfo";
        public const string WebUiUpdatePayload = "WebUIUpdatePayload";
        public const string WebUiUpdateStatus = "WebUIUpdateStatus";

        public const string BindTrackInput = "BindTrackInput";
        public const string BooleanFilterInput = "BooleanFilterInput";
        public const string CategoryConditionInput = "CategoryConditionInput";
        public const string CategoryFilterInput = "CategoryFilterInput";
        public const string CategoryMetaTypeInput = "CategoryMetaTypeInput";
        public const string ChapterConditionInput = "ChapterConditionInput";
        public const string ChapterFilterInput = "ChapterFilterInput";
        public const string ChapterMetaTypeInput = "ChapterMetaTypeInput";
        public const string ClearCachedImagesInput = "ClearCachedImagesInput";
        public const string ClearDownloaderInput = "ClearDownloaderInput";
        public const string CreateBackupInput = "CreateBackupInput";
        public const string CreateCategoryInput = "CreateCategoryInput";
        public const string DeleteCategoryInput = "DeleteCategoryInput";
        public const string DeleteCategoryMetaInput = "DeleteCategoryMetaInput";
        public const string DeleteChapterMetaInput = "DeleteChapterMetaInput";
        public const string DeleteDownloadedChapterInput = "DeleteDownloadedChapterInput";
        public const string DeleteDownloadedChaptersInput = "DeleteDownloadedChaptersInput";
        public const string DeleteGlobalMetaInput = "DeleteGlobalMetaInput";
        public const string DeleteMangaMetaInput = "DeleteMangaMetaInput";
        public const string DeleteSourceMetaInput = "DeleteSourceMetaInput";
        public const string DequeueChapterDownloadInput = "DequeueChapterDownloadInput";
        public const string DequeueChapterDownloadsInput = "DequeueChapterDownloadsInput";
        public const string DoubleFilterInput = "DoubleFilterInput";
        public const string EnqueueChapterDownloadInput = "EnqueueChapterDownloadInput";
        public const string EnqueueChapterDownloadsInput = "EnqueueChapterDownloadsInput";
        public const string ExtensionConditionInput = "ExtensionConditionInput";
        public const string ExtensionFilterInput = "ExtensionFilterInput";
        public const string FetchChapterPagesInput = "FetchChapterPagesInput";
        public const string FetchChaptersInput = "FetchChaptersInput";
        public const string FetchExtensionsInput = "FetchExtensionsInput";
        public const string FetchMangaInput = "FetchMangaInput";
        public const string FetchSourceMangaInput = "FetchSourceMangaInput";
        public const string FilterChangeInput = "FilterChangeInput";
        public const string FloatFilterInput = "FloatFilterInput";
        public const string GlobalMetaTypeInput = "GlobalMetaTypeInput";
        public const string InstallExternalExtensionInput = "InstallExternalExtensionInput";
        public const string IntFilterInput = "IntFilterInput";
        public const string LoginTrackerCredentialsInput = "LoginTrackerCredentialsInput";
        public const string LoginTrackerOAuthInput = "LoginTrackerOAuthInput";
        public const string LogoutTrackerInput = "LogoutTrackerInput";
        public const string LongFilterInput = "LongFilterInput";
        public const string MangaConditionInput = "MangaConditionInput";
        public const string MangaFilterInput = "MangaFilterInput";
        public const string MangaMetaTypeInput = "MangaMetaTypeInput";
        public const string MangaStatusFilterInput = "MangaStatusFilterInput";
        public const string MetaConditionInput = "MetaConditionInput";
        public const string MetaFilterInput = "MetaFilterInput";
        public const string PartialSettingsTypeInput = "PartialSettingsTypeInput";
        public const string ReorderChapterDownloadInput = "ReorderChapterDownloadInput";
        public const string ResetSettingsInput = "ResetSettingsInput";
        public const string RestoreBackupInput = "RestoreBackupInput";
        public const string SearchTrackerInput = "SearchTrackerInput";
        public const string SetCategoryMetaInput = "SetCategoryMetaInput";
        public const string SetChapterMetaInput = "SetChapterMetaInput";
        public const string SetGlobalMetaInput = "SetGlobalMetaInput";
        public const string SetMangaMetaInput = "SetMangaMetaInput";
        public const string SetSettingsInput = "SetSettingsInput";
        public const string SetSourceMetaInput = "SetSourceMetaInput";
        public const string SortSelectionInput = "SortSelectionInput";
        public const string SourceConditionInput = "SourceConditionInput";
        public const string SourceFilterInput = "SourceFilterInput";
        public const string SourceMetaTypeInput = "SourceMetaTypeInput";
        public const string SourcePreferenceChangeInput = "SourcePreferenceChangeInput";
        public const string StartDownloaderInput = "StartDownloaderInput";
        public const string StopDownloaderInput = "StopDownloaderInput";
        public const string StringFilterInput = "StringFilterInput";
        public const string TrackerConditionInput = "TrackerConditionInput";
        public const string TrackRecordConditionInput = "TrackRecordConditionInput";
        public const string TrackRecordFilterInput = "TrackRecordFilterInput";
        public const string UpdateCategoriesInput = "UpdateCategoriesInput";
        public const string UpdateCategoryInput = "UpdateCategoryInput";
        public const string UpdateCategoryMangaInput = "UpdateCategoryMangaInput";
        public const string UpdateCategoryOrderInput = "UpdateCategoryOrderInput";
        public const string UpdateCategoryPatchInput = "UpdateCategoryPatchInput";
        public const string UpdateChapterInput = "UpdateChapterInput";
        public const string UpdateChapterPatchInput = "UpdateChapterPatchInput";
        public const string UpdateChaptersInput = "UpdateChaptersInput";
        public const string UpdateExtensionInput = "UpdateExtensionInput";
        public const string UpdateExtensionPatchInput = "UpdateExtensionPatchInput";
        public const string UpdateExtensionsInput = "UpdateExtensionsInput";
        public const string UpdateLibraryMangaInput = "UpdateLibraryMangaInput";
        public const string UpdateMangaCategoriesInput = "UpdateMangaCategoriesInput";
        public const string UpdateMangaCategoriesPatchInput = "UpdateMangaCategoriesPatchInput";
        public const string UpdateMangaInput = "UpdateMangaInput";
        public const string UpdateMangaPatchInput = "UpdateMangaPatchInput";
        public const string UpdateMangasCategoriesInput = "UpdateMangasCategoriesInput";
        public const string UpdateMangasInput = "UpdateMangasInput";
        public const string UpdateSourcePreferenceInput = "UpdateSourcePreferenceInput";
        public const string UpdateStopInput = "UpdateStopInput";
        public const string UpdateTrackInput = "UpdateTrackInput";
        public const string ValidateBackupInput = "ValidateBackupInput";
        public const string WebUiUpdateInput = "WebUIUpdateInput";

        public const string Filter = "Filter";
        public const string Node = "Node";
        public const string Preference = "Preference";

        public const string Edge = "Edge";
        public const string MetaType = "MetaType";
        public const string NodeList = "NodeList";
        public const string Settings = "Settings";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(string), "String" },
                { typeof(int), "Int" },
                { typeof(bool), "Boolean" },
                { typeof(decimal), "Float" },
                { typeof(DateTimeOffset), "LongString" },
                { typeof(BindTrackInput), "BindTrackInput" },
                { typeof(BooleanFilterInput), "BooleanFilterInput" },
                { typeof(CategoryConditionInput), "CategoryConditionInput" },
                { typeof(CategoryFilterInput), "CategoryFilterInput" },
                { typeof(CategoryMetaTypeInput), "CategoryMetaTypeInput" },
                { typeof(ChapterConditionInput), "ChapterConditionInput" },
                { typeof(ChapterFilterInput), "ChapterFilterInput" },
                { typeof(ChapterMetaTypeInput), "ChapterMetaTypeInput" },
                { typeof(ClearCachedImagesInput), "ClearCachedImagesInput" },
                { typeof(ClearDownloaderInput), "ClearDownloaderInput" },
                { typeof(CreateBackupInput), "CreateBackupInput" },
                { typeof(CreateCategoryInput), "CreateCategoryInput" },
                { typeof(DeleteCategoryInput), "DeleteCategoryInput" },
                { typeof(DeleteCategoryMetaInput), "DeleteCategoryMetaInput" },
                { typeof(DeleteChapterMetaInput), "DeleteChapterMetaInput" },
                { typeof(DeleteDownloadedChapterInput), "DeleteDownloadedChapterInput" },
                { typeof(DeleteDownloadedChaptersInput), "DeleteDownloadedChaptersInput" },
                { typeof(DeleteGlobalMetaInput), "DeleteGlobalMetaInput" },
                { typeof(DeleteMangaMetaInput), "DeleteMangaMetaInput" },
                { typeof(DeleteSourceMetaInput), "DeleteSourceMetaInput" },
                { typeof(DequeueChapterDownloadInput), "DequeueChapterDownloadInput" },
                { typeof(DequeueChapterDownloadsInput), "DequeueChapterDownloadsInput" },
                { typeof(DoubleFilterInput), "DoubleFilterInput" },
                { typeof(EnqueueChapterDownloadInput), "EnqueueChapterDownloadInput" },
                { typeof(EnqueueChapterDownloadsInput), "EnqueueChapterDownloadsInput" },
                { typeof(ExtensionConditionInput), "ExtensionConditionInput" },
                { typeof(ExtensionFilterInput), "ExtensionFilterInput" },
                { typeof(FetchChapterPagesInput), "FetchChapterPagesInput" },
                { typeof(FetchChaptersInput), "FetchChaptersInput" },
                { typeof(FetchExtensionsInput), "FetchExtensionsInput" },
                { typeof(FetchMangaInput), "FetchMangaInput" },
                { typeof(FetchSourceMangaInput), "FetchSourceMangaInput" },
                { typeof(FilterChangeInput), "FilterChangeInput" },
                { typeof(FloatFilterInput), "FloatFilterInput" },
                { typeof(GlobalMetaTypeInput), "GlobalMetaTypeInput" },
                { typeof(InstallExternalExtensionInput), "InstallExternalExtensionInput" },
                { typeof(IntFilterInput), "IntFilterInput" },
                { typeof(LoginTrackerCredentialsInput), "LoginTrackerCredentialsInput" },
                { typeof(LoginTrackerOAuthInput), "LoginTrackerOAuthInput" },
                { typeof(LogoutTrackerInput), "LogoutTrackerInput" },
                { typeof(LongFilterInput), "LongFilterInput" },
                { typeof(MangaConditionInput), "MangaConditionInput" },
                { typeof(MangaFilterInput), "MangaFilterInput" },
                { typeof(MangaMetaTypeInput), "MangaMetaTypeInput" },
                { typeof(MangaStatusFilterInput), "MangaStatusFilterInput" },
                { typeof(MetaConditionInput), "MetaConditionInput" },
                { typeof(MetaFilterInput), "MetaFilterInput" },
                { typeof(PartialSettingsTypeInput), "PartialSettingsTypeInput" },
                { typeof(ReorderChapterDownloadInput), "ReorderChapterDownloadInput" },
                { typeof(ResetSettingsInput), "ResetSettingsInput" },
                { typeof(RestoreBackupInput), "RestoreBackupInput" },
                { typeof(SearchTrackerInput), "SearchTrackerInput" },
                { typeof(SetCategoryMetaInput), "SetCategoryMetaInput" },
                { typeof(SetChapterMetaInput), "SetChapterMetaInput" },
                { typeof(SetGlobalMetaInput), "SetGlobalMetaInput" },
                { typeof(SetMangaMetaInput), "SetMangaMetaInput" },
                { typeof(SetSettingsInput), "SetSettingsInput" },
                { typeof(SetSourceMetaInput), "SetSourceMetaInput" },
                { typeof(SortSelectionInput), "SortSelectionInput" },
                { typeof(SourceConditionInput), "SourceConditionInput" },
                { typeof(SourceFilterInput), "SourceFilterInput" },
                { typeof(SourceMetaTypeInput), "SourceMetaTypeInput" },
                { typeof(SourcePreferenceChangeInput), "SourcePreferenceChangeInput" },
                { typeof(StartDownloaderInput), "StartDownloaderInput" },
                { typeof(StopDownloaderInput), "StopDownloaderInput" },
                { typeof(StringFilterInput), "StringFilterInput" },
                { typeof(TrackerConditionInput), "TrackerConditionInput" },
                { typeof(TrackRecordConditionInput), "TrackRecordConditionInput" },
                { typeof(TrackRecordFilterInput), "TrackRecordFilterInput" },
                { typeof(UpdateCategoriesInput), "UpdateCategoriesInput" },
                { typeof(UpdateCategoryInput), "UpdateCategoryInput" },
                { typeof(UpdateCategoryMangaInput), "UpdateCategoryMangaInput" },
                { typeof(UpdateCategoryOrderInput), "UpdateCategoryOrderInput" },
                { typeof(UpdateCategoryPatchInput), "UpdateCategoryPatchInput" },
                { typeof(UpdateChapterInput), "UpdateChapterInput" },
                { typeof(UpdateChapterPatchInput), "UpdateChapterPatchInput" },
                { typeof(UpdateChaptersInput), "UpdateChaptersInput" },
                { typeof(UpdateExtensionInput), "UpdateExtensionInput" },
                { typeof(UpdateExtensionPatchInput), "UpdateExtensionPatchInput" },
                { typeof(UpdateExtensionsInput), "UpdateExtensionsInput" },
                { typeof(UpdateLibraryMangaInput), "UpdateLibraryMangaInput" },
                { typeof(UpdateMangaCategoriesInput), "UpdateMangaCategoriesInput" },
                { typeof(UpdateMangaCategoriesPatchInput), "UpdateMangaCategoriesPatchInput" },
                { typeof(UpdateMangaInput), "UpdateMangaInput" },
                { typeof(UpdateMangaPatchInput), "UpdateMangaPatchInput" },
                { typeof(UpdateMangasCategoriesInput), "UpdateMangasCategoriesInput" },
                { typeof(UpdateMangasInput), "UpdateMangasInput" },
                { typeof(UpdateSourcePreferenceInput), "UpdateSourcePreferenceInput" },
                { typeof(UpdateStopInput), "UpdateStopInput" },
                { typeof(UpdateTrackInput), "UpdateTrackInput" },
                { typeof(ValidateBackupInput), "ValidateBackupInput" },
                { typeof(WebUiUpdateInput), "WebUIUpdateInput" }
            };
}
    #endregion

    #region enums
    public enum BackupRestoreState
    {
        [EnumMember(Value = "IDLE")] Idle,
        [EnumMember(Value = "SUCCESS")] Success,
        [EnumMember(Value = "FAILURE")] Failure,
        [EnumMember(Value = "RESTORING_CATEGORIES")] RestoringCategories,
        [EnumMember(Value = "RESTORING_MANGA")] RestoringManga
    }

    public enum CategoryOrderBy
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "NAME")] Name,
        [EnumMember(Value = "ORDER")] Order
    }

    public enum ChapterOrderBy
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "SOURCE_ORDER")] SourceOrder,
        [EnumMember(Value = "NAME")] Name,
        [EnumMember(Value = "UPLOAD_DATE")] UploadDate,
        [EnumMember(Value = "CHAPTER_NUMBER")] ChapterNumber,
        [EnumMember(Value = "LAST_READ_AT")] LastReadAt,
        [EnumMember(Value = "FETCHED_AT")] FetchedAt
    }

    public enum DownloadState
    {
        [EnumMember(Value = "QUEUED")] Queued,
        [EnumMember(Value = "DOWNLOADING")] Downloading,
        [EnumMember(Value = "FINISHED")] Finished,
        [EnumMember(Value = "ERROR")] Error
    }

    public enum DownloaderState
    {
        [EnumMember(Value = "STARTED")] Started,
        [EnumMember(Value = "STOPPED")] Stopped
    }

    public enum ExtensionOrderBy
    {
        [EnumMember(Value = "PKG_NAME")] PkgName,
        [EnumMember(Value = "NAME")] Name,
        [EnumMember(Value = "APK_NAME")] ApkName
    }

    public enum FetchSourceMangaType
    {
        [EnumMember(Value = "SEARCH")] Search,
        [EnumMember(Value = "POPULAR")] Popular,
        [EnumMember(Value = "LATEST")] Latest
    }

    public enum IncludeOrExclude
    {
        [EnumMember(Value = "EXCLUDE")] Exclude,
        [EnumMember(Value = "INCLUDE")] Include,
        [EnumMember(Value = "UNSET")] Unset
    }

    public enum MangaOrderBy
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "IN_LIBRARY_AT")] InLibraryAt,
        [EnumMember(Value = "LAST_FETCHED_AT")] LastFetchedAt
    }

    public enum MangaStatus
    {
        [EnumMember(Value = "UNKNOWN")] Unknown,
        [EnumMember(Value = "ONGOING")] Ongoing,
        [EnumMember(Value = "COMPLETED")] Completed,
        [EnumMember(Value = "LICENSED")] Licensed,
        [EnumMember(Value = "PUBLISHING_FINISHED")] PublishingFinished,
        [EnumMember(Value = "CANCELLED")] Cancelled,
        [EnumMember(Value = "ON_HIATUS")] OnHiatus
    }

    public enum MetaOrderBy
    {
        [EnumMember(Value = "KEY")] Key,
        [EnumMember(Value = "VALUE")] Value
    }

    public enum SortOrder
    {
        [EnumMember(Value = "ASC")] Asc,
        [EnumMember(Value = "DESC")] Desc,
        [EnumMember(Value = "ASC_NULLS_FIRST")] AscNullsFirst,
        [EnumMember(Value = "DESC_NULLS_FIRST")] DescNullsFirst,
        [EnumMember(Value = "ASC_NULLS_LAST")] AscNullsLast,
        [EnumMember(Value = "DESC_NULLS_LAST")] DescNullsLast
    }

    public enum SourceOrderBy
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "NAME")] Name,
        [EnumMember(Value = "LANG")] Lang
    }

    public enum TrackRecordOrderBy
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "MANGA_ID")] MangaId,
        [EnumMember(Value = "TRACKER_ID")] TrackerId,
        [EnumMember(Value = "REMOTE_ID")] RemoteId,
        [EnumMember(Value = "TITLE")] Title,
        [EnumMember(Value = "LAST_CHAPTER_READ")] LastChapterRead,
        [EnumMember(Value = "TOTAL_CHAPTERS")] TotalChapters,
        [EnumMember(Value = "SCORE")] Score,
        [EnumMember(Value = "START_DATE")] StartDate,
        [EnumMember(Value = "FINISH_DATE")] FinishDate
    }

    public enum TrackerOrderBy
    {
        [EnumMember(Value = "ID")] Id,
        [EnumMember(Value = "NAME")] Name,
        [EnumMember(Value = "IS_LOGGED_IN")] IsLoggedIn
    }

    public enum TriState
    {
        [EnumMember(Value = "IGNORE")] Ignore,
        [EnumMember(Value = "INCLUDE")] Include,
        [EnumMember(Value = "EXCLUDE")] Exclude
    }

    public enum UpdateState
    {
        [EnumMember(Value = "IDLE")] Idle,
        [EnumMember(Value = "DOWNLOADING")] Downloading,
        [EnumMember(Value = "FINISHED")] Finished,
        [EnumMember(Value = "ERROR")] Error
    }

    public enum UpdateStrategy
    {
        [EnumMember(Value = "ALWAYS_UPDATE")] AlwaysUpdate,
        [EnumMember(Value = "ONLY_FETCH_ONCE")] OnlyFetchOnce
    }

    public enum WebUiChannel
    {
        [EnumMember(Value = "BUNDLED")] Bundled,
        [EnumMember(Value = "STABLE")] Stable,
        [EnumMember(Value = "PREVIEW")] Preview
    }

    public enum WebUiFlavor
    {
        [EnumMember(Value = "WEBUI")] Webui,
        [EnumMember(Value = "VUI")] Vui,
        [EnumMember(Value = "CUSTOM")] Custom
    }

    public enum WebUiInterface
    {
        [EnumMember(Value = "BROWSER")] Browser,
        [EnumMember(Value = "ELECTRON")] Electron
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public class AboutServerPayloadQueryBuilder : GraphQlQueryBuilder<AboutServerPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "buildTime", IsComplex = true },
                new GraphQlFieldMetadata { Name = "buildType" },
                new GraphQlFieldMetadata { Name = "discord" },
                new GraphQlFieldMetadata { Name = "github" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "revision" },
                new GraphQlFieldMetadata { Name = "version" }
            };

        protected override string TypeName { get { return "AboutServerPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AboutServerPayloadQueryBuilder WithBuildTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buildTime", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutServerPayloadQueryBuilder ExceptBuildTime()
        {
            return ExceptField("buildTime");
        }

        public AboutServerPayloadQueryBuilder WithBuildType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("buildType", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutServerPayloadQueryBuilder ExceptBuildType()
        {
            return ExceptField("buildType");
        }

        public AboutServerPayloadQueryBuilder WithDiscord(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("discord", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutServerPayloadQueryBuilder ExceptDiscord()
        {
            return ExceptField("discord");
        }

        public AboutServerPayloadQueryBuilder WithGithub(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("github", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutServerPayloadQueryBuilder ExceptGithub()
        {
            return ExceptField("github");
        }

        public AboutServerPayloadQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutServerPayloadQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public AboutServerPayloadQueryBuilder WithRevision(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("revision", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutServerPayloadQueryBuilder ExceptRevision()
        {
            return ExceptField("revision");
        }

        public AboutServerPayloadQueryBuilder WithVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("version", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutServerPayloadQueryBuilder ExceptVersion()
        {
            return ExceptField("version");
        }
    }

    public class AboutWebUiQueryBuilder : GraphQlQueryBuilder<AboutWebUiQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "channel" },
                new GraphQlFieldMetadata { Name = "tag" }
            };

        protected override string TypeName { get { return "AboutWebUI"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AboutWebUiQueryBuilder WithChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channel", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutWebUiQueryBuilder ExceptChannel()
        {
            return ExceptField("channel");
        }

        public AboutWebUiQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutWebUiQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }
    }

    public class BackupRestoreStatusQueryBuilder : GraphQlQueryBuilder<BackupRestoreStatusQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "mangaProgress" },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "totalManga" }
            };

        protected override string TypeName { get { return "BackupRestoreStatus"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BackupRestoreStatusQueryBuilder WithMangaProgress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mangaProgress", alias, new GraphQlDirective[] { include, skip });
        }

        public BackupRestoreStatusQueryBuilder ExceptMangaProgress()
        {
            return ExceptField("mangaProgress");
        }

        public BackupRestoreStatusQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public BackupRestoreStatusQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public BackupRestoreStatusQueryBuilder WithTotalManga(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalManga", alias, new GraphQlDirective[] { include, skip });
        }

        public BackupRestoreStatusQueryBuilder ExceptTotalManga()
        {
            return ExceptField("totalManga");
        }
    }

    public class BindTrackPayloadQueryBuilder : GraphQlQueryBuilder<BindTrackPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "trackRecord", IsComplex = true, QueryBuilderType = typeof(TrackRecordTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "BindTrackPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BindTrackPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public BindTrackPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public BindTrackPayloadQueryBuilder WithTrackRecord(TrackRecordTypeQueryBuilder trackRecordTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("trackRecord", alias, trackRecordTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BindTrackPayloadQueryBuilder ExceptTrackRecord()
        {
            return ExceptField("trackRecord");
        }
    }

    public class CategoryEdgeQueryBuilder : GraphQlQueryBuilder<CategoryEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "CategoryEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CategoryEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public CategoryEdgeQueryBuilder WithNode(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CategoryEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class CategoryMetaTypeQueryBuilder : GraphQlQueryBuilder<CategoryMetaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "categoryId" },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "category", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "CategoryMetaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CategoryMetaTypeQueryBuilder WithCategoryId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("categoryId", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryMetaTypeQueryBuilder ExceptCategoryId()
        {
            return ExceptField("categoryId");
        }

        public CategoryMetaTypeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryMetaTypeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public CategoryMetaTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryMetaTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public CategoryMetaTypeQueryBuilder WithCategory(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("category", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CategoryMetaTypeQueryBuilder ExceptCategory()
        {
            return ExceptField("category");
        }
    }

    public class CategoryNodeListQueryBuilder : GraphQlQueryBuilder<CategoryNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(CategoryEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "CategoryNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CategoryNodeListQueryBuilder WithEdges(CategoryEdgeQueryBuilder categoryEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, categoryEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CategoryNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public CategoryNodeListQueryBuilder WithNodes(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CategoryNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CategoryNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CategoryNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public CategoryNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class CategoryTypeQueryBuilder : GraphQlQueryBuilder<CategoryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "includeInDownload" },
                new GraphQlFieldMetadata { Name = "includeInUpdate" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "order" },
                new GraphQlFieldMetadata { Name = "mangas", IsComplex = true, QueryBuilderType = typeof(MangaNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(CategoryMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "CategoryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CategoryTypeQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public CategoryTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public CategoryTypeQueryBuilder WithIncludeInDownload(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("includeInDownload", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptIncludeInDownload()
        {
            return ExceptField("includeInDownload");
        }

        public CategoryTypeQueryBuilder WithIncludeInUpdate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("includeInUpdate", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptIncludeInUpdate()
        {
            return ExceptField("includeInUpdate");
        }

        public CategoryTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public CategoryTypeQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public CategoryTypeQueryBuilder WithMangas(MangaNodeListQueryBuilder mangaNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangas", alias, mangaNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptMangas()
        {
            return ExceptField("mangas");
        }

        public CategoryTypeQueryBuilder WithMeta(CategoryMetaTypeQueryBuilder categoryMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, categoryMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CategoryTypeQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class ChapterEdgeQueryBuilder : GraphQlQueryBuilder<ChapterEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ChapterEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChapterEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ChapterEdgeQueryBuilder WithNode(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChapterEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class ChapterMetaTypeQueryBuilder : GraphQlQueryBuilder<ChapterMetaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapterId" },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "chapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ChapterMetaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChapterMetaTypeQueryBuilder WithChapterId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chapterId", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterMetaTypeQueryBuilder ExceptChapterId()
        {
            return ExceptField("chapterId");
        }

        public ChapterMetaTypeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterMetaTypeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public ChapterMetaTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterMetaTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public ChapterMetaTypeQueryBuilder WithChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChapterMetaTypeQueryBuilder ExceptChapter()
        {
            return ExceptField("chapter");
        }
    }

    public class ChapterNodeListQueryBuilder : GraphQlQueryBuilder<ChapterNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ChapterEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "ChapterNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChapterNodeListQueryBuilder WithEdges(ChapterEdgeQueryBuilder chapterEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, chapterEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChapterNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ChapterNodeListQueryBuilder WithNodes(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChapterNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ChapterNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChapterNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public ChapterNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class ChapterTypeQueryBuilder : GraphQlQueryBuilder<ChapterTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapterNumber" },
                new GraphQlFieldMetadata { Name = "fetchedAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "isBookmarked" },
                new GraphQlFieldMetadata { Name = "isDownloaded" },
                new GraphQlFieldMetadata { Name = "isRead" },
                new GraphQlFieldMetadata { Name = "lastPageRead" },
                new GraphQlFieldMetadata { Name = "lastReadAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "mangaId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "pageCount" },
                new GraphQlFieldMetadata { Name = "realUrl" },
                new GraphQlFieldMetadata { Name = "scanlator" },
                new GraphQlFieldMetadata { Name = "sourceOrder" },
                new GraphQlFieldMetadata { Name = "uploadDate", IsComplex = true },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(ChapterMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ChapterType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChapterTypeQueryBuilder WithChapterNumber(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chapterNumber", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptChapterNumber()
        {
            return ExceptField("chapterNumber");
        }

        public ChapterTypeQueryBuilder WithFetchedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fetchedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptFetchedAt()
        {
            return ExceptField("fetchedAt");
        }

        public ChapterTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ChapterTypeQueryBuilder WithIsBookmarked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBookmarked", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptIsBookmarked()
        {
            return ExceptField("isBookmarked");
        }

        public ChapterTypeQueryBuilder WithIsDownloaded(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDownloaded", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptIsDownloaded()
        {
            return ExceptField("isDownloaded");
        }

        public ChapterTypeQueryBuilder WithIsRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRead", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptIsRead()
        {
            return ExceptField("isRead");
        }

        public ChapterTypeQueryBuilder WithLastPageRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastPageRead", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptLastPageRead()
        {
            return ExceptField("lastPageRead");
        }

        public ChapterTypeQueryBuilder WithLastReadAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastReadAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptLastReadAt()
        {
            return ExceptField("lastReadAt");
        }

        public ChapterTypeQueryBuilder WithMangaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mangaId", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptMangaId()
        {
            return ExceptField("mangaId");
        }

        public ChapterTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ChapterTypeQueryBuilder WithPageCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pageCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptPageCount()
        {
            return ExceptField("pageCount");
        }

        public ChapterTypeQueryBuilder WithRealUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("realUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptRealUrl()
        {
            return ExceptField("realUrl");
        }

        public ChapterTypeQueryBuilder WithScanlator(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scanlator", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptScanlator()
        {
            return ExceptField("scanlator");
        }

        public ChapterTypeQueryBuilder WithSourceOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sourceOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptSourceOrder()
        {
            return ExceptField("sourceOrder");
        }

        public ChapterTypeQueryBuilder WithUploadDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("uploadDate", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptUploadDate()
        {
            return ExceptField("uploadDate");
        }

        public ChapterTypeQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public ChapterTypeQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }

        public ChapterTypeQueryBuilder WithMeta(ChapterMetaTypeQueryBuilder chapterMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, chapterMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChapterTypeQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class CheckBoxFilterQueryBuilder : GraphQlQueryBuilder<CheckBoxFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "CheckBoxFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckBoxFilterQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxFilterQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public CheckBoxFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class CheckBoxPreferenceQueryBuilder : GraphQlQueryBuilder<CheckBoxPreferenceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "currentValue" },
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "visible" }
            };

        protected override string TypeName { get { return "CheckBoxPreference"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckBoxPreferenceQueryBuilder WithCurrentValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentValue", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxPreferenceQueryBuilder ExceptCurrentValue()
        {
            return ExceptField("currentValue");
        }

        public CheckBoxPreferenceQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxPreferenceQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public CheckBoxPreferenceQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxPreferenceQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public CheckBoxPreferenceQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxPreferenceQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public CheckBoxPreferenceQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxPreferenceQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public CheckBoxPreferenceQueryBuilder WithVisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("visible", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckBoxPreferenceQueryBuilder ExceptVisible()
        {
            return ExceptField("visible");
        }
    }

    public class CheckForServerUpdatesPayloadQueryBuilder : GraphQlQueryBuilder<CheckForServerUpdatesPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "channel" },
                new GraphQlFieldMetadata { Name = "tag" },
                new GraphQlFieldMetadata { Name = "url" }
            };

        protected override string TypeName { get { return "CheckForServerUpdatesPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CheckForServerUpdatesPayloadQueryBuilder WithChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channel", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckForServerUpdatesPayloadQueryBuilder ExceptChannel()
        {
            return ExceptField("channel");
        }

        public CheckForServerUpdatesPayloadQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckForServerUpdatesPayloadQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public CheckForServerUpdatesPayloadQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public CheckForServerUpdatesPayloadQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class ClearCachedImagesPayloadQueryBuilder : GraphQlQueryBuilder<ClearCachedImagesPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cachedPages" },
                new GraphQlFieldMetadata { Name = "cachedThumbnails" },
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadedThumbnails" }
            };

        protected override string TypeName { get { return "ClearCachedImagesPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ClearCachedImagesPayloadQueryBuilder WithCachedPages(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cachedPages", alias, new GraphQlDirective[] { include, skip });
        }

        public ClearCachedImagesPayloadQueryBuilder ExceptCachedPages()
        {
            return ExceptField("cachedPages");
        }

        public ClearCachedImagesPayloadQueryBuilder WithCachedThumbnails(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cachedThumbnails", alias, new GraphQlDirective[] { include, skip });
        }

        public ClearCachedImagesPayloadQueryBuilder ExceptCachedThumbnails()
        {
            return ExceptField("cachedThumbnails");
        }

        public ClearCachedImagesPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public ClearCachedImagesPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public ClearCachedImagesPayloadQueryBuilder WithDownloadedThumbnails(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadedThumbnails", alias, new GraphQlDirective[] { include, skip });
        }

        public ClearCachedImagesPayloadQueryBuilder ExceptDownloadedThumbnails()
        {
            return ExceptField("downloadedThumbnails");
        }
    }

    public class ClearDownloaderPayloadQueryBuilder : GraphQlQueryBuilder<ClearDownloaderPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "ClearDownloaderPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ClearDownloaderPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public ClearDownloaderPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public ClearDownloaderPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ClearDownloaderPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class CreateBackupPayloadQueryBuilder : GraphQlQueryBuilder<CreateBackupPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "url" }
            };

        protected override string TypeName { get { return "CreateBackupPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CreateBackupPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public CreateBackupPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public CreateBackupPayloadQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public CreateBackupPayloadQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public class CreateCategoryPayloadQueryBuilder : GraphQlQueryBuilder<CreateCategoryPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "category", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "CreateCategoryPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CreateCategoryPayloadQueryBuilder WithCategory(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("category", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CreateCategoryPayloadQueryBuilder ExceptCategory()
        {
            return ExceptField("category");
        }

        public CreateCategoryPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public CreateCategoryPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class DeleteCategoryMetaPayloadQueryBuilder : GraphQlQueryBuilder<DeleteCategoryMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "category", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(CategoryMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DeleteCategoryMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteCategoryMetaPayloadQueryBuilder WithCategory(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("category", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteCategoryMetaPayloadQueryBuilder ExceptCategory()
        {
            return ExceptField("category");
        }

        public DeleteCategoryMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteCategoryMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DeleteCategoryMetaPayloadQueryBuilder WithMeta(CategoryMetaTypeQueryBuilder categoryMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, categoryMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteCategoryMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class DeleteCategoryPayloadQueryBuilder : GraphQlQueryBuilder<DeleteCategoryPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "category", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "mangas", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DeleteCategoryPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteCategoryPayloadQueryBuilder WithCategory(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("category", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteCategoryPayloadQueryBuilder ExceptCategory()
        {
            return ExceptField("category");
        }

        public DeleteCategoryPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteCategoryPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DeleteCategoryPayloadQueryBuilder WithMangas(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangas", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteCategoryPayloadQueryBuilder ExceptMangas()
        {
            return ExceptField("mangas");
        }
    }

    public class DeleteChapterMetaPayloadQueryBuilder : GraphQlQueryBuilder<DeleteChapterMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(ChapterMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DeleteChapterMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteChapterMetaPayloadQueryBuilder WithChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteChapterMetaPayloadQueryBuilder ExceptChapter()
        {
            return ExceptField("chapter");
        }

        public DeleteChapterMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteChapterMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DeleteChapterMetaPayloadQueryBuilder WithMeta(ChapterMetaTypeQueryBuilder chapterMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, chapterMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteChapterMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class DeleteDownloadedChapterPayloadQueryBuilder : GraphQlQueryBuilder<DeleteDownloadedChapterPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapters", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "DeleteDownloadedChapterPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteDownloadedChapterPayloadQueryBuilder WithChapters(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapters", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteDownloadedChapterPayloadQueryBuilder ExceptChapters()
        {
            return ExceptField("chapters");
        }

        public DeleteDownloadedChapterPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteDownloadedChapterPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class DeleteDownloadedChaptersPayloadQueryBuilder : GraphQlQueryBuilder<DeleteDownloadedChaptersPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapters", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "DeleteDownloadedChaptersPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteDownloadedChaptersPayloadQueryBuilder WithChapters(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapters", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteDownloadedChaptersPayloadQueryBuilder ExceptChapters()
        {
            return ExceptField("chapters");
        }

        public DeleteDownloadedChaptersPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteDownloadedChaptersPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class DeleteGlobalMetaPayloadQueryBuilder : GraphQlQueryBuilder<DeleteGlobalMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(GlobalMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DeleteGlobalMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteGlobalMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteGlobalMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DeleteGlobalMetaPayloadQueryBuilder WithMeta(GlobalMetaTypeQueryBuilder globalMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, globalMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteGlobalMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class DeleteMangaMetaPayloadQueryBuilder : GraphQlQueryBuilder<DeleteMangaMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(MangaMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DeleteMangaMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteMangaMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteMangaMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DeleteMangaMetaPayloadQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteMangaMetaPayloadQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }

        public DeleteMangaMetaPayloadQueryBuilder WithMeta(MangaMetaTypeQueryBuilder mangaMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, mangaMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteMangaMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class DeleteSourceMetaPayloadQueryBuilder : GraphQlQueryBuilder<DeleteSourceMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(SourceMetaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "source", IsComplex = true, QueryBuilderType = typeof(SourceTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DeleteSourceMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteSourceMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteSourceMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DeleteSourceMetaPayloadQueryBuilder WithMeta(SourceMetaTypeQueryBuilder sourceMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, sourceMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteSourceMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }

        public DeleteSourceMetaPayloadQueryBuilder WithSource(SourceTypeQueryBuilder sourceTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("source", alias, sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DeleteSourceMetaPayloadQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }
    }

    public class DequeueChapterDownloadPayloadQueryBuilder : GraphQlQueryBuilder<DequeueChapterDownloadPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "DequeueChapterDownloadPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DequeueChapterDownloadPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DequeueChapterDownloadPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DequeueChapterDownloadPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DequeueChapterDownloadPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class DequeueChapterDownloadsPayloadQueryBuilder : GraphQlQueryBuilder<DequeueChapterDownloadsPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "DequeueChapterDownloadsPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DequeueChapterDownloadsPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public DequeueChapterDownloadsPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public DequeueChapterDownloadsPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DequeueChapterDownloadsPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class DownloadEdgeQueryBuilder : GraphQlQueryBuilder<DownloadEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(DownloadTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DownloadEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DownloadEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public DownloadEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public DownloadEdgeQueryBuilder WithNode(DownloadTypeQueryBuilder downloadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, downloadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DownloadEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class DownloadNodeListQueryBuilder : GraphQlQueryBuilder<DownloadNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(DownloadEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(DownloadTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "DownloadNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DownloadNodeListQueryBuilder WithEdges(DownloadEdgeQueryBuilder downloadEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, downloadEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DownloadNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public DownloadNodeListQueryBuilder WithNodes(DownloadTypeQueryBuilder downloadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, downloadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DownloadNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public DownloadNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DownloadNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public DownloadNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public DownloadNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class DownloadStatusQueryBuilder : GraphQlQueryBuilder<DownloadStatusQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "queue", IsComplex = true, QueryBuilderType = typeof(DownloadTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "state" }
            };

        protected override string TypeName { get { return "DownloadStatus"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DownloadStatusQueryBuilder WithQueue(DownloadTypeQueryBuilder downloadTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("queue", alias, downloadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DownloadStatusQueryBuilder ExceptQueue()
        {
            return ExceptField("queue");
        }

        public DownloadStatusQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public DownloadStatusQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }
    }

    public class DownloadTypeQueryBuilder : GraphQlQueryBuilder<DownloadTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "progress" },
                new GraphQlFieldMetadata { Name = "state" },
                new GraphQlFieldMetadata { Name = "tries" },
                new GraphQlFieldMetadata { Name = "chapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "DownloadType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DownloadTypeQueryBuilder WithProgress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("progress", alias, new GraphQlDirective[] { include, skip });
        }

        public DownloadTypeQueryBuilder ExceptProgress()
        {
            return ExceptField("progress");
        }

        public DownloadTypeQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public DownloadTypeQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }

        public DownloadTypeQueryBuilder WithTries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tries", alias, new GraphQlDirective[] { include, skip });
        }

        public DownloadTypeQueryBuilder ExceptTries()
        {
            return ExceptField("tries");
        }

        public DownloadTypeQueryBuilder WithChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DownloadTypeQueryBuilder ExceptChapter()
        {
            return ExceptField("chapter");
        }

        public DownloadTypeQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DownloadTypeQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }
    }

    public class EdgeQueryBuilder : GraphQlQueryBuilder<EdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(NodeQueryBuilder) }
            };

        public EdgeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Edge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public EdgeQueryBuilder WithNode(NodeQueryBuilder nodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, nodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }

        public EdgeQueryBuilder WithCategoryEdgeFragment(CategoryEdgeQueryBuilder categoryEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(categoryEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithChapterEdgeFragment(ChapterEdgeQueryBuilder chapterEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(chapterEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithDownloadEdgeFragment(DownloadEdgeQueryBuilder downloadEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(downloadEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithExtensionEdgeFragment(ExtensionEdgeQueryBuilder extensionEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(extensionEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithMangaEdgeFragment(MangaEdgeQueryBuilder mangaEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mangaEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithMetaEdgeFragment(MetaEdgeQueryBuilder metaEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(metaEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithSourceEdgeFragment(SourceEdgeQueryBuilder sourceEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sourceEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithTrackRecordEdgeFragment(TrackRecordEdgeQueryBuilder trackRecordEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(trackRecordEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EdgeQueryBuilder WithTrackerEdgeFragment(TrackerEdgeQueryBuilder trackerEdgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(trackerEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class EditTextPreferenceQueryBuilder : GraphQlQueryBuilder<EditTextPreferenceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "currentValue" },
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "dialogMessage" },
                new GraphQlFieldMetadata { Name = "dialogTitle" },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "visible" }
            };

        protected override string TypeName { get { return "EditTextPreference"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EditTextPreferenceQueryBuilder WithCurrentValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentValue", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptCurrentValue()
        {
            return ExceptField("currentValue");
        }

        public EditTextPreferenceQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public EditTextPreferenceQueryBuilder WithDialogMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dialogMessage", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptDialogMessage()
        {
            return ExceptField("dialogMessage");
        }

        public EditTextPreferenceQueryBuilder WithDialogTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dialogTitle", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptDialogTitle()
        {
            return ExceptField("dialogTitle");
        }

        public EditTextPreferenceQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public EditTextPreferenceQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public EditTextPreferenceQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public EditTextPreferenceQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public EditTextPreferenceQueryBuilder WithVisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("visible", alias, new GraphQlDirective[] { include, skip });
        }

        public EditTextPreferenceQueryBuilder ExceptVisible()
        {
            return ExceptField("visible");
        }
    }

    public class EnqueueChapterDownloadPayloadQueryBuilder : GraphQlQueryBuilder<EnqueueChapterDownloadPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "EnqueueChapterDownloadPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EnqueueChapterDownloadPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public EnqueueChapterDownloadPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public EnqueueChapterDownloadPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EnqueueChapterDownloadPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class EnqueueChapterDownloadsPayloadQueryBuilder : GraphQlQueryBuilder<EnqueueChapterDownloadsPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "EnqueueChapterDownloadsPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EnqueueChapterDownloadsPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public EnqueueChapterDownloadsPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public EnqueueChapterDownloadsPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EnqueueChapterDownloadsPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class ExtensionEdgeQueryBuilder : GraphQlQueryBuilder<ExtensionEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ExtensionEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ExtensionEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public ExtensionEdgeQueryBuilder WithNode(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExtensionEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class ExtensionNodeListQueryBuilder : GraphQlQueryBuilder<ExtensionNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(ExtensionEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "ExtensionNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ExtensionNodeListQueryBuilder WithEdges(ExtensionEdgeQueryBuilder extensionEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, extensionEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExtensionNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public ExtensionNodeListQueryBuilder WithNodes(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExtensionNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ExtensionNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExtensionNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public ExtensionNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class ExtensionTypeQueryBuilder : GraphQlQueryBuilder<ExtensionTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "apkName" },
                new GraphQlFieldMetadata { Name = "hasUpdate" },
                new GraphQlFieldMetadata { Name = "iconUrl" },
                new GraphQlFieldMetadata { Name = "isInstalled" },
                new GraphQlFieldMetadata { Name = "isNsfw" },
                new GraphQlFieldMetadata { Name = "isObsolete" },
                new GraphQlFieldMetadata { Name = "lang" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "pkgName" },
                new GraphQlFieldMetadata { Name = "repo" },
                new GraphQlFieldMetadata { Name = "versionCode" },
                new GraphQlFieldMetadata { Name = "versionName" },
                new GraphQlFieldMetadata { Name = "source", IsComplex = true, QueryBuilderType = typeof(SourceNodeListQueryBuilder) }
            };

        protected override string TypeName { get { return "ExtensionType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ExtensionTypeQueryBuilder WithApkName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("apkName", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptApkName()
        {
            return ExceptField("apkName");
        }

        public ExtensionTypeQueryBuilder WithHasUpdate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasUpdate", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptHasUpdate()
        {
            return ExceptField("hasUpdate");
        }

        public ExtensionTypeQueryBuilder WithIconUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("iconUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptIconUrl()
        {
            return ExceptField("iconUrl");
        }

        public ExtensionTypeQueryBuilder WithIsInstalled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isInstalled", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptIsInstalled()
        {
            return ExceptField("isInstalled");
        }

        public ExtensionTypeQueryBuilder WithIsNsfw(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isNsfw", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptIsNsfw()
        {
            return ExceptField("isNsfw");
        }

        public ExtensionTypeQueryBuilder WithIsObsolete(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isObsolete", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptIsObsolete()
        {
            return ExceptField("isObsolete");
        }

        public ExtensionTypeQueryBuilder WithLang(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lang", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptLang()
        {
            return ExceptField("lang");
        }

        public ExtensionTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ExtensionTypeQueryBuilder WithPkgName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pkgName", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptPkgName()
        {
            return ExceptField("pkgName");
        }

        public ExtensionTypeQueryBuilder WithRepo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("repo", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptRepo()
        {
            return ExceptField("repo");
        }

        public ExtensionTypeQueryBuilder WithVersionCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("versionCode", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptVersionCode()
        {
            return ExceptField("versionCode");
        }

        public ExtensionTypeQueryBuilder WithVersionName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("versionName", alias, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptVersionName()
        {
            return ExceptField("versionName");
        }

        public ExtensionTypeQueryBuilder WithSource(SourceNodeListQueryBuilder sourceNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("source", alias, sourceNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ExtensionTypeQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }
    }

    public class FetchChapterPagesPayloadQueryBuilder : GraphQlQueryBuilder<FetchChapterPagesPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "pages", IsComplex = true }
            };

        protected override string TypeName { get { return "FetchChapterPagesPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FetchChapterPagesPayloadQueryBuilder WithChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FetchChapterPagesPayloadQueryBuilder ExceptChapter()
        {
            return ExceptField("chapter");
        }

        public FetchChapterPagesPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public FetchChapterPagesPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public FetchChapterPagesPayloadQueryBuilder WithPages(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pages", alias, new GraphQlDirective[] { include, skip });
        }

        public FetchChapterPagesPayloadQueryBuilder ExceptPages()
        {
            return ExceptField("pages");
        }
    }

    public class FetchChaptersPayloadQueryBuilder : GraphQlQueryBuilder<FetchChaptersPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapters", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "FetchChaptersPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FetchChaptersPayloadQueryBuilder WithChapters(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapters", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FetchChaptersPayloadQueryBuilder ExceptChapters()
        {
            return ExceptField("chapters");
        }

        public FetchChaptersPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public FetchChaptersPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class FetchExtensionsPayloadQueryBuilder : GraphQlQueryBuilder<FetchExtensionsPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "extensions", IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "FetchExtensionsPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FetchExtensionsPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public FetchExtensionsPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public FetchExtensionsPayloadQueryBuilder WithExtensions(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extensions", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FetchExtensionsPayloadQueryBuilder ExceptExtensions()
        {
            return ExceptField("extensions");
        }
    }

    public class FetchMangaPayloadQueryBuilder : GraphQlQueryBuilder<FetchMangaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "FetchMangaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FetchMangaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public FetchMangaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public FetchMangaPayloadQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FetchMangaPayloadQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }
    }

    public class FetchSourceMangaPayloadQueryBuilder : GraphQlQueryBuilder<FetchSourceMangaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "hasNextPage" },
                new GraphQlFieldMetadata { Name = "mangas", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "FetchSourceMangaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FetchSourceMangaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public FetchSourceMangaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public FetchSourceMangaPayloadQueryBuilder WithHasNextPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { include, skip });
        }

        public FetchSourceMangaPayloadQueryBuilder ExceptHasNextPage()
        {
            return ExceptField("hasNextPage");
        }

        public FetchSourceMangaPayloadQueryBuilder WithMangas(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangas", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FetchSourceMangaPayloadQueryBuilder ExceptMangas()
        {
            return ExceptField("mangas");
        }
    }

    public class FilterQueryBuilder : GraphQlQueryBuilder<FilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public FilterQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Filter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FilterQueryBuilder WithCheckBoxFilterFragment(CheckBoxFilterQueryBuilder checkBoxFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(checkBoxFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder WithGroupFilterFragment(GroupFilterQueryBuilder groupFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(groupFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder WithHeaderFilterFragment(HeaderFilterQueryBuilder headerFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(headerFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder WithSelectFilterFragment(SelectFilterQueryBuilder selectFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(selectFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder WithSeparatorFilterFragment(SeparatorFilterQueryBuilder separatorFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(separatorFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder WithSortFilterFragment(SortFilterQueryBuilder sortFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sortFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder WithTextFilterFragment(TextFilterQueryBuilder textFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(textFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FilterQueryBuilder WithTriStateFilterFragment(TriStateFilterQueryBuilder triStateFilterQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(triStateFilterQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class GlobalMetaNodeListQueryBuilder : GraphQlQueryBuilder<GlobalMetaNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(MetaEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(GlobalMetaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "GlobalMetaNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GlobalMetaNodeListQueryBuilder WithEdges(MetaEdgeQueryBuilder metaEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, metaEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GlobalMetaNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public GlobalMetaNodeListQueryBuilder WithNodes(GlobalMetaTypeQueryBuilder globalMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, globalMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GlobalMetaNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public GlobalMetaNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GlobalMetaNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public GlobalMetaNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public GlobalMetaNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class GlobalMetaTypeQueryBuilder : GraphQlQueryBuilder<GlobalMetaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "GlobalMetaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GlobalMetaTypeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public GlobalMetaTypeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public GlobalMetaTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public GlobalMetaTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class GroupFilterQueryBuilder : GraphQlQueryBuilder<GroupFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "filters", IsComplex = true, QueryBuilderType = typeof(FilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "GroupFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GroupFilterQueryBuilder WithFilters(FilterQueryBuilder filterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("filters", alias, filterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GroupFilterQueryBuilder ExceptFilters()
        {
            return ExceptField("filters");
        }

        public GroupFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public GroupFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class HeaderFilterQueryBuilder : GraphQlQueryBuilder<HeaderFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "HeaderFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeaderFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public HeaderFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class InstallExternalExtensionPayloadQueryBuilder : GraphQlQueryBuilder<InstallExternalExtensionPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "extension", IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "InstallExternalExtensionPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InstallExternalExtensionPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public InstallExternalExtensionPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public InstallExternalExtensionPayloadQueryBuilder WithExtension(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extension", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InstallExternalExtensionPayloadQueryBuilder ExceptExtension()
        {
            return ExceptField("extension");
        }
    }

    public class LastUpdateTimestampPayloadQueryBuilder : GraphQlQueryBuilder<LastUpdateTimestampPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "timestamp" }
            };

        protected override string TypeName { get { return "LastUpdateTimestampPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LastUpdateTimestampPayloadQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public LastUpdateTimestampPayloadQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }
    }

    public class ListPreferenceQueryBuilder : GraphQlQueryBuilder<ListPreferenceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "currentValue" },
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "entries", IsComplex = true },
                new GraphQlFieldMetadata { Name = "entryValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "visible" }
            };

        protected override string TypeName { get { return "ListPreference"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ListPreferenceQueryBuilder WithCurrentValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentValue", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptCurrentValue()
        {
            return ExceptField("currentValue");
        }

        public ListPreferenceQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public ListPreferenceQueryBuilder WithEntries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("entries", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptEntries()
        {
            return ExceptField("entries");
        }

        public ListPreferenceQueryBuilder WithEntryValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("entryValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptEntryValues()
        {
            return ExceptField("entryValues");
        }

        public ListPreferenceQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public ListPreferenceQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public ListPreferenceQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ListPreferenceQueryBuilder WithVisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("visible", alias, new GraphQlDirective[] { include, skip });
        }

        public ListPreferenceQueryBuilder ExceptVisible()
        {
            return ExceptField("visible");
        }
    }

    public class LoginTrackerCredentialsPayloadQueryBuilder : GraphQlQueryBuilder<LoginTrackerCredentialsPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "isLoggedIn" },
                new GraphQlFieldMetadata { Name = "tracker", IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LoginTrackerCredentialsPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LoginTrackerCredentialsPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public LoginTrackerCredentialsPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public LoginTrackerCredentialsPayloadQueryBuilder WithIsLoggedIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLoggedIn", alias, new GraphQlDirective[] { include, skip });
        }

        public LoginTrackerCredentialsPayloadQueryBuilder ExceptIsLoggedIn()
        {
            return ExceptField("isLoggedIn");
        }

        public LoginTrackerCredentialsPayloadQueryBuilder WithTracker(TrackerTypeQueryBuilder trackerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tracker", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LoginTrackerCredentialsPayloadQueryBuilder ExceptTracker()
        {
            return ExceptField("tracker");
        }
    }

    public class LoginTrackerOAuthPayloadQueryBuilder : GraphQlQueryBuilder<LoginTrackerOAuthPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "isLoggedIn" },
                new GraphQlFieldMetadata { Name = "tracker", IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LoginTrackerOAuthPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LoginTrackerOAuthPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public LoginTrackerOAuthPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public LoginTrackerOAuthPayloadQueryBuilder WithIsLoggedIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLoggedIn", alias, new GraphQlDirective[] { include, skip });
        }

        public LoginTrackerOAuthPayloadQueryBuilder ExceptIsLoggedIn()
        {
            return ExceptField("isLoggedIn");
        }

        public LoginTrackerOAuthPayloadQueryBuilder WithTracker(TrackerTypeQueryBuilder trackerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tracker", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LoginTrackerOAuthPayloadQueryBuilder ExceptTracker()
        {
            return ExceptField("tracker");
        }
    }

    public class LogoutTrackerPayloadQueryBuilder : GraphQlQueryBuilder<LogoutTrackerPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "isLoggedIn" },
                new GraphQlFieldMetadata { Name = "tracker", IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "LogoutTrackerPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LogoutTrackerPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public LogoutTrackerPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public LogoutTrackerPayloadQueryBuilder WithIsLoggedIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLoggedIn", alias, new GraphQlDirective[] { include, skip });
        }

        public LogoutTrackerPayloadQueryBuilder ExceptIsLoggedIn()
        {
            return ExceptField("isLoggedIn");
        }

        public LogoutTrackerPayloadQueryBuilder WithTracker(TrackerTypeQueryBuilder trackerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tracker", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LogoutTrackerPayloadQueryBuilder ExceptTracker()
        {
            return ExceptField("tracker");
        }
    }

    public class MangaEdgeQueryBuilder : GraphQlQueryBuilder<MangaEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MangaEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MangaEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public MangaEdgeQueryBuilder WithNode(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class MangaMetaTypeQueryBuilder : GraphQlQueryBuilder<MangaMetaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "mangaId" },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MangaMetaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MangaMetaTypeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaMetaTypeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public MangaMetaTypeQueryBuilder WithMangaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mangaId", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaMetaTypeQueryBuilder ExceptMangaId()
        {
            return ExceptField("mangaId");
        }

        public MangaMetaTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaMetaTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public MangaMetaTypeQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaMetaTypeQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }
    }

    public class MangaNodeListQueryBuilder : GraphQlQueryBuilder<MangaNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(MangaEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "MangaNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MangaNodeListQueryBuilder WithEdges(MangaEdgeQueryBuilder mangaEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, mangaEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public MangaNodeListQueryBuilder WithNodes(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MangaNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public MangaNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class MangaTypeQueryBuilder : GraphQlQueryBuilder<MangaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "artist" },
                new GraphQlFieldMetadata { Name = "author" },
                new GraphQlFieldMetadata { Name = "chaptersLastFetchedAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "genre", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "inLibrary" },
                new GraphQlFieldMetadata { Name = "inLibraryAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "initialized" },
                new GraphQlFieldMetadata { Name = "lastFetchedAt", IsComplex = true },
                new GraphQlFieldMetadata { Name = "realUrl" },
                new GraphQlFieldMetadata { Name = "sourceId", IsComplex = true },
                new GraphQlFieldMetadata { Name = "status" },
                new GraphQlFieldMetadata { Name = "thumbnailUrl" },
                new GraphQlFieldMetadata { Name = "thumbnailUrlLastFetched", IsComplex = true },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "updateStrategy" },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "age", IsComplex = true },
                new GraphQlFieldMetadata { Name = "categories", IsComplex = true, QueryBuilderType = typeof(CategoryNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chapters", IsComplex = true, QueryBuilderType = typeof(ChapterNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chaptersAge", IsComplex = true },
                new GraphQlFieldMetadata { Name = "downloadCount" },
                new GraphQlFieldMetadata { Name = "lastReadChapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "latestFetchedChapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "latestReadChapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "latestUploadedChapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(MangaMetaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "source", IsComplex = true, QueryBuilderType = typeof(SourceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "trackRecords", IsComplex = true, QueryBuilderType = typeof(TrackRecordNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "unreadCount" }
            };

        protected override string TypeName { get { return "MangaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MangaTypeQueryBuilder WithArtist(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("artist", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptArtist()
        {
            return ExceptField("artist");
        }

        public MangaTypeQueryBuilder WithAuthor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("author", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptAuthor()
        {
            return ExceptField("author");
        }

        public MangaTypeQueryBuilder WithChaptersLastFetchedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersLastFetchedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptChaptersLastFetchedAt()
        {
            return ExceptField("chaptersLastFetchedAt");
        }

        public MangaTypeQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public MangaTypeQueryBuilder WithGenre(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("genre", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptGenre()
        {
            return ExceptField("genre");
        }

        public MangaTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MangaTypeQueryBuilder WithInLibrary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("inLibrary", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptInLibrary()
        {
            return ExceptField("inLibrary");
        }

        public MangaTypeQueryBuilder WithInLibraryAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("inLibraryAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptInLibraryAt()
        {
            return ExceptField("inLibraryAt");
        }

        public MangaTypeQueryBuilder WithInitialized(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("initialized", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptInitialized()
        {
            return ExceptField("initialized");
        }

        public MangaTypeQueryBuilder WithLastFetchedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastFetchedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptLastFetchedAt()
        {
            return ExceptField("lastFetchedAt");
        }

        public MangaTypeQueryBuilder WithRealUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("realUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptRealUrl()
        {
            return ExceptField("realUrl");
        }

        public MangaTypeQueryBuilder WithSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptSourceId()
        {
            return ExceptField("sourceId");
        }

        public MangaTypeQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public MangaTypeQueryBuilder WithThumbnailUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("thumbnailUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptThumbnailUrl()
        {
            return ExceptField("thumbnailUrl");
        }

        public MangaTypeQueryBuilder WithThumbnailUrlLastFetched(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("thumbnailUrlLastFetched", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptThumbnailUrlLastFetched()
        {
            return ExceptField("thumbnailUrlLastFetched");
        }

        public MangaTypeQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public MangaTypeQueryBuilder WithUpdateStrategy(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updateStrategy", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptUpdateStrategy()
        {
            return ExceptField("updateStrategy");
        }

        public MangaTypeQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public MangaTypeQueryBuilder WithAge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("age", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptAge()
        {
            return ExceptField("age");
        }

        public MangaTypeQueryBuilder WithCategories(CategoryNodeListQueryBuilder categoryNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("categories", alias, categoryNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptCategories()
        {
            return ExceptField("categories");
        }

        public MangaTypeQueryBuilder WithChapters(ChapterNodeListQueryBuilder chapterNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapters", alias, chapterNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptChapters()
        {
            return ExceptField("chapters");
        }

        public MangaTypeQueryBuilder WithChaptersAge(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chaptersAge", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptChaptersAge()
        {
            return ExceptField("chaptersAge");
        }

        public MangaTypeQueryBuilder WithDownloadCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptDownloadCount()
        {
            return ExceptField("downloadCount");
        }

        public MangaTypeQueryBuilder WithLastReadChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lastReadChapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptLastReadChapter()
        {
            return ExceptField("lastReadChapter");
        }

        public MangaTypeQueryBuilder WithLatestFetchedChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("latestFetchedChapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptLatestFetchedChapter()
        {
            return ExceptField("latestFetchedChapter");
        }

        public MangaTypeQueryBuilder WithLatestReadChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("latestReadChapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptLatestReadChapter()
        {
            return ExceptField("latestReadChapter");
        }

        public MangaTypeQueryBuilder WithLatestUploadedChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("latestUploadedChapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptLatestUploadedChapter()
        {
            return ExceptField("latestUploadedChapter");
        }

        public MangaTypeQueryBuilder WithMeta(MangaMetaTypeQueryBuilder mangaMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, mangaMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }

        public MangaTypeQueryBuilder WithSource(SourceTypeQueryBuilder sourceTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("source", alias, sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }

        public MangaTypeQueryBuilder WithTrackRecords(TrackRecordNodeListQueryBuilder trackRecordNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("trackRecords", alias, trackRecordNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptTrackRecords()
        {
            return ExceptField("trackRecords");
        }

        public MangaTypeQueryBuilder WithUnreadCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("unreadCount", alias, new GraphQlDirective[] { include, skip });
        }

        public MangaTypeQueryBuilder ExceptUnreadCount()
        {
            return ExceptField("unreadCount");
        }
    }

    public class MetaEdgeQueryBuilder : GraphQlQueryBuilder<MetaEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(GlobalMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MetaEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetaEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public MetaEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public MetaEdgeQueryBuilder WithNode(GlobalMetaTypeQueryBuilder globalMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, globalMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetaEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class MetaTypeQueryBuilder : GraphQlQueryBuilder<MetaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        public MetaTypeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "MetaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MetaTypeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public MetaTypeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public MetaTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public MetaTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public MetaTypeQueryBuilder WithCategoryMetaTypeFragment(CategoryMetaTypeQueryBuilder categoryMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(categoryMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetaTypeQueryBuilder WithChapterMetaTypeFragment(ChapterMetaTypeQueryBuilder chapterMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(chapterMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetaTypeQueryBuilder WithGlobalMetaTypeFragment(GlobalMetaTypeQueryBuilder globalMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(globalMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetaTypeQueryBuilder WithMangaMetaTypeFragment(MangaMetaTypeQueryBuilder mangaMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mangaMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MetaTypeQueryBuilder WithSourceMetaTypeFragment(SourceMetaTypeQueryBuilder sourceMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sourceMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class MultiSelectListPreferenceQueryBuilder : GraphQlQueryBuilder<MultiSelectListPreferenceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "currentValue", IsComplex = true },
                new GraphQlFieldMetadata { Name = "default", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dialogMessage" },
                new GraphQlFieldMetadata { Name = "dialogTitle" },
                new GraphQlFieldMetadata { Name = "entries", IsComplex = true },
                new GraphQlFieldMetadata { Name = "entryValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "visible" }
            };

        protected override string TypeName { get { return "MultiSelectListPreference"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MultiSelectListPreferenceQueryBuilder WithCurrentValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentValue", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptCurrentValue()
        {
            return ExceptField("currentValue");
        }

        public MultiSelectListPreferenceQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public MultiSelectListPreferenceQueryBuilder WithDialogMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dialogMessage", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptDialogMessage()
        {
            return ExceptField("dialogMessage");
        }

        public MultiSelectListPreferenceQueryBuilder WithDialogTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dialogTitle", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptDialogTitle()
        {
            return ExceptField("dialogTitle");
        }

        public MultiSelectListPreferenceQueryBuilder WithEntries(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("entries", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptEntries()
        {
            return ExceptField("entries");
        }

        public MultiSelectListPreferenceQueryBuilder WithEntryValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("entryValues", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptEntryValues()
        {
            return ExceptField("entryValues");
        }

        public MultiSelectListPreferenceQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public MultiSelectListPreferenceQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public MultiSelectListPreferenceQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public MultiSelectListPreferenceQueryBuilder WithVisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("visible", alias, new GraphQlDirective[] { include, skip });
        }

        public MultiSelectListPreferenceQueryBuilder ExceptVisible()
        {
            return ExceptField("visible");
        }
    }

    public class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "createBackup", IsComplex = true, QueryBuilderType = typeof(CreateBackupPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "restoreBackup", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(RestoreBackupPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createCategory", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(CreateCategoryPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteCategory", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteCategoryPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteCategoryMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteCategoryMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "setCategoryMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SetCategoryMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateCategories", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateCategoriesPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateCategory", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateCategoryPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateCategoryOrder", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateCategoryOrderPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateMangaCategories", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateMangaCategoriesPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateMangasCategories", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateMangasCategoriesPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteChapterMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteChapterMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "fetchChapterPages", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(FetchChapterPagesPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "fetchChapters", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(FetchChaptersPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "setChapterMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SetChapterMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateChapter", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateChapterPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateChapters", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateChaptersPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clearDownloader", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ClearDownloaderPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteDownloadedChapter", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteDownloadedChapterPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteDownloadedChapters", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteDownloadedChaptersPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dequeueChapterDownload", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DequeueChapterDownloadPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dequeueChapterDownloads", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DequeueChapterDownloadsPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "enqueueChapterDownload", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(EnqueueChapterDownloadPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "enqueueChapterDownloads", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(EnqueueChapterDownloadsPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reorderChapterDownload", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ReorderChapterDownloadPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "startDownloader", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(StartDownloaderPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stopDownloader", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(StopDownloaderPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "fetchExtensions", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(FetchExtensionsPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "installExternalExtension", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(InstallExternalExtensionPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateExtension", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateExtensionPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateExtensions", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateExtensionsPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clearCachedImages", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ClearCachedImagesPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "resetWebUIUpdateStatus", IsComplex = true, QueryBuilderType = typeof(WebUiUpdateStatusQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateWebUI", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(WebUiUpdatePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteMangaMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMangaMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "fetchManga", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(FetchMangaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "setMangaMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SetMangaMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateManga", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateMangaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateMangas", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateMangasPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteGlobalMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteGlobalMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "setGlobalMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SetGlobalMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "resetSettings", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ResetSettingsPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "setSettings", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SetSettingsPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteSourceMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteSourceMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "fetchSourceManga", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(FetchSourceMangaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "setSourceMeta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SetSourceMetaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateSourcePreference", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateSourcePreferencePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "bindTrack", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BindTrackPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "loginTrackerCredentials", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LoginTrackerCredentialsPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "loginTrackerOAuth", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LoginTrackerOAuthPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "logoutTracker", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LogoutTrackerPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateTrack", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateTrackPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateCategoryManga", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateCategoryMangaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateLibraryManga", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateLibraryMangaPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateStop", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UpdateStopPayloadQueryBuilder) }
            };

        protected override string TypeName { get { return "Mutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public MutationQueryBuilder WithCreateBackup(CreateBackupPayloadQueryBuilder createBackupPayloadQueryBuilder, QueryBuilderParameter<CreateBackupInput> input = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (input != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );

            return WithObjectField("createBackup", alias, createBackupPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateBackup()
        {
            return ExceptField("createBackup");
        }

        public MutationQueryBuilder WithRestoreBackup(RestoreBackupPayloadQueryBuilder restoreBackupPayloadQueryBuilder, QueryBuilderParameter<RestoreBackupInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("restoreBackup", alias, restoreBackupPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRestoreBackup()
        {
            return ExceptField("restoreBackup");
        }

        public MutationQueryBuilder WithCreateCategory(CreateCategoryPayloadQueryBuilder createCategoryPayloadQueryBuilder, QueryBuilderParameter<CreateCategoryInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("createCategory", alias, createCategoryPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateCategory()
        {
            return ExceptField("createCategory");
        }

        public MutationQueryBuilder WithDeleteCategory(DeleteCategoryPayloadQueryBuilder deleteCategoryPayloadQueryBuilder, QueryBuilderParameter<DeleteCategoryInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteCategory", alias, deleteCategoryPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteCategory()
        {
            return ExceptField("deleteCategory");
        }

        public MutationQueryBuilder WithDeleteCategoryMeta(DeleteCategoryMetaPayloadQueryBuilder deleteCategoryMetaPayloadQueryBuilder, QueryBuilderParameter<DeleteCategoryMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteCategoryMeta", alias, deleteCategoryMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteCategoryMeta()
        {
            return ExceptField("deleteCategoryMeta");
        }

        public MutationQueryBuilder WithSetCategoryMeta(SetCategoryMetaPayloadQueryBuilder setCategoryMetaPayloadQueryBuilder, QueryBuilderParameter<SetCategoryMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("setCategoryMeta", alias, setCategoryMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSetCategoryMeta()
        {
            return ExceptField("setCategoryMeta");
        }

        public MutationQueryBuilder WithUpdateCategories(UpdateCategoriesPayloadQueryBuilder updateCategoriesPayloadQueryBuilder, QueryBuilderParameter<UpdateCategoriesInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateCategories", alias, updateCategoriesPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateCategories()
        {
            return ExceptField("updateCategories");
        }

        public MutationQueryBuilder WithUpdateCategory(UpdateCategoryPayloadQueryBuilder updateCategoryPayloadQueryBuilder, QueryBuilderParameter<UpdateCategoryInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateCategory", alias, updateCategoryPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateCategory()
        {
            return ExceptField("updateCategory");
        }

        public MutationQueryBuilder WithUpdateCategoryOrder(UpdateCategoryOrderPayloadQueryBuilder updateCategoryOrderPayloadQueryBuilder, QueryBuilderParameter<UpdateCategoryOrderInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateCategoryOrder", alias, updateCategoryOrderPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateCategoryOrder()
        {
            return ExceptField("updateCategoryOrder");
        }

        public MutationQueryBuilder WithUpdateMangaCategories(UpdateMangaCategoriesPayloadQueryBuilder updateMangaCategoriesPayloadQueryBuilder, QueryBuilderParameter<UpdateMangaCategoriesInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateMangaCategories", alias, updateMangaCategoriesPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateMangaCategories()
        {
            return ExceptField("updateMangaCategories");
        }

        public MutationQueryBuilder WithUpdateMangasCategories(UpdateMangasCategoriesPayloadQueryBuilder updateMangasCategoriesPayloadQueryBuilder, QueryBuilderParameter<UpdateMangasCategoriesInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateMangasCategories", alias, updateMangasCategoriesPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateMangasCategories()
        {
            return ExceptField("updateMangasCategories");
        }

        public MutationQueryBuilder WithDeleteChapterMeta(DeleteChapterMetaPayloadQueryBuilder deleteChapterMetaPayloadQueryBuilder, QueryBuilderParameter<DeleteChapterMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteChapterMeta", alias, deleteChapterMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteChapterMeta()
        {
            return ExceptField("deleteChapterMeta");
        }

        public MutationQueryBuilder WithFetchChapterPages(FetchChapterPagesPayloadQueryBuilder fetchChapterPagesPayloadQueryBuilder, QueryBuilderParameter<FetchChapterPagesInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("fetchChapterPages", alias, fetchChapterPagesPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptFetchChapterPages()
        {
            return ExceptField("fetchChapterPages");
        }

        public MutationQueryBuilder WithFetchChapters(FetchChaptersPayloadQueryBuilder fetchChaptersPayloadQueryBuilder, QueryBuilderParameter<FetchChaptersInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("fetchChapters", alias, fetchChaptersPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptFetchChapters()
        {
            return ExceptField("fetchChapters");
        }

        public MutationQueryBuilder WithSetChapterMeta(SetChapterMetaPayloadQueryBuilder setChapterMetaPayloadQueryBuilder, QueryBuilderParameter<SetChapterMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("setChapterMeta", alias, setChapterMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSetChapterMeta()
        {
            return ExceptField("setChapterMeta");
        }

        public MutationQueryBuilder WithUpdateChapter(UpdateChapterPayloadQueryBuilder updateChapterPayloadQueryBuilder, QueryBuilderParameter<UpdateChapterInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateChapter", alias, updateChapterPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateChapter()
        {
            return ExceptField("updateChapter");
        }

        public MutationQueryBuilder WithUpdateChapters(UpdateChaptersPayloadQueryBuilder updateChaptersPayloadQueryBuilder, QueryBuilderParameter<UpdateChaptersInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateChapters", alias, updateChaptersPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateChapters()
        {
            return ExceptField("updateChapters");
        }

        public MutationQueryBuilder WithClearDownloader(ClearDownloaderPayloadQueryBuilder clearDownloaderPayloadQueryBuilder, QueryBuilderParameter<ClearDownloaderInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("clearDownloader", alias, clearDownloaderPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptClearDownloader()
        {
            return ExceptField("clearDownloader");
        }

        public MutationQueryBuilder WithDeleteDownloadedChapter(DeleteDownloadedChapterPayloadQueryBuilder deleteDownloadedChapterPayloadQueryBuilder, QueryBuilderParameter<DeleteDownloadedChapterInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteDownloadedChapter", alias, deleteDownloadedChapterPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteDownloadedChapter()
        {
            return ExceptField("deleteDownloadedChapter");
        }

        public MutationQueryBuilder WithDeleteDownloadedChapters(DeleteDownloadedChaptersPayloadQueryBuilder deleteDownloadedChaptersPayloadQueryBuilder, QueryBuilderParameter<DeleteDownloadedChaptersInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteDownloadedChapters", alias, deleteDownloadedChaptersPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteDownloadedChapters()
        {
            return ExceptField("deleteDownloadedChapters");
        }

        public MutationQueryBuilder WithDequeueChapterDownload(DequeueChapterDownloadPayloadQueryBuilder dequeueChapterDownloadPayloadQueryBuilder, QueryBuilderParameter<DequeueChapterDownloadInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("dequeueChapterDownload", alias, dequeueChapterDownloadPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDequeueChapterDownload()
        {
            return ExceptField("dequeueChapterDownload");
        }

        public MutationQueryBuilder WithDequeueChapterDownloads(DequeueChapterDownloadsPayloadQueryBuilder dequeueChapterDownloadsPayloadQueryBuilder, QueryBuilderParameter<DequeueChapterDownloadsInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("dequeueChapterDownloads", alias, dequeueChapterDownloadsPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDequeueChapterDownloads()
        {
            return ExceptField("dequeueChapterDownloads");
        }

        public MutationQueryBuilder WithEnqueueChapterDownload(EnqueueChapterDownloadPayloadQueryBuilder enqueueChapterDownloadPayloadQueryBuilder, QueryBuilderParameter<EnqueueChapterDownloadInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("enqueueChapterDownload", alias, enqueueChapterDownloadPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptEnqueueChapterDownload()
        {
            return ExceptField("enqueueChapterDownload");
        }

        public MutationQueryBuilder WithEnqueueChapterDownloads(EnqueueChapterDownloadsPayloadQueryBuilder enqueueChapterDownloadsPayloadQueryBuilder, QueryBuilderParameter<EnqueueChapterDownloadsInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("enqueueChapterDownloads", alias, enqueueChapterDownloadsPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptEnqueueChapterDownloads()
        {
            return ExceptField("enqueueChapterDownloads");
        }

        public MutationQueryBuilder WithReorderChapterDownload(ReorderChapterDownloadPayloadQueryBuilder reorderChapterDownloadPayloadQueryBuilder, QueryBuilderParameter<ReorderChapterDownloadInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("reorderChapterDownload", alias, reorderChapterDownloadPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptReorderChapterDownload()
        {
            return ExceptField("reorderChapterDownload");
        }

        public MutationQueryBuilder WithStartDownloader(StartDownloaderPayloadQueryBuilder startDownloaderPayloadQueryBuilder, QueryBuilderParameter<StartDownloaderInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("startDownloader", alias, startDownloaderPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptStartDownloader()
        {
            return ExceptField("startDownloader");
        }

        public MutationQueryBuilder WithStopDownloader(StopDownloaderPayloadQueryBuilder stopDownloaderPayloadQueryBuilder, QueryBuilderParameter<StopDownloaderInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("stopDownloader", alias, stopDownloaderPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptStopDownloader()
        {
            return ExceptField("stopDownloader");
        }

        public MutationQueryBuilder WithFetchExtensions(FetchExtensionsPayloadQueryBuilder fetchExtensionsPayloadQueryBuilder, QueryBuilderParameter<FetchExtensionsInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("fetchExtensions", alias, fetchExtensionsPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptFetchExtensions()
        {
            return ExceptField("fetchExtensions");
        }

        public MutationQueryBuilder WithInstallExternalExtension(InstallExternalExtensionPayloadQueryBuilder installExternalExtensionPayloadQueryBuilder, QueryBuilderParameter<InstallExternalExtensionInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("installExternalExtension", alias, installExternalExtensionPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptInstallExternalExtension()
        {
            return ExceptField("installExternalExtension");
        }

        public MutationQueryBuilder WithUpdateExtension(UpdateExtensionPayloadQueryBuilder updateExtensionPayloadQueryBuilder, QueryBuilderParameter<UpdateExtensionInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateExtension", alias, updateExtensionPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateExtension()
        {
            return ExceptField("updateExtension");
        }

        public MutationQueryBuilder WithUpdateExtensions(UpdateExtensionsPayloadQueryBuilder updateExtensionsPayloadQueryBuilder, QueryBuilderParameter<UpdateExtensionsInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateExtensions", alias, updateExtensionsPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateExtensions()
        {
            return ExceptField("updateExtensions");
        }

        public MutationQueryBuilder WithClearCachedImages(ClearCachedImagesPayloadQueryBuilder clearCachedImagesPayloadQueryBuilder, QueryBuilderParameter<ClearCachedImagesInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("clearCachedImages", alias, clearCachedImagesPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptClearCachedImages()
        {
            return ExceptField("clearCachedImages");
        }

        public MutationQueryBuilder WithResetWebUiUpdateStatus(WebUiUpdateStatusQueryBuilder webUiUpdateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("resetWebUIUpdateStatus", alias, webUiUpdateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptResetWebUiUpdateStatus()
        {
            return ExceptField("resetWebUIUpdateStatus");
        }

        public MutationQueryBuilder WithUpdateWebUi(WebUiUpdatePayloadQueryBuilder webUiUpdatePayloadQueryBuilder, QueryBuilderParameter<WebUiUpdateInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateWebUI", alias, webUiUpdatePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateWebUi()
        {
            return ExceptField("updateWebUI");
        }

        public MutationQueryBuilder WithDeleteMangaMeta(DeleteMangaMetaPayloadQueryBuilder deleteMangaMetaPayloadQueryBuilder, QueryBuilderParameter<DeleteMangaMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteMangaMeta", alias, deleteMangaMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteMangaMeta()
        {
            return ExceptField("deleteMangaMeta");
        }

        public MutationQueryBuilder WithFetchManga(FetchMangaPayloadQueryBuilder fetchMangaPayloadQueryBuilder, QueryBuilderParameter<FetchMangaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("fetchManga", alias, fetchMangaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptFetchManga()
        {
            return ExceptField("fetchManga");
        }

        public MutationQueryBuilder WithSetMangaMeta(SetMangaMetaPayloadQueryBuilder setMangaMetaPayloadQueryBuilder, QueryBuilderParameter<SetMangaMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("setMangaMeta", alias, setMangaMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSetMangaMeta()
        {
            return ExceptField("setMangaMeta");
        }

        public MutationQueryBuilder WithUpdateManga(UpdateMangaPayloadQueryBuilder updateMangaPayloadQueryBuilder, QueryBuilderParameter<UpdateMangaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateManga", alias, updateMangaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateManga()
        {
            return ExceptField("updateManga");
        }

        public MutationQueryBuilder WithUpdateMangas(UpdateMangasPayloadQueryBuilder updateMangasPayloadQueryBuilder, QueryBuilderParameter<UpdateMangasInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateMangas", alias, updateMangasPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateMangas()
        {
            return ExceptField("updateMangas");
        }

        public MutationQueryBuilder WithDeleteGlobalMeta(DeleteGlobalMetaPayloadQueryBuilder deleteGlobalMetaPayloadQueryBuilder, QueryBuilderParameter<DeleteGlobalMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteGlobalMeta", alias, deleteGlobalMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteGlobalMeta()
        {
            return ExceptField("deleteGlobalMeta");
        }

        public MutationQueryBuilder WithSetGlobalMeta(SetGlobalMetaPayloadQueryBuilder setGlobalMetaPayloadQueryBuilder, QueryBuilderParameter<SetGlobalMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("setGlobalMeta", alias, setGlobalMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSetGlobalMeta()
        {
            return ExceptField("setGlobalMeta");
        }

        public MutationQueryBuilder WithResetSettings(ResetSettingsPayloadQueryBuilder resetSettingsPayloadQueryBuilder, QueryBuilderParameter<ResetSettingsInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("resetSettings", alias, resetSettingsPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptResetSettings()
        {
            return ExceptField("resetSettings");
        }

        public MutationQueryBuilder WithSetSettings(SetSettingsPayloadQueryBuilder setSettingsPayloadQueryBuilder, QueryBuilderParameter<SetSettingsInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("setSettings", alias, setSettingsPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSetSettings()
        {
            return ExceptField("setSettings");
        }

        public MutationQueryBuilder WithDeleteSourceMeta(DeleteSourceMetaPayloadQueryBuilder deleteSourceMetaPayloadQueryBuilder, QueryBuilderParameter<DeleteSourceMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("deleteSourceMeta", alias, deleteSourceMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteSourceMeta()
        {
            return ExceptField("deleteSourceMeta");
        }

        public MutationQueryBuilder WithFetchSourceManga(FetchSourceMangaPayloadQueryBuilder fetchSourceMangaPayloadQueryBuilder, QueryBuilderParameter<FetchSourceMangaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("fetchSourceManga", alias, fetchSourceMangaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptFetchSourceManga()
        {
            return ExceptField("fetchSourceManga");
        }

        public MutationQueryBuilder WithSetSourceMeta(SetSourceMetaPayloadQueryBuilder setSourceMetaPayloadQueryBuilder, QueryBuilderParameter<SetSourceMetaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("setSourceMeta", alias, setSourceMetaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptSetSourceMeta()
        {
            return ExceptField("setSourceMeta");
        }

        public MutationQueryBuilder WithUpdateSourcePreference(UpdateSourcePreferencePayloadQueryBuilder updateSourcePreferencePayloadQueryBuilder, QueryBuilderParameter<UpdateSourcePreferenceInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateSourcePreference", alias, updateSourcePreferencePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateSourcePreference()
        {
            return ExceptField("updateSourcePreference");
        }

        public MutationQueryBuilder WithBindTrack(BindTrackPayloadQueryBuilder bindTrackPayloadQueryBuilder, QueryBuilderParameter<BindTrackInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("bindTrack", alias, bindTrackPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptBindTrack()
        {
            return ExceptField("bindTrack");
        }

        public MutationQueryBuilder WithLoginTrackerCredentials(LoginTrackerCredentialsPayloadQueryBuilder loginTrackerCredentialsPayloadQueryBuilder, QueryBuilderParameter<LoginTrackerCredentialsInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("loginTrackerCredentials", alias, loginTrackerCredentialsPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptLoginTrackerCredentials()
        {
            return ExceptField("loginTrackerCredentials");
        }

        public MutationQueryBuilder WithLoginTrackerOAuth(LoginTrackerOAuthPayloadQueryBuilder loginTrackerOAuthPayloadQueryBuilder, QueryBuilderParameter<LoginTrackerOAuthInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("loginTrackerOAuth", alias, loginTrackerOAuthPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptLoginTrackerOAuth()
        {
            return ExceptField("loginTrackerOAuth");
        }

        public MutationQueryBuilder WithLogoutTracker(LogoutTrackerPayloadQueryBuilder logoutTrackerPayloadQueryBuilder, QueryBuilderParameter<LogoutTrackerInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("logoutTracker", alias, logoutTrackerPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptLogoutTracker()
        {
            return ExceptField("logoutTracker");
        }

        public MutationQueryBuilder WithUpdateTrack(UpdateTrackPayloadQueryBuilder updateTrackPayloadQueryBuilder, QueryBuilderParameter<UpdateTrackInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateTrack", alias, updateTrackPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateTrack()
        {
            return ExceptField("updateTrack");
        }

        public MutationQueryBuilder WithUpdateCategoryManga(UpdateCategoryMangaPayloadQueryBuilder updateCategoryMangaPayloadQueryBuilder, QueryBuilderParameter<UpdateCategoryMangaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateCategoryManga", alias, updateCategoryMangaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateCategoryManga()
        {
            return ExceptField("updateCategoryManga");
        }

        public MutationQueryBuilder WithUpdateLibraryManga(UpdateLibraryMangaPayloadQueryBuilder updateLibraryMangaPayloadQueryBuilder, QueryBuilderParameter<UpdateLibraryMangaInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateLibraryManga", alias, updateLibraryMangaPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateLibraryManga()
        {
            return ExceptField("updateLibraryManga");
        }

        public MutationQueryBuilder WithUpdateStop(UpdateStopPayloadQueryBuilder updateStopPayloadQueryBuilder, QueryBuilderParameter<UpdateStopInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateStop", alias, updateStopPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateStop()
        {
            return ExceptField("updateStop");
        }
    }

    public class NodeQueryBuilder : GraphQlQueryBuilder<NodeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public NodeQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Node"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NodeQueryBuilder WithCategoryMetaTypeFragment(CategoryMetaTypeQueryBuilder categoryMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(categoryMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithCategoryTypeFragment(CategoryTypeQueryBuilder categoryTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithChapterMetaTypeFragment(ChapterMetaTypeQueryBuilder chapterMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(chapterMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithChapterTypeFragment(ChapterTypeQueryBuilder chapterTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithDownloadTypeFragment(DownloadTypeQueryBuilder downloadTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(downloadTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithExtensionTypeFragment(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithGlobalMetaTypeFragment(GlobalMetaTypeQueryBuilder globalMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(globalMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithMangaMetaTypeFragment(MangaMetaTypeQueryBuilder mangaMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mangaMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithMangaTypeFragment(MangaTypeQueryBuilder mangaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithPartialSettingsTypeFragment(PartialSettingsTypeQueryBuilder partialSettingsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(partialSettingsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithSettingsTypeFragment(SettingsTypeQueryBuilder settingsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(settingsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithSourceMetaTypeFragment(SourceMetaTypeQueryBuilder sourceMetaTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sourceMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithSourceTypeFragment(SourceTypeQueryBuilder sourceTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithTrackRecordTypeFragment(TrackRecordTypeQueryBuilder trackRecordTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(trackRecordTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeQueryBuilder WithTrackerTypeFragment(TrackerTypeQueryBuilder trackerTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class NodeListQueryBuilder : GraphQlQueryBuilder<NodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(EdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(NodeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        public NodeListQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "NodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NodeListQueryBuilder WithEdges(EdgeQueryBuilder edgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, edgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public NodeListQueryBuilder WithNodes(NodeQueryBuilder nodeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, nodeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public NodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public NodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }

        public NodeListQueryBuilder WithCategoryNodeListFragment(CategoryNodeListQueryBuilder categoryNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(categoryNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithChapterNodeListFragment(ChapterNodeListQueryBuilder chapterNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(chapterNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithDownloadNodeListFragment(DownloadNodeListQueryBuilder downloadNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(downloadNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithExtensionNodeListFragment(ExtensionNodeListQueryBuilder extensionNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(extensionNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithGlobalMetaNodeListFragment(GlobalMetaNodeListQueryBuilder globalMetaNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(globalMetaNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithMangaNodeListFragment(MangaNodeListQueryBuilder mangaNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mangaNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithSourceNodeListFragment(SourceNodeListQueryBuilder sourceNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(sourceNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithTrackRecordNodeListFragment(TrackRecordNodeListQueryBuilder trackRecordNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(trackRecordNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NodeListQueryBuilder WithTrackerNodeListFragment(TrackerNodeListQueryBuilder trackerNodeListQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(trackerNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class PageInfoQueryBuilder : GraphQlQueryBuilder<PageInfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "endCursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hasNextPage" },
                new GraphQlFieldMetadata { Name = "hasPreviousPage" },
                new GraphQlFieldMetadata { Name = "startCursor", IsComplex = true }
            };

        protected override string TypeName { get { return "PageInfo"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageInfoQueryBuilder WithEndCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("endCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptEndCursor()
        {
            return ExceptField("endCursor");
        }

        public PageInfoQueryBuilder WithHasNextPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasNextPage()
        {
            return ExceptField("hasNextPage");
        }

        public PageInfoQueryBuilder WithHasPreviousPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptHasPreviousPage()
        {
            return ExceptField("hasPreviousPage");
        }

        public PageInfoQueryBuilder WithStartCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startCursor", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptStartCursor()
        {
            return ExceptField("startCursor");
        }
    }

    public class PartialSettingsTypeQueryBuilder : GraphQlQueryBuilder<PartialSettingsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "autoDownloadNewChapters" },
                new GraphQlFieldMetadata { Name = "autoDownloadNewChaptersLimit" },
                new GraphQlFieldMetadata { Name = "backupInterval" },
                new GraphQlFieldMetadata { Name = "backupPath" },
                new GraphQlFieldMetadata { Name = "backupTTL" },
                new GraphQlFieldMetadata { Name = "backupTime" },
                new GraphQlFieldMetadata { Name = "basicAuthEnabled" },
                new GraphQlFieldMetadata { Name = "basicAuthPassword" },
                new GraphQlFieldMetadata { Name = "basicAuthUsername" },
                new GraphQlFieldMetadata { Name = "debugLogsEnabled" },
                new GraphQlFieldMetadata { Name = "downloadAsCbz" },
                new GraphQlFieldMetadata { Name = "downloadsPath" },
                new GraphQlFieldMetadata { Name = "electronPath" },
                new GraphQlFieldMetadata { Name = "excludeCompleted" },
                new GraphQlFieldMetadata { Name = "excludeEntryWithUnreadChapters" },
                new GraphQlFieldMetadata { Name = "excludeNotStarted" },
                new GraphQlFieldMetadata { Name = "excludeUnreadChapters" },
                new GraphQlFieldMetadata { Name = "extensionRepos", IsComplex = true },
                new GraphQlFieldMetadata { Name = "flareSolverrEnabled" },
                new GraphQlFieldMetadata { Name = "flareSolverrSessionName" },
                new GraphQlFieldMetadata { Name = "flareSolverrSessionTtl" },
                new GraphQlFieldMetadata { Name = "flareSolverrTimeout" },
                new GraphQlFieldMetadata { Name = "flareSolverrUrl" },
                new GraphQlFieldMetadata { Name = "globalUpdateInterval" },
                new GraphQlFieldMetadata { Name = "gqlDebugLogsEnabled" },
                new GraphQlFieldMetadata { Name = "initialOpenInBrowserEnabled" },
                new GraphQlFieldMetadata { Name = "ip" },
                new GraphQlFieldMetadata { Name = "localSourcePath" },
                new GraphQlFieldMetadata { Name = "maxSourcesInParallel" },
                new GraphQlFieldMetadata { Name = "port" },
                new GraphQlFieldMetadata { Name = "socksProxyEnabled" },
                new GraphQlFieldMetadata { Name = "socksProxyHost" },
                new GraphQlFieldMetadata { Name = "socksProxyPassword" },
                new GraphQlFieldMetadata { Name = "socksProxyPort" },
                new GraphQlFieldMetadata { Name = "socksProxyUsername" },
                new GraphQlFieldMetadata { Name = "socksProxyVersion" },
                new GraphQlFieldMetadata { Name = "systemTrayEnabled" },
                new GraphQlFieldMetadata { Name = "updateMangas" },
                new GraphQlFieldMetadata { Name = "webUIChannel" },
                new GraphQlFieldMetadata { Name = "webUIFlavor" },
                new GraphQlFieldMetadata { Name = "webUIInterface" },
                new GraphQlFieldMetadata { Name = "webUIUpdateCheckInterval" }
            };

        protected override string TypeName { get { return "PartialSettingsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PartialSettingsTypeQueryBuilder WithAutoDownloadNewChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoDownloadNewChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptAutoDownloadNewChapters()
        {
            return ExceptField("autoDownloadNewChapters");
        }

        public PartialSettingsTypeQueryBuilder WithAutoDownloadNewChaptersLimit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoDownloadNewChaptersLimit", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptAutoDownloadNewChaptersLimit()
        {
            return ExceptField("autoDownloadNewChaptersLimit");
        }

        public PartialSettingsTypeQueryBuilder WithBackupInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptBackupInterval()
        {
            return ExceptField("backupInterval");
        }

        public PartialSettingsTypeQueryBuilder WithBackupPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupPath", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptBackupPath()
        {
            return ExceptField("backupPath");
        }

        public PartialSettingsTypeQueryBuilder WithBackupTtl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupTTL", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptBackupTtl()
        {
            return ExceptField("backupTTL");
        }

        public PartialSettingsTypeQueryBuilder WithBackupTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupTime", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptBackupTime()
        {
            return ExceptField("backupTime");
        }

        public PartialSettingsTypeQueryBuilder WithBasicAuthEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptBasicAuthEnabled()
        {
            return ExceptField("basicAuthEnabled");
        }

        public PartialSettingsTypeQueryBuilder WithBasicAuthPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthPassword", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptBasicAuthPassword()
        {
            return ExceptField("basicAuthPassword");
        }

        public PartialSettingsTypeQueryBuilder WithBasicAuthUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthUsername", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptBasicAuthUsername()
        {
            return ExceptField("basicAuthUsername");
        }

        public PartialSettingsTypeQueryBuilder WithDebugLogsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("debugLogsEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptDebugLogsEnabled()
        {
            return ExceptField("debugLogsEnabled");
        }

        public PartialSettingsTypeQueryBuilder WithDownloadAsCbz(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadAsCbz", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptDownloadAsCbz()
        {
            return ExceptField("downloadAsCbz");
        }

        public PartialSettingsTypeQueryBuilder WithDownloadsPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadsPath", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptDownloadsPath()
        {
            return ExceptField("downloadsPath");
        }

        public PartialSettingsTypeQueryBuilder WithElectronPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("electronPath", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptElectronPath()
        {
            return ExceptField("electronPath");
        }

        public PartialSettingsTypeQueryBuilder WithExcludeCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptExcludeCompleted()
        {
            return ExceptField("excludeCompleted");
        }

        public PartialSettingsTypeQueryBuilder WithExcludeEntryWithUnreadChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeEntryWithUnreadChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptExcludeEntryWithUnreadChapters()
        {
            return ExceptField("excludeEntryWithUnreadChapters");
        }

        public PartialSettingsTypeQueryBuilder WithExcludeNotStarted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeNotStarted", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptExcludeNotStarted()
        {
            return ExceptField("excludeNotStarted");
        }

        public PartialSettingsTypeQueryBuilder WithExcludeUnreadChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeUnreadChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptExcludeUnreadChapters()
        {
            return ExceptField("excludeUnreadChapters");
        }

        public PartialSettingsTypeQueryBuilder WithExtensionRepos(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("extensionRepos", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptExtensionRepos()
        {
            return ExceptField("extensionRepos");
        }

        public PartialSettingsTypeQueryBuilder WithFlareSolverrEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptFlareSolverrEnabled()
        {
            return ExceptField("flareSolverrEnabled");
        }

        public PartialSettingsTypeQueryBuilder WithFlareSolverrSessionName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrSessionName", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptFlareSolverrSessionName()
        {
            return ExceptField("flareSolverrSessionName");
        }

        public PartialSettingsTypeQueryBuilder WithFlareSolverrSessionTtl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrSessionTtl", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptFlareSolverrSessionTtl()
        {
            return ExceptField("flareSolverrSessionTtl");
        }

        public PartialSettingsTypeQueryBuilder WithFlareSolverrTimeout(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrTimeout", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptFlareSolverrTimeout()
        {
            return ExceptField("flareSolverrTimeout");
        }

        public PartialSettingsTypeQueryBuilder WithFlareSolverrUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptFlareSolverrUrl()
        {
            return ExceptField("flareSolverrUrl");
        }

        public PartialSettingsTypeQueryBuilder WithGlobalUpdateInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("globalUpdateInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptGlobalUpdateInterval()
        {
            return ExceptField("globalUpdateInterval");
        }

        public PartialSettingsTypeQueryBuilder WithGqlDebugLogsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gqlDebugLogsEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptGqlDebugLogsEnabled()
        {
            return ExceptField("gqlDebugLogsEnabled");
        }

        public PartialSettingsTypeQueryBuilder WithInitialOpenInBrowserEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("initialOpenInBrowserEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptInitialOpenInBrowserEnabled()
        {
            return ExceptField("initialOpenInBrowserEnabled");
        }

        public PartialSettingsTypeQueryBuilder WithIp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ip", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptIp()
        {
            return ExceptField("ip");
        }

        public PartialSettingsTypeQueryBuilder WithLocalSourcePath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("localSourcePath", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptLocalSourcePath()
        {
            return ExceptField("localSourcePath");
        }

        public PartialSettingsTypeQueryBuilder WithMaxSourcesInParallel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxSourcesInParallel", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptMaxSourcesInParallel()
        {
            return ExceptField("maxSourcesInParallel");
        }

        public PartialSettingsTypeQueryBuilder WithPort(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("port", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptPort()
        {
            return ExceptField("port");
        }

        public PartialSettingsTypeQueryBuilder WithSocksProxyEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptSocksProxyEnabled()
        {
            return ExceptField("socksProxyEnabled");
        }

        public PartialSettingsTypeQueryBuilder WithSocksProxyHost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyHost", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptSocksProxyHost()
        {
            return ExceptField("socksProxyHost");
        }

        public PartialSettingsTypeQueryBuilder WithSocksProxyPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyPassword", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptSocksProxyPassword()
        {
            return ExceptField("socksProxyPassword");
        }

        public PartialSettingsTypeQueryBuilder WithSocksProxyPort(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyPort", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptSocksProxyPort()
        {
            return ExceptField("socksProxyPort");
        }

        public PartialSettingsTypeQueryBuilder WithSocksProxyUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyUsername", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptSocksProxyUsername()
        {
            return ExceptField("socksProxyUsername");
        }

        public PartialSettingsTypeQueryBuilder WithSocksProxyVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptSocksProxyVersion()
        {
            return ExceptField("socksProxyVersion");
        }

        public PartialSettingsTypeQueryBuilder WithSystemTrayEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemTrayEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptSystemTrayEnabled()
        {
            return ExceptField("systemTrayEnabled");
        }

        public PartialSettingsTypeQueryBuilder WithUpdateMangas(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updateMangas", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptUpdateMangas()
        {
            return ExceptField("updateMangas");
        }

        public PartialSettingsTypeQueryBuilder WithWebUiChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIChannel", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptWebUiChannel()
        {
            return ExceptField("webUIChannel");
        }

        public PartialSettingsTypeQueryBuilder WithWebUiFlavor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIFlavor", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptWebUiFlavor()
        {
            return ExceptField("webUIFlavor");
        }

        public PartialSettingsTypeQueryBuilder WithWebUiInterface(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIInterface", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptWebUiInterface()
        {
            return ExceptField("webUIInterface");
        }

        public PartialSettingsTypeQueryBuilder WithWebUiUpdateCheckInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIUpdateCheckInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public PartialSettingsTypeQueryBuilder ExceptWebUiUpdateCheckInterval()
        {
            return ExceptField("webUIUpdateCheckInterval");
        }
    }

    public class PreferenceQueryBuilder : GraphQlQueryBuilder<PreferenceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public PreferenceQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Preference"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PreferenceQueryBuilder WithCheckBoxPreferenceFragment(CheckBoxPreferenceQueryBuilder checkBoxPreferenceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(checkBoxPreferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PreferenceQueryBuilder WithEditTextPreferenceFragment(EditTextPreferenceQueryBuilder editTextPreferenceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(editTextPreferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PreferenceQueryBuilder WithListPreferenceFragment(ListPreferenceQueryBuilder listPreferenceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(listPreferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PreferenceQueryBuilder WithMultiSelectListPreferenceFragment(MultiSelectListPreferenceQueryBuilder multiSelectListPreferenceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(multiSelectListPreferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PreferenceQueryBuilder WithSwitchPreferenceFragment(SwitchPreferenceQueryBuilder switchPreferenceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(switchPreferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "restoreStatus", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BackupRestoreStatusQueryBuilder) },
                new GraphQlFieldMetadata { Name = "validateBackup", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ValidateBackupResultQueryBuilder) },
                new GraphQlFieldMetadata { Name = "categories", IsComplex = true, QueryBuilderType = typeof(CategoryNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "category", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chapter", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chapters", IsComplex = true, QueryBuilderType = typeof(ChapterNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) },
                new GraphQlFieldMetadata { Name = "extension", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "extensions", IsComplex = true, QueryBuilderType = typeof(ExtensionNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "aboutServer", IsComplex = true, QueryBuilderType = typeof(AboutServerPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "aboutWebUI", IsComplex = true, QueryBuilderType = typeof(AboutWebUiQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkForServerUpdates", IsComplex = true, QueryBuilderType = typeof(CheckForServerUpdatesPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "checkForWebUIUpdate", IsComplex = true, QueryBuilderType = typeof(WebUiUpdateCheckQueryBuilder) },
                new GraphQlFieldMetadata { Name = "getWebUIUpdateStatus", IsComplex = true, QueryBuilderType = typeof(WebUiUpdateStatusQueryBuilder) },
                new GraphQlFieldMetadata { Name = "manga", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mangas", IsComplex = true, QueryBuilderType = typeof(MangaNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "meta", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GlobalMetaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "metas", IsComplex = true, QueryBuilderType = typeof(GlobalMetaNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(SettingsTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "source", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sources", IsComplex = true, QueryBuilderType = typeof(SourceNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "searchTracker", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SearchTrackerPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "trackRecord", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TrackRecordTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "trackRecords", IsComplex = true, QueryBuilderType = typeof(TrackRecordNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tracker", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "trackers", IsComplex = true, QueryBuilderType = typeof(TrackerNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lastUpdateTimestamp", IsComplex = true, QueryBuilderType = typeof(LastUpdateTimestampPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateStatus", IsComplex = true, QueryBuilderType = typeof(UpdateStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithRestoreStatus(BackupRestoreStatusQueryBuilder backupRestoreStatusQueryBuilder, QueryBuilderParameter<string> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("restoreStatus", alias, backupRestoreStatusQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptRestoreStatus()
        {
            return ExceptField("restoreStatus");
        }

        public QueryQueryBuilder WithValidateBackup(ValidateBackupResultQueryBuilder validateBackupResultQueryBuilder, QueryBuilderParameter<ValidateBackupInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("validateBackup", alias, validateBackupResultQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptValidateBackup()
        {
            return ExceptField("validateBackup");
        }

        public QueryQueryBuilder WithCategories(CategoryNodeListQueryBuilder categoryNodeListQueryBuilder, QueryBuilderParameter<CategoryConditionInput> condition = null, QueryBuilderParameter<CategoryFilterInput> filter = null, QueryBuilderParameter<CategoryOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("categories", alias, categoryNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCategories()
        {
            return ExceptField("categories");
        }

        public QueryQueryBuilder WithCategory(CategoryTypeQueryBuilder categoryTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("category", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCategory()
        {
            return ExceptField("category");
        }

        public QueryQueryBuilder WithChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("chapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChapter()
        {
            return ExceptField("chapter");
        }

        public QueryQueryBuilder WithChapters(ChapterNodeListQueryBuilder chapterNodeListQueryBuilder, QueryBuilderParameter<ChapterConditionInput> condition = null, QueryBuilderParameter<ChapterFilterInput> filter = null, QueryBuilderParameter<ChapterOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("chapters", alias, chapterNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChapters()
        {
            return ExceptField("chapters");
        }

        public QueryQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }

        public QueryQueryBuilder WithExtension(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, QueryBuilderParameter<string> pkgName, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pkgName", ArgumentValue = pkgName} );
            return WithObjectField("extension", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptExtension()
        {
            return ExceptField("extension");
        }

        public QueryQueryBuilder WithExtensions(ExtensionNodeListQueryBuilder extensionNodeListQueryBuilder, QueryBuilderParameter<ExtensionConditionInput> condition = null, QueryBuilderParameter<ExtensionFilterInput> filter = null, QueryBuilderParameter<ExtensionOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("extensions", alias, extensionNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptExtensions()
        {
            return ExceptField("extensions");
        }

        public QueryQueryBuilder WithAboutServer(AboutServerPayloadQueryBuilder aboutServerPayloadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("aboutServer", alias, aboutServerPayloadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptAboutServer()
        {
            return ExceptField("aboutServer");
        }

        public QueryQueryBuilder WithAboutWebUi(AboutWebUiQueryBuilder aboutWebUiQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("aboutWebUI", alias, aboutWebUiQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptAboutWebUi()
        {
            return ExceptField("aboutWebUI");
        }

        public QueryQueryBuilder WithCheckForServerUpdates(CheckForServerUpdatesPayloadQueryBuilder checkForServerUpdatesPayloadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkForServerUpdates", alias, checkForServerUpdatesPayloadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptCheckForServerUpdates()
        {
            return ExceptField("checkForServerUpdates");
        }

        public QueryQueryBuilder WithCheckForWebUiUpdate(WebUiUpdateCheckQueryBuilder webUiUpdateCheckQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("checkForWebUIUpdate", alias, webUiUpdateCheckQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptCheckForWebUiUpdate()
        {
            return ExceptField("checkForWebUIUpdate");
        }

        public QueryQueryBuilder WithGetWebUiUpdateStatus(WebUiUpdateStatusQueryBuilder webUiUpdateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("getWebUIUpdateStatus", alias, webUiUpdateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptGetWebUiUpdateStatus()
        {
            return ExceptField("getWebUIUpdateStatus");
        }

        public QueryQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }

        public QueryQueryBuilder WithMangas(MangaNodeListQueryBuilder mangaNodeListQueryBuilder, QueryBuilderParameter<MangaConditionInput> condition = null, QueryBuilderParameter<MangaFilterInput> filter = null, QueryBuilderParameter<MangaOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("mangas", alias, mangaNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMangas()
        {
            return ExceptField("mangas");
        }

        public QueryQueryBuilder WithMeta(GlobalMetaTypeQueryBuilder globalMetaTypeQueryBuilder, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("meta", alias, globalMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }

        public QueryQueryBuilder WithMetas(GlobalMetaNodeListQueryBuilder globalMetaNodeListQueryBuilder, QueryBuilderParameter<MetaConditionInput> condition = null, QueryBuilderParameter<MetaFilterInput> filter = null, QueryBuilderParameter<MetaOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("metas", alias, globalMetaNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMetas()
        {
            return ExceptField("metas");
        }

        public QueryQueryBuilder WithSettings(SettingsTypeQueryBuilder settingsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("settings", alias, settingsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptSettings()
        {
            return ExceptField("settings");
        }

        public QueryQueryBuilder WithSource(SourceTypeQueryBuilder sourceTypeQueryBuilder, QueryBuilderParameter<object> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("source", alias, sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }

        public QueryQueryBuilder WithSources(SourceNodeListQueryBuilder sourceNodeListQueryBuilder, QueryBuilderParameter<SourceConditionInput> condition = null, QueryBuilderParameter<SourceFilterInput> filter = null, QueryBuilderParameter<SourceOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("sources", alias, sourceNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSources()
        {
            return ExceptField("sources");
        }

        public QueryQueryBuilder WithSearchTracker(SearchTrackerPayloadQueryBuilder searchTrackerPayloadQueryBuilder, QueryBuilderParameter<SearchTrackerInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("searchTracker", alias, searchTrackerPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSearchTracker()
        {
            return ExceptField("searchTracker");
        }

        public QueryQueryBuilder WithTrackRecord(TrackRecordTypeQueryBuilder trackRecordTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("trackRecord", alias, trackRecordTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTrackRecord()
        {
            return ExceptField("trackRecord");
        }

        public QueryQueryBuilder WithTrackRecords(TrackRecordNodeListQueryBuilder trackRecordNodeListQueryBuilder, QueryBuilderParameter<TrackRecordConditionInput> condition = null, QueryBuilderParameter<TrackRecordFilterInput> filter = null, QueryBuilderParameter<TrackRecordOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (filter != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filter", ArgumentValue = filter} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("trackRecords", alias, trackRecordNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTrackRecords()
        {
            return ExceptField("trackRecords");
        }

        public QueryQueryBuilder WithTracker(TrackerTypeQueryBuilder trackerTypeQueryBuilder, QueryBuilderParameter<int> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("tracker", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTracker()
        {
            return ExceptField("tracker");
        }

        public QueryQueryBuilder WithTrackers(TrackerNodeListQueryBuilder trackerNodeListQueryBuilder, QueryBuilderParameter<TrackerConditionInput> condition = null, QueryBuilderParameter<TrackerOrderBy> orderBy = null, QueryBuilderParameter<SortOrder> orderByType = null, QueryBuilderParameter<object> before = null, QueryBuilderParameter<object> after = null, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<int?> offset = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (condition != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "condition", ArgumentValue = condition} );

            if (orderBy != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderBy", ArgumentValue = orderBy} );

            if (orderByType != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "orderByType", ArgumentValue = orderByType} );

            if (before != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after} );

            if (first != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

            if (offset != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "offset", ArgumentValue = offset} );

            return WithObjectField("trackers", alias, trackerNodeListQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTrackers()
        {
            return ExceptField("trackers");
        }

        public QueryQueryBuilder WithLastUpdateTimestamp(LastUpdateTimestampPayloadQueryBuilder lastUpdateTimestampPayloadQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lastUpdateTimestamp", alias, lastUpdateTimestampPayloadQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptLastUpdateTimestamp()
        {
            return ExceptField("lastUpdateTimestamp");
        }

        public QueryQueryBuilder WithUpdateStatus(UpdateStatusQueryBuilder updateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("updateStatus", alias, updateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptUpdateStatus()
        {
            return ExceptField("updateStatus");
        }
    }

    public class ReorderChapterDownloadPayloadQueryBuilder : GraphQlQueryBuilder<ReorderChapterDownloadPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "ReorderChapterDownloadPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReorderChapterDownloadPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public ReorderChapterDownloadPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public ReorderChapterDownloadPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReorderChapterDownloadPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class ResetSettingsPayloadQueryBuilder : GraphQlQueryBuilder<ResetSettingsPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(SettingsTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ResetSettingsPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ResetSettingsPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public ResetSettingsPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public ResetSettingsPayloadQueryBuilder WithSettings(SettingsTypeQueryBuilder settingsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("settings", alias, settingsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ResetSettingsPayloadQueryBuilder ExceptSettings()
        {
            return ExceptField("settings");
        }
    }

    public class RestoreBackupPayloadQueryBuilder : GraphQlQueryBuilder<RestoreBackupPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "status", IsComplex = true, QueryBuilderType = typeof(BackupRestoreStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "RestoreBackupPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RestoreBackupPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public RestoreBackupPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public RestoreBackupPayloadQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public RestoreBackupPayloadQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public RestoreBackupPayloadQueryBuilder WithStatus(BackupRestoreStatusQueryBuilder backupRestoreStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("status", alias, backupRestoreStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public RestoreBackupPayloadQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }
    }

    public class SearchTrackerPayloadQueryBuilder : GraphQlQueryBuilder<SearchTrackerPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "trackSearches", IsComplex = true, QueryBuilderType = typeof(TrackSearchTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SearchTrackerPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SearchTrackerPayloadQueryBuilder WithTrackSearches(TrackSearchTypeQueryBuilder trackSearchTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("trackSearches", alias, trackSearchTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SearchTrackerPayloadQueryBuilder ExceptTrackSearches()
        {
            return ExceptField("trackSearches");
        }
    }

    public class SelectFilterQueryBuilder : GraphQlQueryBuilder<SelectFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "values", IsComplex = true }
            };

        protected override string TypeName { get { return "SelectFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SelectFilterQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public SelectFilterQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public SelectFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SelectFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SelectFilterQueryBuilder WithValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("values", alias, new GraphQlDirective[] { include, skip });
        }

        public SelectFilterQueryBuilder ExceptValues()
        {
            return ExceptField("values");
        }
    }

    public class SeparatorFilterQueryBuilder : GraphQlQueryBuilder<SeparatorFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "SeparatorFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SeparatorFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SeparatorFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class SetCategoryMetaPayloadQueryBuilder : GraphQlQueryBuilder<SetCategoryMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(CategoryMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SetCategoryMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SetCategoryMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public SetCategoryMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public SetCategoryMetaPayloadQueryBuilder WithMeta(CategoryMetaTypeQueryBuilder categoryMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, categoryMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SetCategoryMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class SetChapterMetaPayloadQueryBuilder : GraphQlQueryBuilder<SetChapterMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(ChapterMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SetChapterMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SetChapterMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public SetChapterMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public SetChapterMetaPayloadQueryBuilder WithMeta(ChapterMetaTypeQueryBuilder chapterMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, chapterMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SetChapterMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class SetGlobalMetaPayloadQueryBuilder : GraphQlQueryBuilder<SetGlobalMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(GlobalMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SetGlobalMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SetGlobalMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public SetGlobalMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public SetGlobalMetaPayloadQueryBuilder WithMeta(GlobalMetaTypeQueryBuilder globalMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, globalMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SetGlobalMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class SetMangaMetaPayloadQueryBuilder : GraphQlQueryBuilder<SetMangaMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(MangaMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SetMangaMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SetMangaMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public SetMangaMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public SetMangaMetaPayloadQueryBuilder WithMeta(MangaMetaTypeQueryBuilder mangaMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, mangaMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SetMangaMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class SetSettingsPayloadQueryBuilder : GraphQlQueryBuilder<SetSettingsPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(SettingsTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SetSettingsPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SetSettingsPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public SetSettingsPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public SetSettingsPayloadQueryBuilder WithSettings(SettingsTypeQueryBuilder settingsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("settings", alias, settingsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SetSettingsPayloadQueryBuilder ExceptSettings()
        {
            return ExceptField("settings");
        }
    }

    public class SetSourceMetaPayloadQueryBuilder : GraphQlQueryBuilder<SetSourceMetaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(SourceMetaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SetSourceMetaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SetSourceMetaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public SetSourceMetaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public SetSourceMetaPayloadQueryBuilder WithMeta(SourceMetaTypeQueryBuilder sourceMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, sourceMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SetSourceMetaPayloadQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }
    }

    public class SettingsQueryBuilder : GraphQlQueryBuilder<SettingsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "autoDownloadNewChapters" },
                new GraphQlFieldMetadata { Name = "autoDownloadNewChaptersLimit" },
                new GraphQlFieldMetadata { Name = "backupInterval" },
                new GraphQlFieldMetadata { Name = "backupPath" },
                new GraphQlFieldMetadata { Name = "backupTTL" },
                new GraphQlFieldMetadata { Name = "backupTime" },
                new GraphQlFieldMetadata { Name = "basicAuthEnabled" },
                new GraphQlFieldMetadata { Name = "basicAuthPassword" },
                new GraphQlFieldMetadata { Name = "basicAuthUsername" },
                new GraphQlFieldMetadata { Name = "debugLogsEnabled" },
                new GraphQlFieldMetadata { Name = "downloadAsCbz" },
                new GraphQlFieldMetadata { Name = "downloadsPath" },
                new GraphQlFieldMetadata { Name = "electronPath" },
                new GraphQlFieldMetadata { Name = "excludeCompleted" },
                new GraphQlFieldMetadata { Name = "excludeEntryWithUnreadChapters" },
                new GraphQlFieldMetadata { Name = "excludeNotStarted" },
                new GraphQlFieldMetadata { Name = "excludeUnreadChapters" },
                new GraphQlFieldMetadata { Name = "extensionRepos", IsComplex = true },
                new GraphQlFieldMetadata { Name = "flareSolverrEnabled" },
                new GraphQlFieldMetadata { Name = "flareSolverrSessionName" },
                new GraphQlFieldMetadata { Name = "flareSolverrSessionTtl" },
                new GraphQlFieldMetadata { Name = "flareSolverrTimeout" },
                new GraphQlFieldMetadata { Name = "flareSolverrUrl" },
                new GraphQlFieldMetadata { Name = "globalUpdateInterval" },
                new GraphQlFieldMetadata { Name = "gqlDebugLogsEnabled" },
                new GraphQlFieldMetadata { Name = "initialOpenInBrowserEnabled" },
                new GraphQlFieldMetadata { Name = "ip" },
                new GraphQlFieldMetadata { Name = "localSourcePath" },
                new GraphQlFieldMetadata { Name = "maxSourcesInParallel" },
                new GraphQlFieldMetadata { Name = "port" },
                new GraphQlFieldMetadata { Name = "socksProxyEnabled" },
                new GraphQlFieldMetadata { Name = "socksProxyHost" },
                new GraphQlFieldMetadata { Name = "socksProxyPassword" },
                new GraphQlFieldMetadata { Name = "socksProxyPort" },
                new GraphQlFieldMetadata { Name = "socksProxyUsername" },
                new GraphQlFieldMetadata { Name = "socksProxyVersion" },
                new GraphQlFieldMetadata { Name = "systemTrayEnabled" },
                new GraphQlFieldMetadata { Name = "updateMangas" },
                new GraphQlFieldMetadata { Name = "webUIChannel" },
                new GraphQlFieldMetadata { Name = "webUIFlavor" },
                new GraphQlFieldMetadata { Name = "webUIInterface" },
                new GraphQlFieldMetadata { Name = "webUIUpdateCheckInterval" }
            };

        public SettingsQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "Settings"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SettingsQueryBuilder WithAutoDownloadNewChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoDownloadNewChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptAutoDownloadNewChapters()
        {
            return ExceptField("autoDownloadNewChapters");
        }

        public SettingsQueryBuilder WithAutoDownloadNewChaptersLimit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoDownloadNewChaptersLimit", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptAutoDownloadNewChaptersLimit()
        {
            return ExceptField("autoDownloadNewChaptersLimit");
        }

        public SettingsQueryBuilder WithBackupInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptBackupInterval()
        {
            return ExceptField("backupInterval");
        }

        public SettingsQueryBuilder WithBackupPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupPath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptBackupPath()
        {
            return ExceptField("backupPath");
        }

        public SettingsQueryBuilder WithBackupTtl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupTTL", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptBackupTtl()
        {
            return ExceptField("backupTTL");
        }

        public SettingsQueryBuilder WithBackupTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptBackupTime()
        {
            return ExceptField("backupTime");
        }

        public SettingsQueryBuilder WithBasicAuthEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptBasicAuthEnabled()
        {
            return ExceptField("basicAuthEnabled");
        }

        public SettingsQueryBuilder WithBasicAuthPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthPassword", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptBasicAuthPassword()
        {
            return ExceptField("basicAuthPassword");
        }

        public SettingsQueryBuilder WithBasicAuthUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthUsername", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptBasicAuthUsername()
        {
            return ExceptField("basicAuthUsername");
        }

        public SettingsQueryBuilder WithDebugLogsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("debugLogsEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptDebugLogsEnabled()
        {
            return ExceptField("debugLogsEnabled");
        }

        public SettingsQueryBuilder WithDownloadAsCbz(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadAsCbz", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptDownloadAsCbz()
        {
            return ExceptField("downloadAsCbz");
        }

        public SettingsQueryBuilder WithDownloadsPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadsPath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptDownloadsPath()
        {
            return ExceptField("downloadsPath");
        }

        public SettingsQueryBuilder WithElectronPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("electronPath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptElectronPath()
        {
            return ExceptField("electronPath");
        }

        public SettingsQueryBuilder WithExcludeCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptExcludeCompleted()
        {
            return ExceptField("excludeCompleted");
        }

        public SettingsQueryBuilder WithExcludeEntryWithUnreadChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeEntryWithUnreadChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptExcludeEntryWithUnreadChapters()
        {
            return ExceptField("excludeEntryWithUnreadChapters");
        }

        public SettingsQueryBuilder WithExcludeNotStarted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeNotStarted", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptExcludeNotStarted()
        {
            return ExceptField("excludeNotStarted");
        }

        public SettingsQueryBuilder WithExcludeUnreadChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeUnreadChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptExcludeUnreadChapters()
        {
            return ExceptField("excludeUnreadChapters");
        }

        public SettingsQueryBuilder WithExtensionRepos(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("extensionRepos", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptExtensionRepos()
        {
            return ExceptField("extensionRepos");
        }

        public SettingsQueryBuilder WithFlareSolverrEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptFlareSolverrEnabled()
        {
            return ExceptField("flareSolverrEnabled");
        }

        public SettingsQueryBuilder WithFlareSolverrSessionName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrSessionName", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptFlareSolverrSessionName()
        {
            return ExceptField("flareSolverrSessionName");
        }

        public SettingsQueryBuilder WithFlareSolverrSessionTtl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrSessionTtl", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptFlareSolverrSessionTtl()
        {
            return ExceptField("flareSolverrSessionTtl");
        }

        public SettingsQueryBuilder WithFlareSolverrTimeout(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrTimeout", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptFlareSolverrTimeout()
        {
            return ExceptField("flareSolverrTimeout");
        }

        public SettingsQueryBuilder WithFlareSolverrUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptFlareSolverrUrl()
        {
            return ExceptField("flareSolverrUrl");
        }

        public SettingsQueryBuilder WithGlobalUpdateInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("globalUpdateInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptGlobalUpdateInterval()
        {
            return ExceptField("globalUpdateInterval");
        }

        public SettingsQueryBuilder WithGqlDebugLogsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gqlDebugLogsEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptGqlDebugLogsEnabled()
        {
            return ExceptField("gqlDebugLogsEnabled");
        }

        public SettingsQueryBuilder WithInitialOpenInBrowserEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("initialOpenInBrowserEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptInitialOpenInBrowserEnabled()
        {
            return ExceptField("initialOpenInBrowserEnabled");
        }

        public SettingsQueryBuilder WithIp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ip", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptIp()
        {
            return ExceptField("ip");
        }

        public SettingsQueryBuilder WithLocalSourcePath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("localSourcePath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptLocalSourcePath()
        {
            return ExceptField("localSourcePath");
        }

        public SettingsQueryBuilder WithMaxSourcesInParallel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxSourcesInParallel", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptMaxSourcesInParallel()
        {
            return ExceptField("maxSourcesInParallel");
        }

        public SettingsQueryBuilder WithPort(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("port", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptPort()
        {
            return ExceptField("port");
        }

        public SettingsQueryBuilder WithSocksProxyEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptSocksProxyEnabled()
        {
            return ExceptField("socksProxyEnabled");
        }

        public SettingsQueryBuilder WithSocksProxyHost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyHost", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptSocksProxyHost()
        {
            return ExceptField("socksProxyHost");
        }

        public SettingsQueryBuilder WithSocksProxyPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyPassword", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptSocksProxyPassword()
        {
            return ExceptField("socksProxyPassword");
        }

        public SettingsQueryBuilder WithSocksProxyPort(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyPort", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptSocksProxyPort()
        {
            return ExceptField("socksProxyPort");
        }

        public SettingsQueryBuilder WithSocksProxyUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyUsername", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptSocksProxyUsername()
        {
            return ExceptField("socksProxyUsername");
        }

        public SettingsQueryBuilder WithSocksProxyVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptSocksProxyVersion()
        {
            return ExceptField("socksProxyVersion");
        }

        public SettingsQueryBuilder WithSystemTrayEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemTrayEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptSystemTrayEnabled()
        {
            return ExceptField("systemTrayEnabled");
        }

        public SettingsQueryBuilder WithUpdateMangas(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updateMangas", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptUpdateMangas()
        {
            return ExceptField("updateMangas");
        }

        public SettingsQueryBuilder WithWebUiChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIChannel", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptWebUiChannel()
        {
            return ExceptField("webUIChannel");
        }

        public SettingsQueryBuilder WithWebUiFlavor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIFlavor", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptWebUiFlavor()
        {
            return ExceptField("webUIFlavor");
        }

        public SettingsQueryBuilder WithWebUiInterface(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIInterface", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptWebUiInterface()
        {
            return ExceptField("webUIInterface");
        }

        public SettingsQueryBuilder WithWebUiUpdateCheckInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIUpdateCheckInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder ExceptWebUiUpdateCheckInterval()
        {
            return ExceptField("webUIUpdateCheckInterval");
        }

        public SettingsQueryBuilder WithPartialSettingsTypeFragment(PartialSettingsTypeQueryBuilder partialSettingsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(partialSettingsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SettingsQueryBuilder WithSettingsTypeFragment(SettingsTypeQueryBuilder settingsTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(settingsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public class SettingsTypeQueryBuilder : GraphQlQueryBuilder<SettingsTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "autoDownloadNewChapters" },
                new GraphQlFieldMetadata { Name = "autoDownloadNewChaptersLimit" },
                new GraphQlFieldMetadata { Name = "backupInterval" },
                new GraphQlFieldMetadata { Name = "backupPath" },
                new GraphQlFieldMetadata { Name = "backupTTL" },
                new GraphQlFieldMetadata { Name = "backupTime" },
                new GraphQlFieldMetadata { Name = "basicAuthEnabled" },
                new GraphQlFieldMetadata { Name = "basicAuthPassword" },
                new GraphQlFieldMetadata { Name = "basicAuthUsername" },
                new GraphQlFieldMetadata { Name = "debugLogsEnabled" },
                new GraphQlFieldMetadata { Name = "downloadAsCbz" },
                new GraphQlFieldMetadata { Name = "downloadsPath" },
                new GraphQlFieldMetadata { Name = "electronPath" },
                new GraphQlFieldMetadata { Name = "excludeCompleted" },
                new GraphQlFieldMetadata { Name = "excludeEntryWithUnreadChapters" },
                new GraphQlFieldMetadata { Name = "excludeNotStarted" },
                new GraphQlFieldMetadata { Name = "excludeUnreadChapters" },
                new GraphQlFieldMetadata { Name = "extensionRepos", IsComplex = true },
                new GraphQlFieldMetadata { Name = "flareSolverrEnabled" },
                new GraphQlFieldMetadata { Name = "flareSolverrSessionName" },
                new GraphQlFieldMetadata { Name = "flareSolverrSessionTtl" },
                new GraphQlFieldMetadata { Name = "flareSolverrTimeout" },
                new GraphQlFieldMetadata { Name = "flareSolverrUrl" },
                new GraphQlFieldMetadata { Name = "globalUpdateInterval" },
                new GraphQlFieldMetadata { Name = "gqlDebugLogsEnabled" },
                new GraphQlFieldMetadata { Name = "initialOpenInBrowserEnabled" },
                new GraphQlFieldMetadata { Name = "ip" },
                new GraphQlFieldMetadata { Name = "localSourcePath" },
                new GraphQlFieldMetadata { Name = "maxSourcesInParallel" },
                new GraphQlFieldMetadata { Name = "port" },
                new GraphQlFieldMetadata { Name = "socksProxyEnabled" },
                new GraphQlFieldMetadata { Name = "socksProxyHost" },
                new GraphQlFieldMetadata { Name = "socksProxyPassword" },
                new GraphQlFieldMetadata { Name = "socksProxyPort" },
                new GraphQlFieldMetadata { Name = "socksProxyUsername" },
                new GraphQlFieldMetadata { Name = "socksProxyVersion" },
                new GraphQlFieldMetadata { Name = "systemTrayEnabled" },
                new GraphQlFieldMetadata { Name = "updateMangas" },
                new GraphQlFieldMetadata { Name = "webUIChannel" },
                new GraphQlFieldMetadata { Name = "webUIFlavor" },
                new GraphQlFieldMetadata { Name = "webUIInterface" },
                new GraphQlFieldMetadata { Name = "webUIUpdateCheckInterval" }
            };

        protected override string TypeName { get { return "SettingsType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SettingsTypeQueryBuilder WithAutoDownloadNewChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoDownloadNewChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptAutoDownloadNewChapters()
        {
            return ExceptField("autoDownloadNewChapters");
        }

        public SettingsTypeQueryBuilder WithAutoDownloadNewChaptersLimit(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("autoDownloadNewChaptersLimit", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptAutoDownloadNewChaptersLimit()
        {
            return ExceptField("autoDownloadNewChaptersLimit");
        }

        public SettingsTypeQueryBuilder WithBackupInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptBackupInterval()
        {
            return ExceptField("backupInterval");
        }

        public SettingsTypeQueryBuilder WithBackupPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupPath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptBackupPath()
        {
            return ExceptField("backupPath");
        }

        public SettingsTypeQueryBuilder WithBackupTtl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupTTL", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptBackupTtl()
        {
            return ExceptField("backupTTL");
        }

        public SettingsTypeQueryBuilder WithBackupTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backupTime", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptBackupTime()
        {
            return ExceptField("backupTime");
        }

        public SettingsTypeQueryBuilder WithBasicAuthEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptBasicAuthEnabled()
        {
            return ExceptField("basicAuthEnabled");
        }

        public SettingsTypeQueryBuilder WithBasicAuthPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthPassword", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptBasicAuthPassword()
        {
            return ExceptField("basicAuthPassword");
        }

        public SettingsTypeQueryBuilder WithBasicAuthUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basicAuthUsername", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptBasicAuthUsername()
        {
            return ExceptField("basicAuthUsername");
        }

        public SettingsTypeQueryBuilder WithDebugLogsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("debugLogsEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptDebugLogsEnabled()
        {
            return ExceptField("debugLogsEnabled");
        }

        public SettingsTypeQueryBuilder WithDownloadAsCbz(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadAsCbz", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptDownloadAsCbz()
        {
            return ExceptField("downloadAsCbz");
        }

        public SettingsTypeQueryBuilder WithDownloadsPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("downloadsPath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptDownloadsPath()
        {
            return ExceptField("downloadsPath");
        }

        public SettingsTypeQueryBuilder WithElectronPath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("electronPath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptElectronPath()
        {
            return ExceptField("electronPath");
        }

        public SettingsTypeQueryBuilder WithExcludeCompleted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeCompleted", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptExcludeCompleted()
        {
            return ExceptField("excludeCompleted");
        }

        public SettingsTypeQueryBuilder WithExcludeEntryWithUnreadChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeEntryWithUnreadChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptExcludeEntryWithUnreadChapters()
        {
            return ExceptField("excludeEntryWithUnreadChapters");
        }

        public SettingsTypeQueryBuilder WithExcludeNotStarted(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeNotStarted", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptExcludeNotStarted()
        {
            return ExceptField("excludeNotStarted");
        }

        public SettingsTypeQueryBuilder WithExcludeUnreadChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("excludeUnreadChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptExcludeUnreadChapters()
        {
            return ExceptField("excludeUnreadChapters");
        }

        public SettingsTypeQueryBuilder WithExtensionRepos(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("extensionRepos", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptExtensionRepos()
        {
            return ExceptField("extensionRepos");
        }

        public SettingsTypeQueryBuilder WithFlareSolverrEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptFlareSolverrEnabled()
        {
            return ExceptField("flareSolverrEnabled");
        }

        public SettingsTypeQueryBuilder WithFlareSolverrSessionName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrSessionName", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptFlareSolverrSessionName()
        {
            return ExceptField("flareSolverrSessionName");
        }

        public SettingsTypeQueryBuilder WithFlareSolverrSessionTtl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrSessionTtl", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptFlareSolverrSessionTtl()
        {
            return ExceptField("flareSolverrSessionTtl");
        }

        public SettingsTypeQueryBuilder WithFlareSolverrTimeout(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrTimeout", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptFlareSolverrTimeout()
        {
            return ExceptField("flareSolverrTimeout");
        }

        public SettingsTypeQueryBuilder WithFlareSolverrUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flareSolverrUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptFlareSolverrUrl()
        {
            return ExceptField("flareSolverrUrl");
        }

        public SettingsTypeQueryBuilder WithGlobalUpdateInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("globalUpdateInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptGlobalUpdateInterval()
        {
            return ExceptField("globalUpdateInterval");
        }

        public SettingsTypeQueryBuilder WithGqlDebugLogsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("gqlDebugLogsEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptGqlDebugLogsEnabled()
        {
            return ExceptField("gqlDebugLogsEnabled");
        }

        public SettingsTypeQueryBuilder WithInitialOpenInBrowserEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("initialOpenInBrowserEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptInitialOpenInBrowserEnabled()
        {
            return ExceptField("initialOpenInBrowserEnabled");
        }

        public SettingsTypeQueryBuilder WithIp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ip", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptIp()
        {
            return ExceptField("ip");
        }

        public SettingsTypeQueryBuilder WithLocalSourcePath(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("localSourcePath", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptLocalSourcePath()
        {
            return ExceptField("localSourcePath");
        }

        public SettingsTypeQueryBuilder WithMaxSourcesInParallel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxSourcesInParallel", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptMaxSourcesInParallel()
        {
            return ExceptField("maxSourcesInParallel");
        }

        public SettingsTypeQueryBuilder WithPort(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("port", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptPort()
        {
            return ExceptField("port");
        }

        public SettingsTypeQueryBuilder WithSocksProxyEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptSocksProxyEnabled()
        {
            return ExceptField("socksProxyEnabled");
        }

        public SettingsTypeQueryBuilder WithSocksProxyHost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyHost", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptSocksProxyHost()
        {
            return ExceptField("socksProxyHost");
        }

        public SettingsTypeQueryBuilder WithSocksProxyPassword(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyPassword", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptSocksProxyPassword()
        {
            return ExceptField("socksProxyPassword");
        }

        public SettingsTypeQueryBuilder WithSocksProxyPort(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyPort", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptSocksProxyPort()
        {
            return ExceptField("socksProxyPort");
        }

        public SettingsTypeQueryBuilder WithSocksProxyUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyUsername", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptSocksProxyUsername()
        {
            return ExceptField("socksProxyUsername");
        }

        public SettingsTypeQueryBuilder WithSocksProxyVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("socksProxyVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptSocksProxyVersion()
        {
            return ExceptField("socksProxyVersion");
        }

        public SettingsTypeQueryBuilder WithSystemTrayEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("systemTrayEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptSystemTrayEnabled()
        {
            return ExceptField("systemTrayEnabled");
        }

        public SettingsTypeQueryBuilder WithUpdateMangas(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updateMangas", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptUpdateMangas()
        {
            return ExceptField("updateMangas");
        }

        public SettingsTypeQueryBuilder WithWebUiChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIChannel", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptWebUiChannel()
        {
            return ExceptField("webUIChannel");
        }

        public SettingsTypeQueryBuilder WithWebUiFlavor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIFlavor", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptWebUiFlavor()
        {
            return ExceptField("webUIFlavor");
        }

        public SettingsTypeQueryBuilder WithWebUiInterface(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIInterface", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptWebUiInterface()
        {
            return ExceptField("webUIInterface");
        }

        public SettingsTypeQueryBuilder WithWebUiUpdateCheckInterval(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("webUIUpdateCheckInterval", alias, new GraphQlDirective[] { include, skip });
        }

        public SettingsTypeQueryBuilder ExceptWebUiUpdateCheckInterval()
        {
            return ExceptField("webUIUpdateCheckInterval");
        }
    }

    public class SortFilterQueryBuilder : GraphQlQueryBuilder<SortFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "default", IsComplex = true, QueryBuilderType = typeof(SortSelectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "values", IsComplex = true }
            };

        protected override string TypeName { get { return "SortFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SortFilterQueryBuilder WithDefault(SortSelectionQueryBuilder sortSelectionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("default", alias, sortSelectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SortFilterQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public SortFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SortFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SortFilterQueryBuilder WithValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("values", alias, new GraphQlDirective[] { include, skip });
        }

        public SortFilterQueryBuilder ExceptValues()
        {
            return ExceptField("values");
        }
    }

    public class SortSelectionQueryBuilder : GraphQlQueryBuilder<SortSelectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "ascending" },
                new GraphQlFieldMetadata { Name = "index" }
            };

        protected override string TypeName { get { return "SortSelection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SortSelectionQueryBuilder WithAscending(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ascending", alias, new GraphQlDirective[] { include, skip });
        }

        public SortSelectionQueryBuilder ExceptAscending()
        {
            return ExceptField("ascending");
        }

        public SortSelectionQueryBuilder WithIndex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("index", alias, new GraphQlDirective[] { include, skip });
        }

        public SortSelectionQueryBuilder ExceptIndex()
        {
            return ExceptField("index");
        }
    }

    public class SourceEdgeQueryBuilder : GraphQlQueryBuilder<SourceEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(SourceTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SourceEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SourceEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public SourceEdgeQueryBuilder WithNode(SourceTypeQueryBuilder sourceTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class SourceMetaTypeQueryBuilder : GraphQlQueryBuilder<SourceMetaTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "sourceId", IsComplex = true },
                new GraphQlFieldMetadata { Name = "value" },
                new GraphQlFieldMetadata { Name = "source", IsComplex = true, QueryBuilderType = typeof(SourceTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "SourceMetaType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SourceMetaTypeQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceMetaTypeQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public SourceMetaTypeQueryBuilder WithSourceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sourceId", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceMetaTypeQueryBuilder ExceptSourceId()
        {
            return ExceptField("sourceId");
        }

        public SourceMetaTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceMetaTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }

        public SourceMetaTypeQueryBuilder WithSource(SourceTypeQueryBuilder sourceTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("source", alias, sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceMetaTypeQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }
    }

    public class SourceNodeListQueryBuilder : GraphQlQueryBuilder<SourceNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SourceEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SourceTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "SourceNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SourceNodeListQueryBuilder WithEdges(SourceEdgeQueryBuilder sourceEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, sourceEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public SourceNodeListQueryBuilder WithNodes(SourceTypeQueryBuilder sourceTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public SourceNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public SourceNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class SourceTypeQueryBuilder : GraphQlQueryBuilder<SourceTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "displayName" },
                new GraphQlFieldMetadata { Name = "iconUrl" },
                new GraphQlFieldMetadata { Name = "id", IsComplex = true },
                new GraphQlFieldMetadata { Name = "isConfigurable" },
                new GraphQlFieldMetadata { Name = "isNsfw" },
                new GraphQlFieldMetadata { Name = "lang" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "supportsLatest" },
                new GraphQlFieldMetadata { Name = "extension", IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "filters", IsComplex = true, QueryBuilderType = typeof(FilterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaNodeListQueryBuilder) },
                new GraphQlFieldMetadata { Name = "meta", IsComplex = true, QueryBuilderType = typeof(SourceMetaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "preferences", IsComplex = true, QueryBuilderType = typeof(PreferenceQueryBuilder) }
            };

        protected override string TypeName { get { return "SourceType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SourceTypeQueryBuilder WithDisplayName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayName", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptDisplayName()
        {
            return ExceptField("displayName");
        }

        public SourceTypeQueryBuilder WithIconUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("iconUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptIconUrl()
        {
            return ExceptField("iconUrl");
        }

        public SourceTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SourceTypeQueryBuilder WithIsConfigurable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isConfigurable", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptIsConfigurable()
        {
            return ExceptField("isConfigurable");
        }

        public SourceTypeQueryBuilder WithIsNsfw(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isNsfw", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptIsNsfw()
        {
            return ExceptField("isNsfw");
        }

        public SourceTypeQueryBuilder WithLang(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lang", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptLang()
        {
            return ExceptField("lang");
        }

        public SourceTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public SourceTypeQueryBuilder WithSupportsLatest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("supportsLatest", alias, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptSupportsLatest()
        {
            return ExceptField("supportsLatest");
        }

        public SourceTypeQueryBuilder WithExtension(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extension", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptExtension()
        {
            return ExceptField("extension");
        }

        public SourceTypeQueryBuilder WithFilters(FilterQueryBuilder filterQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("filters", alias, filterQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptFilters()
        {
            return ExceptField("filters");
        }

        public SourceTypeQueryBuilder WithManga(MangaNodeListQueryBuilder mangaNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }

        public SourceTypeQueryBuilder WithMeta(SourceMetaTypeQueryBuilder sourceMetaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("meta", alias, sourceMetaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptMeta()
        {
            return ExceptField("meta");
        }

        public SourceTypeQueryBuilder WithPreferences(PreferenceQueryBuilder preferenceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("preferences", alias, preferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SourceTypeQueryBuilder ExceptPreferences()
        {
            return ExceptField("preferences");
        }
    }

    public class StartDownloaderPayloadQueryBuilder : GraphQlQueryBuilder<StartDownloaderPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "StartDownloaderPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StartDownloaderPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public StartDownloaderPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public StartDownloaderPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StartDownloaderPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class StopDownloaderPayloadQueryBuilder : GraphQlQueryBuilder<StopDownloaderPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "downloadStatus", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "StopDownloaderPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StopDownloaderPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public StopDownloaderPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public StopDownloaderPayloadQueryBuilder WithDownloadStatus(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadStatus", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StopDownloaderPayloadQueryBuilder ExceptDownloadStatus()
        {
            return ExceptField("downloadStatus");
        }
    }

    public class SubscriptionQueryBuilder : GraphQlQueryBuilder<SubscriptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "downloadChanged", IsComplex = true, QueryBuilderType = typeof(DownloadStatusQueryBuilder) },
                new GraphQlFieldMetadata { Name = "webUIUpdateStatusChange", IsComplex = true, QueryBuilderType = typeof(WebUiUpdateStatusQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateStatusChanged", IsComplex = true, QueryBuilderType = typeof(UpdateStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "Subscription"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SubscriptionQueryBuilder(string operationName = null) : base("subscription", operationName)
        {
        }

        public SubscriptionQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public SubscriptionQueryBuilder WithDownloadChanged(DownloadStatusQueryBuilder downloadStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("downloadChanged", alias, downloadStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptDownloadChanged()
        {
            return ExceptField("downloadChanged");
        }

        public SubscriptionQueryBuilder WithWebUiUpdateStatusChange(WebUiUpdateStatusQueryBuilder webUiUpdateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("webUIUpdateStatusChange", alias, webUiUpdateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptWebUiUpdateStatusChange()
        {
            return ExceptField("webUIUpdateStatusChange");
        }

        public SubscriptionQueryBuilder WithUpdateStatusChanged(UpdateStatusQueryBuilder updateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("updateStatusChanged", alias, updateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptUpdateStatusChanged()
        {
            return ExceptField("updateStatusChanged");
        }
    }

    public class SwitchPreferenceQueryBuilder : GraphQlQueryBuilder<SwitchPreferenceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "currentValue" },
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "key" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "visible" }
            };

        protected override string TypeName { get { return "SwitchPreference"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SwitchPreferenceQueryBuilder WithCurrentValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currentValue", alias, new GraphQlDirective[] { include, skip });
        }

        public SwitchPreferenceQueryBuilder ExceptCurrentValue()
        {
            return ExceptField("currentValue");
        }

        public SwitchPreferenceQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public SwitchPreferenceQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public SwitchPreferenceQueryBuilder WithKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("key", alias, new GraphQlDirective[] { include, skip });
        }

        public SwitchPreferenceQueryBuilder ExceptKey()
        {
            return ExceptField("key");
        }

        public SwitchPreferenceQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public SwitchPreferenceQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public SwitchPreferenceQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public SwitchPreferenceQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public SwitchPreferenceQueryBuilder WithVisible(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("visible", alias, new GraphQlDirective[] { include, skip });
        }

        public SwitchPreferenceQueryBuilder ExceptVisible()
        {
            return ExceptField("visible");
        }
    }

    public class TextFilterQueryBuilder : GraphQlQueryBuilder<TextFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "TextFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TextFilterQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public TextFilterQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public TextFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TextFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class TrackRecordEdgeQueryBuilder : GraphQlQueryBuilder<TrackRecordEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(TrackRecordTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TrackRecordEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackRecordEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public TrackRecordEdgeQueryBuilder WithNode(TrackRecordTypeQueryBuilder trackRecordTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, trackRecordTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class TrackRecordNodeListQueryBuilder : GraphQlQueryBuilder<TrackRecordNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(TrackRecordEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(TrackRecordTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "TrackRecordNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackRecordNodeListQueryBuilder WithEdges(TrackRecordEdgeQueryBuilder trackRecordEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, trackRecordEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public TrackRecordNodeListQueryBuilder WithNodes(TrackRecordTypeQueryBuilder trackRecordTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, trackRecordTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public TrackRecordNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public TrackRecordNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class TrackRecordTypeQueryBuilder : GraphQlQueryBuilder<TrackRecordTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "finishDate", IsComplex = true },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "lastChapterRead" },
                new GraphQlFieldMetadata { Name = "libraryId", IsComplex = true },
                new GraphQlFieldMetadata { Name = "mangaId" },
                new GraphQlFieldMetadata { Name = "remoteId", IsComplex = true },
                new GraphQlFieldMetadata { Name = "remoteUrl" },
                new GraphQlFieldMetadata { Name = "score" },
                new GraphQlFieldMetadata { Name = "startDate", IsComplex = true },
                new GraphQlFieldMetadata { Name = "status" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "totalChapters" },
                new GraphQlFieldMetadata { Name = "trackerId" },
                new GraphQlFieldMetadata { Name = "displayScore" },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tracker", IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TrackRecordType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackRecordTypeQueryBuilder WithFinishDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("finishDate", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptFinishDate()
        {
            return ExceptField("finishDate");
        }

        public TrackRecordTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TrackRecordTypeQueryBuilder WithLastChapterRead(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastChapterRead", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptLastChapterRead()
        {
            return ExceptField("lastChapterRead");
        }

        public TrackRecordTypeQueryBuilder WithLibraryId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("libraryId", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptLibraryId()
        {
            return ExceptField("libraryId");
        }

        public TrackRecordTypeQueryBuilder WithMangaId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mangaId", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptMangaId()
        {
            return ExceptField("mangaId");
        }

        public TrackRecordTypeQueryBuilder WithRemoteId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("remoteId", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptRemoteId()
        {
            return ExceptField("remoteId");
        }

        public TrackRecordTypeQueryBuilder WithRemoteUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("remoteUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptRemoteUrl()
        {
            return ExceptField("remoteUrl");
        }

        public TrackRecordTypeQueryBuilder WithScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("score", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptScore()
        {
            return ExceptField("score");
        }

        public TrackRecordTypeQueryBuilder WithStartDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDate", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptStartDate()
        {
            return ExceptField("startDate");
        }

        public TrackRecordTypeQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public TrackRecordTypeQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public TrackRecordTypeQueryBuilder WithTotalChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptTotalChapters()
        {
            return ExceptField("totalChapters");
        }

        public TrackRecordTypeQueryBuilder WithTrackerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trackerId", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptTrackerId()
        {
            return ExceptField("trackerId");
        }

        public TrackRecordTypeQueryBuilder WithDisplayScore(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("displayScore", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptDisplayScore()
        {
            return ExceptField("displayScore");
        }

        public TrackRecordTypeQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }

        public TrackRecordTypeQueryBuilder WithTracker(TrackerTypeQueryBuilder trackerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tracker", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackRecordTypeQueryBuilder ExceptTracker()
        {
            return ExceptField("tracker");
        }
    }

    public class TrackSearchTypeQueryBuilder : GraphQlQueryBuilder<TrackSearchTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "coverUrl" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "publishingStatus" },
                new GraphQlFieldMetadata { Name = "publishingType" },
                new GraphQlFieldMetadata { Name = "remoteId", IsComplex = true },
                new GraphQlFieldMetadata { Name = "startDate" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "totalChapters" },
                new GraphQlFieldMetadata { Name = "trackerId" },
                new GraphQlFieldMetadata { Name = "trackingUrl" },
                new GraphQlFieldMetadata { Name = "tracker", IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TrackSearchType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackSearchTypeQueryBuilder WithCoverUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coverUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptCoverUrl()
        {
            return ExceptField("coverUrl");
        }

        public TrackSearchTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TrackSearchTypeQueryBuilder WithPublishingStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishingStatus", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptPublishingStatus()
        {
            return ExceptField("publishingStatus");
        }

        public TrackSearchTypeQueryBuilder WithPublishingType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishingType", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptPublishingType()
        {
            return ExceptField("publishingType");
        }

        public TrackSearchTypeQueryBuilder WithRemoteId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("remoteId", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptRemoteId()
        {
            return ExceptField("remoteId");
        }

        public TrackSearchTypeQueryBuilder WithStartDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startDate", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptStartDate()
        {
            return ExceptField("startDate");
        }

        public TrackSearchTypeQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public TrackSearchTypeQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public TrackSearchTypeQueryBuilder WithTotalChapters(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalChapters", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptTotalChapters()
        {
            return ExceptField("totalChapters");
        }

        public TrackSearchTypeQueryBuilder WithTrackerId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trackerId", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptTrackerId()
        {
            return ExceptField("trackerId");
        }

        public TrackSearchTypeQueryBuilder WithTrackingUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("trackingUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptTrackingUrl()
        {
            return ExceptField("trackingUrl");
        }

        public TrackSearchTypeQueryBuilder WithTracker(TrackerTypeQueryBuilder trackerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("tracker", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackSearchTypeQueryBuilder ExceptTracker()
        {
            return ExceptField("tracker");
        }
    }

    public class TrackStatusTypeQueryBuilder : GraphQlQueryBuilder<TrackStatusTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "TrackStatusType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackStatusTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackStatusTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public TrackStatusTypeQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackStatusTypeQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public class TrackerEdgeQueryBuilder : GraphQlQueryBuilder<TrackerEdgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cursor", IsComplex = true },
                new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "TrackerEdge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackerEdgeQueryBuilder WithCursor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cursor", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerEdgeQueryBuilder ExceptCursor()
        {
            return ExceptField("cursor");
        }

        public TrackerEdgeQueryBuilder WithNode(TrackerTypeQueryBuilder trackerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("node", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackerEdgeQueryBuilder ExceptNode()
        {
            return ExceptField("node");
        }
    }

    public class TrackerNodeListQueryBuilder : GraphQlQueryBuilder<TrackerNodeListQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(TrackerEdgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(TrackerTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "totalCount" }
            };

        protected override string TypeName { get { return "TrackerNodeList"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackerNodeListQueryBuilder WithEdges(TrackerEdgeQueryBuilder trackerEdgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("edges", alias, trackerEdgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackerNodeListQueryBuilder ExceptEdges()
        {
            return ExceptField("edges");
        }

        public TrackerNodeListQueryBuilder WithNodes(TrackerTypeQueryBuilder trackerTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, trackerTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackerNodeListQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public TrackerNodeListQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackerNodeListQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public TrackerNodeListQueryBuilder WithTotalCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCount", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerNodeListQueryBuilder ExceptTotalCount()
        {
            return ExceptField("totalCount");
        }
    }

    public class TrackerTypeQueryBuilder : GraphQlQueryBuilder<TrackerTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "authUrl" },
                new GraphQlFieldMetadata { Name = "icon" },
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "isLoggedIn" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "isTokenExpired" },
                new GraphQlFieldMetadata { Name = "scores", IsComplex = true },
                new GraphQlFieldMetadata { Name = "statuses", IsComplex = true, QueryBuilderType = typeof(TrackStatusTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "trackRecords", IsComplex = true, QueryBuilderType = typeof(TrackRecordNodeListQueryBuilder) }
            };

        protected override string TypeName { get { return "TrackerType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TrackerTypeQueryBuilder WithAuthUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("authUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptAuthUrl()
        {
            return ExceptField("authUrl");
        }

        public TrackerTypeQueryBuilder WithIcon(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("icon", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptIcon()
        {
            return ExceptField("icon");
        }

        public TrackerTypeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public TrackerTypeQueryBuilder WithIsLoggedIn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isLoggedIn", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptIsLoggedIn()
        {
            return ExceptField("isLoggedIn");
        }

        public TrackerTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public TrackerTypeQueryBuilder WithIsTokenExpired(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTokenExpired", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptIsTokenExpired()
        {
            return ExceptField("isTokenExpired");
        }

        public TrackerTypeQueryBuilder WithScores(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scores", alias, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptScores()
        {
            return ExceptField("scores");
        }

        public TrackerTypeQueryBuilder WithStatuses(TrackStatusTypeQueryBuilder trackStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("statuses", alias, trackStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptStatuses()
        {
            return ExceptField("statuses");
        }

        public TrackerTypeQueryBuilder WithTrackRecords(TrackRecordNodeListQueryBuilder trackRecordNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("trackRecords", alias, trackRecordNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TrackerTypeQueryBuilder ExceptTrackRecords()
        {
            return ExceptField("trackRecords");
        }
    }

    public class TriStateFilterQueryBuilder : GraphQlQueryBuilder<TriStateFilterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "default" },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "TriStateFilter"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TriStateFilterQueryBuilder WithDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("default", alias, new GraphQlDirective[] { include, skip });
        }

        public TriStateFilterQueryBuilder ExceptDefault()
        {
            return ExceptField("default");
        }

        public TriStateFilterQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public TriStateFilterQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class UpdateCategoriesPayloadQueryBuilder : GraphQlQueryBuilder<UpdateCategoriesPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "categories", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "UpdateCategoriesPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateCategoriesPayloadQueryBuilder WithCategories(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("categories", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoriesPayloadQueryBuilder ExceptCategories()
        {
            return ExceptField("categories");
        }

        public UpdateCategoriesPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoriesPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class UpdateCategoryMangaPayloadQueryBuilder : GraphQlQueryBuilder<UpdateCategoryMangaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "updateStatus", IsComplex = true, QueryBuilderType = typeof(UpdateStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateCategoryMangaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateCategoryMangaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoryMangaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateCategoryMangaPayloadQueryBuilder WithUpdateStatus(UpdateStatusQueryBuilder updateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("updateStatus", alias, updateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoryMangaPayloadQueryBuilder ExceptUpdateStatus()
        {
            return ExceptField("updateStatus");
        }
    }

    public class UpdateCategoryOrderPayloadQueryBuilder : GraphQlQueryBuilder<UpdateCategoryOrderPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "categories", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "UpdateCategoryOrderPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateCategoryOrderPayloadQueryBuilder WithCategories(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("categories", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoryOrderPayloadQueryBuilder ExceptCategories()
        {
            return ExceptField("categories");
        }

        public UpdateCategoryOrderPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoryOrderPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class UpdateCategoryPayloadQueryBuilder : GraphQlQueryBuilder<UpdateCategoryPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "category", IsComplex = true, QueryBuilderType = typeof(CategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "UpdateCategoryPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateCategoryPayloadQueryBuilder WithCategory(CategoryTypeQueryBuilder categoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("category", alias, categoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoryPayloadQueryBuilder ExceptCategory()
        {
            return ExceptField("category");
        }

        public UpdateCategoryPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateCategoryPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class UpdateChapterPayloadQueryBuilder : GraphQlQueryBuilder<UpdateChapterPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapter", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "UpdateChapterPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateChapterPayloadQueryBuilder WithChapter(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapter", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateChapterPayloadQueryBuilder ExceptChapter()
        {
            return ExceptField("chapter");
        }

        public UpdateChapterPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateChapterPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class UpdateChaptersPayloadQueryBuilder : GraphQlQueryBuilder<UpdateChaptersPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "chapters", IsComplex = true, QueryBuilderType = typeof(ChapterTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "UpdateChaptersPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateChaptersPayloadQueryBuilder WithChapters(ChapterTypeQueryBuilder chapterTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chapters", alias, chapterTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateChaptersPayloadQueryBuilder ExceptChapters()
        {
            return ExceptField("chapters");
        }

        public UpdateChaptersPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateChaptersPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class UpdateExtensionPayloadQueryBuilder : GraphQlQueryBuilder<UpdateExtensionPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "extension", IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateExtensionPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateExtensionPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateExtensionPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateExtensionPayloadQueryBuilder WithExtension(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extension", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateExtensionPayloadQueryBuilder ExceptExtension()
        {
            return ExceptField("extension");
        }
    }

    public class UpdateExtensionsPayloadQueryBuilder : GraphQlQueryBuilder<UpdateExtensionsPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "extensions", IsComplex = true, QueryBuilderType = typeof(ExtensionTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateExtensionsPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateExtensionsPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateExtensionsPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateExtensionsPayloadQueryBuilder WithExtensions(ExtensionTypeQueryBuilder extensionTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extensions", alias, extensionTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateExtensionsPayloadQueryBuilder ExceptExtensions()
        {
            return ExceptField("extensions");
        }
    }

    public class UpdateLibraryMangaPayloadQueryBuilder : GraphQlQueryBuilder<UpdateLibraryMangaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "updateStatus", IsComplex = true, QueryBuilderType = typeof(UpdateStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateLibraryMangaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateLibraryMangaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateLibraryMangaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateLibraryMangaPayloadQueryBuilder WithUpdateStatus(UpdateStatusQueryBuilder updateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("updateStatus", alias, updateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateLibraryMangaPayloadQueryBuilder ExceptUpdateStatus()
        {
            return ExceptField("updateStatus");
        }
    }

    public class UpdateMangaCategoriesPayloadQueryBuilder : GraphQlQueryBuilder<UpdateMangaCategoriesPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateMangaCategoriesPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateMangaCategoriesPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangaCategoriesPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateMangaCategoriesPayloadQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangaCategoriesPayloadQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }
    }

    public class UpdateMangaPayloadQueryBuilder : GraphQlQueryBuilder<UpdateMangaPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "manga", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateMangaPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateMangaPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangaPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateMangaPayloadQueryBuilder WithManga(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("manga", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangaPayloadQueryBuilder ExceptManga()
        {
            return ExceptField("manga");
        }
    }

    public class UpdateMangasCategoriesPayloadQueryBuilder : GraphQlQueryBuilder<UpdateMangasCategoriesPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "mangas", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateMangasCategoriesPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateMangasCategoriesPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangasCategoriesPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateMangasCategoriesPayloadQueryBuilder WithMangas(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangas", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangasCategoriesPayloadQueryBuilder ExceptMangas()
        {
            return ExceptField("mangas");
        }
    }

    public class UpdateMangasPayloadQueryBuilder : GraphQlQueryBuilder<UpdateMangasPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "mangas", IsComplex = true, QueryBuilderType = typeof(MangaTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateMangasPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateMangasPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangasPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateMangasPayloadQueryBuilder WithMangas(MangaTypeQueryBuilder mangaTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangas", alias, mangaTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateMangasPayloadQueryBuilder ExceptMangas()
        {
            return ExceptField("mangas");
        }
    }

    public class UpdateSourcePreferencePayloadQueryBuilder : GraphQlQueryBuilder<UpdateSourcePreferencePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "preferences", IsComplex = true, QueryBuilderType = typeof(PreferenceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "source", IsComplex = true, QueryBuilderType = typeof(SourceTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateSourcePreferencePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateSourcePreferencePayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateSourcePreferencePayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateSourcePreferencePayloadQueryBuilder WithPreferences(PreferenceQueryBuilder preferenceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("preferences", alias, preferenceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateSourcePreferencePayloadQueryBuilder ExceptPreferences()
        {
            return ExceptField("preferences");
        }

        public UpdateSourcePreferencePayloadQueryBuilder WithSource(SourceTypeQueryBuilder sourceTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("source", alias, sourceTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateSourcePreferencePayloadQueryBuilder ExceptSource()
        {
            return ExceptField("source");
        }
    }

    public class UpdateStatusQueryBuilder : GraphQlQueryBuilder<UpdateStatusQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "completeJobs", IsComplex = true, QueryBuilderType = typeof(UpdateStatusTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "failedJobs", IsComplex = true, QueryBuilderType = typeof(UpdateStatusTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "isRunning" },
                new GraphQlFieldMetadata { Name = "pendingJobs", IsComplex = true, QueryBuilderType = typeof(UpdateStatusTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "runningJobs", IsComplex = true, QueryBuilderType = typeof(UpdateStatusTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "skippedCategories", IsComplex = true, QueryBuilderType = typeof(UpdateStatusCategoryTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "skippedJobs", IsComplex = true, QueryBuilderType = typeof(UpdateStatusTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updatingCategories", IsComplex = true, QueryBuilderType = typeof(UpdateStatusCategoryTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateStatus"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateStatusQueryBuilder WithCompleteJobs(UpdateStatusTypeQueryBuilder updateStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("completeJobs", alias, updateStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptCompleteJobs()
        {
            return ExceptField("completeJobs");
        }

        public UpdateStatusQueryBuilder WithFailedJobs(UpdateStatusTypeQueryBuilder updateStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("failedJobs", alias, updateStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptFailedJobs()
        {
            return ExceptField("failedJobs");
        }

        public UpdateStatusQueryBuilder WithIsRunning(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRunning", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptIsRunning()
        {
            return ExceptField("isRunning");
        }

        public UpdateStatusQueryBuilder WithPendingJobs(UpdateStatusTypeQueryBuilder updateStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pendingJobs", alias, updateStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptPendingJobs()
        {
            return ExceptField("pendingJobs");
        }

        public UpdateStatusQueryBuilder WithRunningJobs(UpdateStatusTypeQueryBuilder updateStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("runningJobs", alias, updateStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptRunningJobs()
        {
            return ExceptField("runningJobs");
        }

        public UpdateStatusQueryBuilder WithSkippedCategories(UpdateStatusCategoryTypeQueryBuilder updateStatusCategoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("skippedCategories", alias, updateStatusCategoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptSkippedCategories()
        {
            return ExceptField("skippedCategories");
        }

        public UpdateStatusQueryBuilder WithSkippedJobs(UpdateStatusTypeQueryBuilder updateStatusTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("skippedJobs", alias, updateStatusTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptSkippedJobs()
        {
            return ExceptField("skippedJobs");
        }

        public UpdateStatusQueryBuilder WithUpdatingCategories(UpdateStatusCategoryTypeQueryBuilder updateStatusCategoryTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("updatingCategories", alias, updateStatusCategoryTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusQueryBuilder ExceptUpdatingCategories()
        {
            return ExceptField("updatingCategories");
        }
    }

    public class UpdateStatusCategoryTypeQueryBuilder : GraphQlQueryBuilder<UpdateStatusCategoryTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "categories", IsComplex = true, QueryBuilderType = typeof(CategoryNodeListQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateStatusCategoryType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateStatusCategoryTypeQueryBuilder WithCategories(CategoryNodeListQueryBuilder categoryNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("categories", alias, categoryNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusCategoryTypeQueryBuilder ExceptCategories()
        {
            return ExceptField("categories");
        }
    }

    public class UpdateStatusTypeQueryBuilder : GraphQlQueryBuilder<UpdateStatusTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "mangas", IsComplex = true, QueryBuilderType = typeof(MangaNodeListQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateStatusType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateStatusTypeQueryBuilder WithMangas(MangaNodeListQueryBuilder mangaNodeListQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mangas", alias, mangaNodeListQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateStatusTypeQueryBuilder ExceptMangas()
        {
            return ExceptField("mangas");
        }
    }

    public class UpdateStopPayloadQueryBuilder : GraphQlQueryBuilder<UpdateStopPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" }
            };

        protected override string TypeName { get { return "UpdateStopPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateStopPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateStopPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }
    }

    public class UpdateTrackPayloadQueryBuilder : GraphQlQueryBuilder<UpdateTrackPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "trackRecord", IsComplex = true, QueryBuilderType = typeof(TrackRecordTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "UpdateTrackPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UpdateTrackPayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public UpdateTrackPayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public UpdateTrackPayloadQueryBuilder WithTrackRecord(TrackRecordTypeQueryBuilder trackRecordTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("trackRecord", alias, trackRecordTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UpdateTrackPayloadQueryBuilder ExceptTrackRecord()
        {
            return ExceptField("trackRecord");
        }
    }

    public class ValidateBackupResultQueryBuilder : GraphQlQueryBuilder<ValidateBackupResultQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "missingSources", IsComplex = true, QueryBuilderType = typeof(ValidateBackupSourceQueryBuilder) }
            };

        protected override string TypeName { get { return "ValidateBackupResult"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ValidateBackupResultQueryBuilder WithMissingSources(ValidateBackupSourceQueryBuilder validateBackupSourceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("missingSources", alias, validateBackupSourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ValidateBackupResultQueryBuilder ExceptMissingSources()
        {
            return ExceptField("missingSources");
        }
    }

    public class ValidateBackupSourceQueryBuilder : GraphQlQueryBuilder<ValidateBackupSourceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id", IsComplex = true },
                new GraphQlFieldMetadata { Name = "name" }
            };

        protected override string TypeName { get { return "ValidateBackupSource"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ValidateBackupSourceQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ValidateBackupSourceQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ValidateBackupSourceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ValidateBackupSourceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }
    }

    public class WebUiUpdateCheckQueryBuilder : GraphQlQueryBuilder<WebUiUpdateCheckQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "channel" },
                new GraphQlFieldMetadata { Name = "tag" },
                new GraphQlFieldMetadata { Name = "updateAvailable" }
            };

        protected override string TypeName { get { return "WebUIUpdateCheck"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public WebUiUpdateCheckQueryBuilder WithChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channel", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateCheckQueryBuilder ExceptChannel()
        {
            return ExceptField("channel");
        }

        public WebUiUpdateCheckQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateCheckQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public WebUiUpdateCheckQueryBuilder WithUpdateAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updateAvailable", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateCheckQueryBuilder ExceptUpdateAvailable()
        {
            return ExceptField("updateAvailable");
        }
    }

    public class WebUiUpdateInfoQueryBuilder : GraphQlQueryBuilder<WebUiUpdateInfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "channel" },
                new GraphQlFieldMetadata { Name = "tag" }
            };

        protected override string TypeName { get { return "WebUIUpdateInfo"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public WebUiUpdateInfoQueryBuilder WithChannel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("channel", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateInfoQueryBuilder ExceptChannel()
        {
            return ExceptField("channel");
        }

        public WebUiUpdateInfoQueryBuilder WithTag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tag", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateInfoQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }
    }

    public class WebUiUpdatePayloadQueryBuilder : GraphQlQueryBuilder<WebUiUpdatePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "clientMutationId" },
                new GraphQlFieldMetadata { Name = "updateStatus", IsComplex = true, QueryBuilderType = typeof(WebUiUpdateStatusQueryBuilder) }
            };

        protected override string TypeName { get { return "WebUIUpdatePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public WebUiUpdatePayloadQueryBuilder WithClientMutationId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("clientMutationId", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdatePayloadQueryBuilder ExceptClientMutationId()
        {
            return ExceptField("clientMutationId");
        }

        public WebUiUpdatePayloadQueryBuilder WithUpdateStatus(WebUiUpdateStatusQueryBuilder webUiUpdateStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("updateStatus", alias, webUiUpdateStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdatePayloadQueryBuilder ExceptUpdateStatus()
        {
            return ExceptField("updateStatus");
        }
    }

    public class WebUiUpdateStatusQueryBuilder : GraphQlQueryBuilder<WebUiUpdateStatusQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "info", IsComplex = true, QueryBuilderType = typeof(WebUiUpdateInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "progress" },
                new GraphQlFieldMetadata { Name = "state" }
            };

        protected override string TypeName { get { return "WebUIUpdateStatus"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public WebUiUpdateStatusQueryBuilder WithInfo(WebUiUpdateInfoQueryBuilder webUiUpdateInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("info", alias, webUiUpdateInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateStatusQueryBuilder ExceptInfo()
        {
            return ExceptField("info");
        }

        public WebUiUpdateStatusQueryBuilder WithProgress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("progress", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateStatusQueryBuilder ExceptProgress()
        {
            return ExceptField("progress");
        }

        public WebUiUpdateStatusQueryBuilder WithState(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("state", alias, new GraphQlDirective[] { include, skip });
        }

        public WebUiUpdateStatusQueryBuilder ExceptState()
        {
            return ExceptField("state");
        }
    }
    #endregion

    #region input classes
    public class BindTrackInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _mangaId;
        private InputPropertyInfo _remoteId;
        private InputPropertyInfo _trackerId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MangaId
        {
            get { return (QueryBuilderParameter<int?>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> RemoteId
        {
            get { return (QueryBuilderParameter<object>)_remoteId.Value; }
            set { _remoteId = new InputPropertyInfo { Name = "remoteId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TrackerId
        {
            get { return (QueryBuilderParameter<int?>)_trackerId.Value; }
            set { _trackerId = new InputPropertyInfo { Name = "trackerId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_mangaId.Name != null) yield return _mangaId;
            if (_remoteId.Name != null) yield return _remoteId;
            if (_trackerId.Name != null) yield return _trackerId;
        }
    }

    public class BooleanFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _distinctFrom;
        private InputPropertyInfo _equalTo;
        private InputPropertyInfo _greaterThan;
        private InputPropertyInfo _greaterThanOrEqualTo;
        private InputPropertyInfo _in;
        private InputPropertyInfo _isNull;
        private InputPropertyInfo _lessThan;
        private InputPropertyInfo _lessThanOrEqualTo;
        private InputPropertyInfo _notDistinctFrom;
        private InputPropertyInfo _notEqualTo;
        private InputPropertyInfo _notIn;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DistinctFrom
        {
            get { return (QueryBuilderParameter<bool?>)_distinctFrom.Value; }
            set { _distinctFrom = new InputPropertyInfo { Name = "distinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> EqualTo
        {
            get { return (QueryBuilderParameter<bool?>)_equalTo.Value; }
            set { _equalTo = new InputPropertyInfo { Name = "equalTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> GreaterThan
        {
            get { return (QueryBuilderParameter<bool?>)_greaterThan.Value; }
            set { _greaterThan = new InputPropertyInfo { Name = "greaterThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> GreaterThanOrEqualTo
        {
            get { return (QueryBuilderParameter<bool?>)_greaterThanOrEqualTo.Value; }
            set { _greaterThanOrEqualTo = new InputPropertyInfo { Name = "greaterThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<bool>>))]
        #endif
        public QueryBuilderParameter<ICollection<bool>> In
        {
            get { return (QueryBuilderParameter<ICollection<bool>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNull
        {
            get { return (QueryBuilderParameter<bool?>)_isNull.Value; }
            set { _isNull = new InputPropertyInfo { Name = "isNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> LessThan
        {
            get { return (QueryBuilderParameter<bool?>)_lessThan.Value; }
            set { _lessThan = new InputPropertyInfo { Name = "lessThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> LessThanOrEqualTo
        {
            get { return (QueryBuilderParameter<bool?>)_lessThanOrEqualTo.Value; }
            set { _lessThanOrEqualTo = new InputPropertyInfo { Name = "lessThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotDistinctFrom
        {
            get { return (QueryBuilderParameter<bool?>)_notDistinctFrom.Value; }
            set { _notDistinctFrom = new InputPropertyInfo { Name = "notDistinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotEqualTo
        {
            get { return (QueryBuilderParameter<bool?>)_notEqualTo.Value; }
            set { _notEqualTo = new InputPropertyInfo { Name = "notEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<bool>>))]
        #endif
        public QueryBuilderParameter<ICollection<bool>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<bool>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_distinctFrom.Name != null) yield return _distinctFrom;
            if (_equalTo.Name != null) yield return _equalTo;
            if (_greaterThan.Name != null) yield return _greaterThan;
            if (_greaterThanOrEqualTo.Name != null) yield return _greaterThanOrEqualTo;
            if (_in.Name != null) yield return _in;
            if (_isNull.Name != null) yield return _isNull;
            if (_lessThan.Name != null) yield return _lessThan;
            if (_lessThanOrEqualTo.Name != null) yield return _lessThanOrEqualTo;
            if (_notDistinctFrom.Name != null) yield return _notDistinctFrom;
            if (_notEqualTo.Name != null) yield return _notEqualTo;
            if (_notIn.Name != null) yield return _notIn;
        }
    }

    public class CategoryConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _default;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _order;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Default
        {
            get { return (QueryBuilderParameter<bool?>)_default.Value; }
            set { _default = new InputPropertyInfo { Name = "default", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Order
        {
            get { return (QueryBuilderParameter<int?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_default.Name != null) yield return _default;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_order.Name != null) yield return _order;
        }
    }

    public class CategoryFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _default;
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _order;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CategoryFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<CategoryFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<CategoryFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Default
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_default.Value; }
            set { _default = new InputPropertyInfo { Name = "default", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Id
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CategoryFilterInput>))]
        #endif
        public QueryBuilderParameter<CategoryFilterInput> Not
        {
            get { return (QueryBuilderParameter<CategoryFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CategoryFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<CategoryFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<CategoryFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Order
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_default.Name != null) yield return _default;
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_order.Name != null) yield return _order;
        }
    }

    public class CategoryMetaTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _categoryId;
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> CategoryId
        {
            get { return (QueryBuilderParameter<int?>)_categoryId.Value; }
            set { _categoryId = new InputPropertyInfo { Name = "categoryId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_categoryId.Name != null) yield return _categoryId;
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class ChapterConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _chapterNumber;
        private InputPropertyInfo _fetchedAt;
        private InputPropertyInfo _id;
        private InputPropertyInfo _isBookmarked;
        private InputPropertyInfo _isDownloaded;
        private InputPropertyInfo _isRead;
        private InputPropertyInfo _lastPageRead;
        private InputPropertyInfo _lastReadAt;
        private InputPropertyInfo _mangaId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _pageCount;
        private InputPropertyInfo _realUrl;
        private InputPropertyInfo _scanlator;
        private InputPropertyInfo _sourceOrder;
        private InputPropertyInfo _uploadDate;
        private InputPropertyInfo _url;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> ChapterNumber
        {
            get { return (QueryBuilderParameter<decimal?>)_chapterNumber.Value; }
            set { _chapterNumber = new InputPropertyInfo { Name = "chapterNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> FetchedAt
        {
            get { return (QueryBuilderParameter<object>)_fetchedAt.Value; }
            set { _fetchedAt = new InputPropertyInfo { Name = "fetchedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsBookmarked
        {
            get { return (QueryBuilderParameter<bool?>)_isBookmarked.Value; }
            set { _isBookmarked = new InputPropertyInfo { Name = "isBookmarked", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsDownloaded
        {
            get { return (QueryBuilderParameter<bool?>)_isDownloaded.Value; }
            set { _isDownloaded = new InputPropertyInfo { Name = "isDownloaded", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRead
        {
            get { return (QueryBuilderParameter<bool?>)_isRead.Value; }
            set { _isRead = new InputPropertyInfo { Name = "isRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LastPageRead
        {
            get { return (QueryBuilderParameter<int?>)_lastPageRead.Value; }
            set { _lastPageRead = new InputPropertyInfo { Name = "lastPageRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> LastReadAt
        {
            get { return (QueryBuilderParameter<object>)_lastReadAt.Value; }
            set { _lastReadAt = new InputPropertyInfo { Name = "lastReadAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MangaId
        {
            get { return (QueryBuilderParameter<int?>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> PageCount
        {
            get { return (QueryBuilderParameter<int?>)_pageCount.Value; }
            set { _pageCount = new InputPropertyInfo { Name = "pageCount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> RealUrl
        {
            get { return (QueryBuilderParameter<string>)_realUrl.Value; }
            set { _realUrl = new InputPropertyInfo { Name = "realUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Scanlator
        {
            get { return (QueryBuilderParameter<string>)_scanlator.Value; }
            set { _scanlator = new InputPropertyInfo { Name = "scanlator", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> SourceOrder
        {
            get { return (QueryBuilderParameter<int?>)_sourceOrder.Value; }
            set { _sourceOrder = new InputPropertyInfo { Name = "sourceOrder", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> UploadDate
        {
            get { return (QueryBuilderParameter<object>)_uploadDate.Value; }
            set { _uploadDate = new InputPropertyInfo { Name = "uploadDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_chapterNumber.Name != null) yield return _chapterNumber;
            if (_fetchedAt.Name != null) yield return _fetchedAt;
            if (_id.Name != null) yield return _id;
            if (_isBookmarked.Name != null) yield return _isBookmarked;
            if (_isDownloaded.Name != null) yield return _isDownloaded;
            if (_isRead.Name != null) yield return _isRead;
            if (_lastPageRead.Name != null) yield return _lastPageRead;
            if (_lastReadAt.Name != null) yield return _lastReadAt;
            if (_mangaId.Name != null) yield return _mangaId;
            if (_name.Name != null) yield return _name;
            if (_pageCount.Name != null) yield return _pageCount;
            if (_realUrl.Name != null) yield return _realUrl;
            if (_scanlator.Name != null) yield return _scanlator;
            if (_sourceOrder.Name != null) yield return _sourceOrder;
            if (_uploadDate.Name != null) yield return _uploadDate;
            if (_url.Name != null) yield return _url;
        }
    }

    public class ChapterFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _chapterNumber;
        private InputPropertyInfo _fetchedAt;
        private InputPropertyInfo _id;
        private InputPropertyInfo _inLibrary;
        private InputPropertyInfo _isBookmarked;
        private InputPropertyInfo _isDownloaded;
        private InputPropertyInfo _isRead;
        private InputPropertyInfo _lastPageRead;
        private InputPropertyInfo _lastReadAt;
        private InputPropertyInfo _mangaId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _pageCount;
        private InputPropertyInfo _realUrl;
        private InputPropertyInfo _scanlator;
        private InputPropertyInfo _sourceOrder;
        private InputPropertyInfo _uploadDate;
        private InputPropertyInfo _url;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ChapterFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ChapterFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ChapterFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> ChapterNumber
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_chapterNumber.Value; }
            set { _chapterNumber = new InputPropertyInfo { Name = "chapterNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> FetchedAt
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_fetchedAt.Value; }
            set { _fetchedAt = new InputPropertyInfo { Name = "fetchedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Id
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> InLibrary
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_inLibrary.Value; }
            set { _inLibrary = new InputPropertyInfo { Name = "inLibrary", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsBookmarked
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isBookmarked.Value; }
            set { _isBookmarked = new InputPropertyInfo { Name = "isBookmarked", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsDownloaded
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isDownloaded.Value; }
            set { _isDownloaded = new InputPropertyInfo { Name = "isDownloaded", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsRead
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isRead.Value; }
            set { _isRead = new InputPropertyInfo { Name = "isRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> LastPageRead
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_lastPageRead.Value; }
            set { _lastPageRead = new InputPropertyInfo { Name = "lastPageRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> LastReadAt
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_lastReadAt.Value; }
            set { _lastReadAt = new InputPropertyInfo { Name = "lastReadAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> MangaId
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChapterFilterInput>))]
        #endif
        public QueryBuilderParameter<ChapterFilterInput> Not
        {
            get { return (QueryBuilderParameter<ChapterFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ChapterFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ChapterFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ChapterFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> PageCount
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_pageCount.Value; }
            set { _pageCount = new InputPropertyInfo { Name = "pageCount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> RealUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_realUrl.Value; }
            set { _realUrl = new InputPropertyInfo { Name = "realUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Scanlator
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_scanlator.Value; }
            set { _scanlator = new InputPropertyInfo { Name = "scanlator", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> SourceOrder
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_sourceOrder.Value; }
            set { _sourceOrder = new InputPropertyInfo { Name = "sourceOrder", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> UploadDate
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_uploadDate.Value; }
            set { _uploadDate = new InputPropertyInfo { Name = "uploadDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_chapterNumber.Name != null) yield return _chapterNumber;
            if (_fetchedAt.Name != null) yield return _fetchedAt;
            if (_id.Name != null) yield return _id;
            if (_inLibrary.Name != null) yield return _inLibrary;
            if (_isBookmarked.Name != null) yield return _isBookmarked;
            if (_isDownloaded.Name != null) yield return _isDownloaded;
            if (_isRead.Name != null) yield return _isRead;
            if (_lastPageRead.Name != null) yield return _lastPageRead;
            if (_lastReadAt.Name != null) yield return _lastReadAt;
            if (_mangaId.Name != null) yield return _mangaId;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_pageCount.Name != null) yield return _pageCount;
            if (_realUrl.Name != null) yield return _realUrl;
            if (_scanlator.Name != null) yield return _scanlator;
            if (_sourceOrder.Name != null) yield return _sourceOrder;
            if (_uploadDate.Name != null) yield return _uploadDate;
            if (_url.Name != null) yield return _url;
        }
    }

    public class ChapterMetaTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _chapterId;
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ChapterId
        {
            get { return (QueryBuilderParameter<int?>)_chapterId.Value; }
            set { _chapterId = new InputPropertyInfo { Name = "chapterId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_chapterId.Name != null) yield return _chapterId;
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class ClearCachedImagesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _cachedPages;
        private InputPropertyInfo _cachedThumbnails;
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _downloadedThumbnails;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> CachedPages
        {
            get { return (QueryBuilderParameter<bool?>)_cachedPages.Value; }
            set { _cachedPages = new InputPropertyInfo { Name = "cachedPages", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> CachedThumbnails
        {
            get { return (QueryBuilderParameter<bool?>)_cachedThumbnails.Value; }
            set { _cachedThumbnails = new InputPropertyInfo { Name = "cachedThumbnails", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DownloadedThumbnails
        {
            get { return (QueryBuilderParameter<bool?>)_downloadedThumbnails.Value; }
            set { _downloadedThumbnails = new InputPropertyInfo { Name = "downloadedThumbnails", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_cachedPages.Name != null) yield return _cachedPages;
            if (_cachedThumbnails.Name != null) yield return _cachedThumbnails;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_downloadedThumbnails.Name != null) yield return _downloadedThumbnails;
        }
    }

    public class ClearDownloaderInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class CreateBackupInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _includeCategories;
        private InputPropertyInfo _includeChapters;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IncludeCategories
        {
            get { return (QueryBuilderParameter<bool?>)_includeCategories.Value; }
            set { _includeCategories = new InputPropertyInfo { Name = "includeCategories", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IncludeChapters
        {
            get { return (QueryBuilderParameter<bool?>)_includeChapters.Value; }
            set { _includeChapters = new InputPropertyInfo { Name = "includeChapters", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_includeCategories.Name != null) yield return _includeCategories;
            if (_includeChapters.Name != null) yield return _includeChapters;
        }
    }

    public class CreateCategoryInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _default;
        private InputPropertyInfo _includeInDownload;
        private InputPropertyInfo _includeInUpdate;
        private InputPropertyInfo _name;
        private InputPropertyInfo _order;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Default
        {
            get { return (QueryBuilderParameter<bool?>)_default.Value; }
            set { _default = new InputPropertyInfo { Name = "default", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IncludeOrExclude?>))]
        #endif
        public QueryBuilderParameter<IncludeOrExclude?> IncludeInDownload
        {
            get { return (QueryBuilderParameter<IncludeOrExclude?>)_includeInDownload.Value; }
            set { _includeInDownload = new InputPropertyInfo { Name = "includeInDownload", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IncludeOrExclude?>))]
        #endif
        public QueryBuilderParameter<IncludeOrExclude?> IncludeInUpdate
        {
            get { return (QueryBuilderParameter<IncludeOrExclude?>)_includeInUpdate.Value; }
            set { _includeInUpdate = new InputPropertyInfo { Name = "includeInUpdate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Order
        {
            get { return (QueryBuilderParameter<int?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_default.Name != null) yield return _default;
            if (_includeInDownload.Name != null) yield return _includeInDownload;
            if (_includeInUpdate.Name != null) yield return _includeInUpdate;
            if (_name.Name != null) yield return _name;
            if (_order.Name != null) yield return _order;
        }
    }

    public class DeleteCategoryInput : IGraphQlInputObject
    {
        private InputPropertyInfo _categoryId;
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> CategoryId
        {
            get { return (QueryBuilderParameter<int?>)_categoryId.Value; }
            set { _categoryId = new InputPropertyInfo { Name = "categoryId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_categoryId.Name != null) yield return _categoryId;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class DeleteCategoryMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _categoryId;
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _key;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> CategoryId
        {
            get { return (QueryBuilderParameter<int?>)_categoryId.Value; }
            set { _categoryId = new InputPropertyInfo { Name = "categoryId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_categoryId.Name != null) yield return _categoryId;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_key.Name != null) yield return _key;
        }
    }

    public class DeleteChapterMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _chapterId;
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _key;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ChapterId
        {
            get { return (QueryBuilderParameter<int?>)_chapterId.Value; }
            set { _chapterId = new InputPropertyInfo { Name = "chapterId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_chapterId.Name != null) yield return _chapterId;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_key.Name != null) yield return _key;
        }
    }

    public class DeleteDownloadedChapterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
        }
    }

    public class DeleteDownloadedChaptersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
        }
    }

    public class DeleteGlobalMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _key;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_key.Name != null) yield return _key;
        }
    }

    public class DeleteMangaMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _key;
        private InputPropertyInfo _mangaId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MangaId
        {
            get { return (QueryBuilderParameter<int?>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_key.Name != null) yield return _key;
            if (_mangaId.Name != null) yield return _mangaId;
        }
    }

    public class DeleteSourceMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _key;
        private InputPropertyInfo _sourceId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> SourceId
        {
            get { return (QueryBuilderParameter<object>)_sourceId.Value; }
            set { _sourceId = new InputPropertyInfo { Name = "sourceId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_key.Name != null) yield return _key;
            if (_sourceId.Name != null) yield return _sourceId;
        }
    }

    public class DequeueChapterDownloadInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
        }
    }

    public class DequeueChapterDownloadsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
        }
    }

    public class DoubleFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _distinctFrom;
        private InputPropertyInfo _equalTo;
        private InputPropertyInfo _greaterThan;
        private InputPropertyInfo _greaterThanOrEqualTo;
        private InputPropertyInfo _in;
        private InputPropertyInfo _isNull;
        private InputPropertyInfo _lessThan;
        private InputPropertyInfo _lessThanOrEqualTo;
        private InputPropertyInfo _notDistinctFrom;
        private InputPropertyInfo _notEqualTo;
        private InputPropertyInfo _notIn;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> DistinctFrom
        {
            get { return (QueryBuilderParameter<decimal?>)_distinctFrom.Value; }
            set { _distinctFrom = new InputPropertyInfo { Name = "distinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> EqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_equalTo.Value; }
            set { _equalTo = new InputPropertyInfo { Name = "equalTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> GreaterThan
        {
            get { return (QueryBuilderParameter<decimal?>)_greaterThan.Value; }
            set { _greaterThan = new InputPropertyInfo { Name = "greaterThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> GreaterThanOrEqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_greaterThanOrEqualTo.Value; }
            set { _greaterThanOrEqualTo = new InputPropertyInfo { Name = "greaterThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal>> In
        {
            get { return (QueryBuilderParameter<ICollection<decimal>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNull
        {
            get { return (QueryBuilderParameter<bool?>)_isNull.Value; }
            set { _isNull = new InputPropertyInfo { Name = "isNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> LessThan
        {
            get { return (QueryBuilderParameter<decimal?>)_lessThan.Value; }
            set { _lessThan = new InputPropertyInfo { Name = "lessThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> LessThanOrEqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_lessThanOrEqualTo.Value; }
            set { _lessThanOrEqualTo = new InputPropertyInfo { Name = "lessThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> NotDistinctFrom
        {
            get { return (QueryBuilderParameter<decimal?>)_notDistinctFrom.Value; }
            set { _notDistinctFrom = new InputPropertyInfo { Name = "notDistinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> NotEqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_notEqualTo.Value; }
            set { _notEqualTo = new InputPropertyInfo { Name = "notEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<decimal>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_distinctFrom.Name != null) yield return _distinctFrom;
            if (_equalTo.Name != null) yield return _equalTo;
            if (_greaterThan.Name != null) yield return _greaterThan;
            if (_greaterThanOrEqualTo.Name != null) yield return _greaterThanOrEqualTo;
            if (_in.Name != null) yield return _in;
            if (_isNull.Name != null) yield return _isNull;
            if (_lessThan.Name != null) yield return _lessThan;
            if (_lessThanOrEqualTo.Name != null) yield return _lessThanOrEqualTo;
            if (_notDistinctFrom.Name != null) yield return _notDistinctFrom;
            if (_notEqualTo.Name != null) yield return _notEqualTo;
            if (_notIn.Name != null) yield return _notIn;
        }
    }

    public class EnqueueChapterDownloadInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
        }
    }

    public class EnqueueChapterDownloadsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
        }
    }

    public class ExtensionConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _apkName;
        private InputPropertyInfo _hasUpdate;
        private InputPropertyInfo _iconUrl;
        private InputPropertyInfo _isInstalled;
        private InputPropertyInfo _isNsfw;
        private InputPropertyInfo _isObsolete;
        private InputPropertyInfo _lang;
        private InputPropertyInfo _name;
        private InputPropertyInfo _pkgName;
        private InputPropertyInfo _repo;
        private InputPropertyInfo _versionCode;
        private InputPropertyInfo _versionName;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ApkName
        {
            get { return (QueryBuilderParameter<string>)_apkName.Value; }
            set { _apkName = new InputPropertyInfo { Name = "apkName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> HasUpdate
        {
            get { return (QueryBuilderParameter<bool?>)_hasUpdate.Value; }
            set { _hasUpdate = new InputPropertyInfo { Name = "hasUpdate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IconUrl
        {
            get { return (QueryBuilderParameter<string>)_iconUrl.Value; }
            set { _iconUrl = new InputPropertyInfo { Name = "iconUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsInstalled
        {
            get { return (QueryBuilderParameter<bool?>)_isInstalled.Value; }
            set { _isInstalled = new InputPropertyInfo { Name = "isInstalled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNsfw
        {
            get { return (QueryBuilderParameter<bool?>)_isNsfw.Value; }
            set { _isNsfw = new InputPropertyInfo { Name = "isNsfw", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsObsolete
        {
            get { return (QueryBuilderParameter<bool?>)_isObsolete.Value; }
            set { _isObsolete = new InputPropertyInfo { Name = "isObsolete", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Lang
        {
            get { return (QueryBuilderParameter<string>)_lang.Value; }
            set { _lang = new InputPropertyInfo { Name = "lang", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PkgName
        {
            get { return (QueryBuilderParameter<string>)_pkgName.Value; }
            set { _pkgName = new InputPropertyInfo { Name = "pkgName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Repo
        {
            get { return (QueryBuilderParameter<string>)_repo.Value; }
            set { _repo = new InputPropertyInfo { Name = "repo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> VersionCode
        {
            get { return (QueryBuilderParameter<int?>)_versionCode.Value; }
            set { _versionCode = new InputPropertyInfo { Name = "versionCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> VersionName
        {
            get { return (QueryBuilderParameter<string>)_versionName.Value; }
            set { _versionName = new InputPropertyInfo { Name = "versionName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_apkName.Name != null) yield return _apkName;
            if (_hasUpdate.Name != null) yield return _hasUpdate;
            if (_iconUrl.Name != null) yield return _iconUrl;
            if (_isInstalled.Name != null) yield return _isInstalled;
            if (_isNsfw.Name != null) yield return _isNsfw;
            if (_isObsolete.Name != null) yield return _isObsolete;
            if (_lang.Name != null) yield return _lang;
            if (_name.Name != null) yield return _name;
            if (_pkgName.Name != null) yield return _pkgName;
            if (_repo.Name != null) yield return _repo;
            if (_versionCode.Name != null) yield return _versionCode;
            if (_versionName.Name != null) yield return _versionName;
        }
    }

    public class ExtensionFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _apkName;
        private InputPropertyInfo _hasUpdate;
        private InputPropertyInfo _iconUrl;
        private InputPropertyInfo _isInstalled;
        private InputPropertyInfo _isNsfw;
        private InputPropertyInfo _isObsolete;
        private InputPropertyInfo _lang;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _pkgName;
        private InputPropertyInfo _repo;
        private InputPropertyInfo _versionCode;
        private InputPropertyInfo _versionName;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ExtensionFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ExtensionFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ExtensionFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ApkName
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_apkName.Value; }
            set { _apkName = new InputPropertyInfo { Name = "apkName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> HasUpdate
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_hasUpdate.Value; }
            set { _hasUpdate = new InputPropertyInfo { Name = "hasUpdate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> IconUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_iconUrl.Value; }
            set { _iconUrl = new InputPropertyInfo { Name = "iconUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsInstalled
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isInstalled.Value; }
            set { _isInstalled = new InputPropertyInfo { Name = "isInstalled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsNsfw
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isNsfw.Value; }
            set { _isNsfw = new InputPropertyInfo { Name = "isNsfw", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsObsolete
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isObsolete.Value; }
            set { _isObsolete = new InputPropertyInfo { Name = "isObsolete", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Lang
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_lang.Value; }
            set { _lang = new InputPropertyInfo { Name = "lang", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ExtensionFilterInput>))]
        #endif
        public QueryBuilderParameter<ExtensionFilterInput> Not
        {
            get { return (QueryBuilderParameter<ExtensionFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ExtensionFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ExtensionFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ExtensionFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> PkgName
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_pkgName.Value; }
            set { _pkgName = new InputPropertyInfo { Name = "pkgName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Repo
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_repo.Value; }
            set { _repo = new InputPropertyInfo { Name = "repo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> VersionCode
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_versionCode.Value; }
            set { _versionCode = new InputPropertyInfo { Name = "versionCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> VersionName
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_versionName.Value; }
            set { _versionName = new InputPropertyInfo { Name = "versionName", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_apkName.Name != null) yield return _apkName;
            if (_hasUpdate.Name != null) yield return _hasUpdate;
            if (_iconUrl.Name != null) yield return _iconUrl;
            if (_isInstalled.Name != null) yield return _isInstalled;
            if (_isNsfw.Name != null) yield return _isNsfw;
            if (_isObsolete.Name != null) yield return _isObsolete;
            if (_lang.Name != null) yield return _lang;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_pkgName.Name != null) yield return _pkgName;
            if (_repo.Name != null) yield return _repo;
            if (_versionCode.Name != null) yield return _versionCode;
            if (_versionName.Name != null) yield return _versionName;
        }
    }

    public class FetchChapterPagesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _chapterId;
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ChapterId
        {
            get { return (QueryBuilderParameter<int?>)_chapterId.Value; }
            set { _chapterId = new InputPropertyInfo { Name = "chapterId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_chapterId.Name != null) yield return _chapterId;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class FetchChaptersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _mangaId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MangaId
        {
            get { return (QueryBuilderParameter<int?>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_mangaId.Name != null) yield return _mangaId;
        }
    }

    public class FetchExtensionsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class FetchMangaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
        }
    }

    public class FetchSourceMangaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _filters;
        private InputPropertyInfo _page;
        private InputPropertyInfo _query;
        private InputPropertyInfo _source;
        private InputPropertyInfo _type;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<FilterChangeInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<FilterChangeInput>> Filters
        {
            get { return (QueryBuilderParameter<ICollection<FilterChangeInput>>)_filters.Value; }
            set { _filters = new InputPropertyInfo { Name = "filters", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Page
        {
            get { return (QueryBuilderParameter<int?>)_page.Value; }
            set { _page = new InputPropertyInfo { Name = "page", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Query
        {
            get { return (QueryBuilderParameter<string>)_query.Value; }
            set { _query = new InputPropertyInfo { Name = "query", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Source
        {
            get { return (QueryBuilderParameter<object>)_source.Value; }
            set { _source = new InputPropertyInfo { Name = "source", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FetchSourceMangaType?>))]
        #endif
        public QueryBuilderParameter<FetchSourceMangaType?> Type
        {
            get { return (QueryBuilderParameter<FetchSourceMangaType?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_filters.Name != null) yield return _filters;
            if (_page.Name != null) yield return _page;
            if (_query.Name != null) yield return _query;
            if (_source.Name != null) yield return _source;
            if (_type.Name != null) yield return _type;
        }
    }

    public class FilterChangeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _checkBoxState;
        private InputPropertyInfo _groupChange;
        private InputPropertyInfo _position;
        private InputPropertyInfo _selectState;
        private InputPropertyInfo _sortState;
        private InputPropertyInfo _textState;
        private InputPropertyInfo _triState;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> CheckBoxState
        {
            get { return (QueryBuilderParameter<bool?>)_checkBoxState.Value; }
            set { _checkBoxState = new InputPropertyInfo { Name = "checkBoxState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FilterChangeInput>))]
        #endif
        public QueryBuilderParameter<FilterChangeInput> GroupChange
        {
            get { return (QueryBuilderParameter<FilterChangeInput>)_groupChange.Value; }
            set { _groupChange = new InputPropertyInfo { Name = "groupChange", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Position
        {
            get { return (QueryBuilderParameter<int?>)_position.Value; }
            set { _position = new InputPropertyInfo { Name = "position", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> SelectState
        {
            get { return (QueryBuilderParameter<int?>)_selectState.Value; }
            set { _selectState = new InputPropertyInfo { Name = "selectState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SortSelectionInput>))]
        #endif
        public QueryBuilderParameter<SortSelectionInput> SortState
        {
            get { return (QueryBuilderParameter<SortSelectionInput>)_sortState.Value; }
            set { _sortState = new InputPropertyInfo { Name = "sortState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TextState
        {
            get { return (QueryBuilderParameter<string>)_textState.Value; }
            set { _textState = new InputPropertyInfo { Name = "textState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TriState?>))]
        #endif
        public QueryBuilderParameter<TriState?> TriState
        {
            get { return (QueryBuilderParameter<TriState?>)_triState.Value; }
            set { _triState = new InputPropertyInfo { Name = "triState", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_checkBoxState.Name != null) yield return _checkBoxState;
            if (_groupChange.Name != null) yield return _groupChange;
            if (_position.Name != null) yield return _position;
            if (_selectState.Name != null) yield return _selectState;
            if (_sortState.Name != null) yield return _sortState;
            if (_textState.Name != null) yield return _textState;
            if (_triState.Name != null) yield return _triState;
        }
    }

    public class FloatFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _distinctFrom;
        private InputPropertyInfo _equalTo;
        private InputPropertyInfo _greaterThan;
        private InputPropertyInfo _greaterThanOrEqualTo;
        private InputPropertyInfo _in;
        private InputPropertyInfo _isNull;
        private InputPropertyInfo _lessThan;
        private InputPropertyInfo _lessThanOrEqualTo;
        private InputPropertyInfo _notDistinctFrom;
        private InputPropertyInfo _notEqualTo;
        private InputPropertyInfo _notIn;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> DistinctFrom
        {
            get { return (QueryBuilderParameter<decimal?>)_distinctFrom.Value; }
            set { _distinctFrom = new InputPropertyInfo { Name = "distinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> EqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_equalTo.Value; }
            set { _equalTo = new InputPropertyInfo { Name = "equalTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> GreaterThan
        {
            get { return (QueryBuilderParameter<decimal?>)_greaterThan.Value; }
            set { _greaterThan = new InputPropertyInfo { Name = "greaterThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> GreaterThanOrEqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_greaterThanOrEqualTo.Value; }
            set { _greaterThanOrEqualTo = new InputPropertyInfo { Name = "greaterThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal>> In
        {
            get { return (QueryBuilderParameter<ICollection<decimal>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNull
        {
            get { return (QueryBuilderParameter<bool?>)_isNull.Value; }
            set { _isNull = new InputPropertyInfo { Name = "isNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> LessThan
        {
            get { return (QueryBuilderParameter<decimal?>)_lessThan.Value; }
            set { _lessThan = new InputPropertyInfo { Name = "lessThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> LessThanOrEqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_lessThanOrEqualTo.Value; }
            set { _lessThanOrEqualTo = new InputPropertyInfo { Name = "lessThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> NotDistinctFrom
        {
            get { return (QueryBuilderParameter<decimal?>)_notDistinctFrom.Value; }
            set { _notDistinctFrom = new InputPropertyInfo { Name = "notDistinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> NotEqualTo
        {
            get { return (QueryBuilderParameter<decimal?>)_notEqualTo.Value; }
            set { _notEqualTo = new InputPropertyInfo { Name = "notEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<decimal>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_distinctFrom.Name != null) yield return _distinctFrom;
            if (_equalTo.Name != null) yield return _equalTo;
            if (_greaterThan.Name != null) yield return _greaterThan;
            if (_greaterThanOrEqualTo.Name != null) yield return _greaterThanOrEqualTo;
            if (_in.Name != null) yield return _in;
            if (_isNull.Name != null) yield return _isNull;
            if (_lessThan.Name != null) yield return _lessThan;
            if (_lessThanOrEqualTo.Name != null) yield return _lessThanOrEqualTo;
            if (_notDistinctFrom.Name != null) yield return _notDistinctFrom;
            if (_notEqualTo.Name != null) yield return _notEqualTo;
            if (_notIn.Name != null) yield return _notIn;
        }
    }

    public class GlobalMetaTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class InstallExternalExtensionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _extensionFile;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> ExtensionFile
        {
            get { return (QueryBuilderParameter<object>)_extensionFile.Value; }
            set { _extensionFile = new InputPropertyInfo { Name = "extensionFile", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_extensionFile.Name != null) yield return _extensionFile;
        }
    }

    public class IntFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _distinctFrom;
        private InputPropertyInfo _equalTo;
        private InputPropertyInfo _greaterThan;
        private InputPropertyInfo _greaterThanOrEqualTo;
        private InputPropertyInfo _in;
        private InputPropertyInfo _isNull;
        private InputPropertyInfo _lessThan;
        private InputPropertyInfo _lessThanOrEqualTo;
        private InputPropertyInfo _notDistinctFrom;
        private InputPropertyInfo _notEqualTo;
        private InputPropertyInfo _notIn;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> DistinctFrom
        {
            get { return (QueryBuilderParameter<int?>)_distinctFrom.Value; }
            set { _distinctFrom = new InputPropertyInfo { Name = "distinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> EqualTo
        {
            get { return (QueryBuilderParameter<int?>)_equalTo.Value; }
            set { _equalTo = new InputPropertyInfo { Name = "equalTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> GreaterThan
        {
            get { return (QueryBuilderParameter<int?>)_greaterThan.Value; }
            set { _greaterThan = new InputPropertyInfo { Name = "greaterThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> GreaterThanOrEqualTo
        {
            get { return (QueryBuilderParameter<int?>)_greaterThanOrEqualTo.Value; }
            set { _greaterThanOrEqualTo = new InputPropertyInfo { Name = "greaterThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> In
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNull
        {
            get { return (QueryBuilderParameter<bool?>)_isNull.Value; }
            set { _isNull = new InputPropertyInfo { Name = "isNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LessThan
        {
            get { return (QueryBuilderParameter<int?>)_lessThan.Value; }
            set { _lessThan = new InputPropertyInfo { Name = "lessThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LessThanOrEqualTo
        {
            get { return (QueryBuilderParameter<int?>)_lessThanOrEqualTo.Value; }
            set { _lessThanOrEqualTo = new InputPropertyInfo { Name = "lessThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> NotDistinctFrom
        {
            get { return (QueryBuilderParameter<int?>)_notDistinctFrom.Value; }
            set { _notDistinctFrom = new InputPropertyInfo { Name = "notDistinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> NotEqualTo
        {
            get { return (QueryBuilderParameter<int?>)_notEqualTo.Value; }
            set { _notEqualTo = new InputPropertyInfo { Name = "notEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_distinctFrom.Name != null) yield return _distinctFrom;
            if (_equalTo.Name != null) yield return _equalTo;
            if (_greaterThan.Name != null) yield return _greaterThan;
            if (_greaterThanOrEqualTo.Name != null) yield return _greaterThanOrEqualTo;
            if (_in.Name != null) yield return _in;
            if (_isNull.Name != null) yield return _isNull;
            if (_lessThan.Name != null) yield return _lessThan;
            if (_lessThanOrEqualTo.Name != null) yield return _lessThanOrEqualTo;
            if (_notDistinctFrom.Name != null) yield return _notDistinctFrom;
            if (_notEqualTo.Name != null) yield return _notEqualTo;
            if (_notIn.Name != null) yield return _notIn;
        }
    }

    public class LoginTrackerCredentialsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _password;
        private InputPropertyInfo _trackerId;
        private InputPropertyInfo _username;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TrackerId
        {
            get { return (QueryBuilderParameter<int?>)_trackerId.Value; }
            set { _trackerId = new InputPropertyInfo { Name = "trackerId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Username
        {
            get { return (QueryBuilderParameter<string>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_password.Name != null) yield return _password;
            if (_trackerId.Name != null) yield return _trackerId;
            if (_username.Name != null) yield return _username;
        }
    }

    public class LoginTrackerOAuthInput : IGraphQlInputObject
    {
        private InputPropertyInfo _callbackUrl;
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _trackerId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CallbackUrl
        {
            get { return (QueryBuilderParameter<string>)_callbackUrl.Value; }
            set { _callbackUrl = new InputPropertyInfo { Name = "callbackUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TrackerId
        {
            get { return (QueryBuilderParameter<int?>)_trackerId.Value; }
            set { _trackerId = new InputPropertyInfo { Name = "trackerId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_callbackUrl.Name != null) yield return _callbackUrl;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_trackerId.Name != null) yield return _trackerId;
        }
    }

    public class LogoutTrackerInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _trackerId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TrackerId
        {
            get { return (QueryBuilderParameter<int?>)_trackerId.Value; }
            set { _trackerId = new InputPropertyInfo { Name = "trackerId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_trackerId.Name != null) yield return _trackerId;
        }
    }

    public class LongFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _distinctFrom;
        private InputPropertyInfo _equalTo;
        private InputPropertyInfo _greaterThan;
        private InputPropertyInfo _greaterThanOrEqualTo;
        private InputPropertyInfo _in;
        private InputPropertyInfo _isNull;
        private InputPropertyInfo _lessThan;
        private InputPropertyInfo _lessThanOrEqualTo;
        private InputPropertyInfo _notDistinctFrom;
        private InputPropertyInfo _notEqualTo;
        private InputPropertyInfo _notIn;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> DistinctFrom
        {
            get { return (QueryBuilderParameter<object>)_distinctFrom.Value; }
            set { _distinctFrom = new InputPropertyInfo { Name = "distinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> EqualTo
        {
            get { return (QueryBuilderParameter<object>)_equalTo.Value; }
            set { _equalTo = new InputPropertyInfo { Name = "equalTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> GreaterThan
        {
            get { return (QueryBuilderParameter<object>)_greaterThan.Value; }
            set { _greaterThan = new InputPropertyInfo { Name = "greaterThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> GreaterThanOrEqualTo
        {
            get { return (QueryBuilderParameter<object>)_greaterThanOrEqualTo.Value; }
            set { _greaterThanOrEqualTo = new InputPropertyInfo { Name = "greaterThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
        #endif
        public QueryBuilderParameter<ICollection<object>> In
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNull
        {
            get { return (QueryBuilderParameter<bool?>)_isNull.Value; }
            set { _isNull = new InputPropertyInfo { Name = "isNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> LessThan
        {
            get { return (QueryBuilderParameter<object>)_lessThan.Value; }
            set { _lessThan = new InputPropertyInfo { Name = "lessThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> LessThanOrEqualTo
        {
            get { return (QueryBuilderParameter<object>)_lessThanOrEqualTo.Value; }
            set { _lessThanOrEqualTo = new InputPropertyInfo { Name = "lessThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> NotDistinctFrom
        {
            get { return (QueryBuilderParameter<object>)_notDistinctFrom.Value; }
            set { _notDistinctFrom = new InputPropertyInfo { Name = "notDistinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> NotEqualTo
        {
            get { return (QueryBuilderParameter<object>)_notEqualTo.Value; }
            set { _notEqualTo = new InputPropertyInfo { Name = "notEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
        #endif
        public QueryBuilderParameter<ICollection<object>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_distinctFrom.Name != null) yield return _distinctFrom;
            if (_equalTo.Name != null) yield return _equalTo;
            if (_greaterThan.Name != null) yield return _greaterThan;
            if (_greaterThanOrEqualTo.Name != null) yield return _greaterThanOrEqualTo;
            if (_in.Name != null) yield return _in;
            if (_isNull.Name != null) yield return _isNull;
            if (_lessThan.Name != null) yield return _lessThan;
            if (_lessThanOrEqualTo.Name != null) yield return _lessThanOrEqualTo;
            if (_notDistinctFrom.Name != null) yield return _notDistinctFrom;
            if (_notEqualTo.Name != null) yield return _notEqualTo;
            if (_notIn.Name != null) yield return _notIn;
        }
    }

    public class MangaConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _artist;
        private InputPropertyInfo _author;
        private InputPropertyInfo _categoryIds;
        private InputPropertyInfo _chaptersLastFetchedAt;
        private InputPropertyInfo _description;
        private InputPropertyInfo _genre;
        private InputPropertyInfo _id;
        private InputPropertyInfo _inLibrary;
        private InputPropertyInfo _inLibraryAt;
        private InputPropertyInfo _initialized;
        private InputPropertyInfo _lastFetchedAt;
        private InputPropertyInfo _realUrl;
        private InputPropertyInfo _sourceId;
        private InputPropertyInfo _status;
        private InputPropertyInfo _thumbnailUrl;
        private InputPropertyInfo _title;
        private InputPropertyInfo _url;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Artist
        {
            get { return (QueryBuilderParameter<string>)_artist.Value; }
            set { _artist = new InputPropertyInfo { Name = "artist", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Author
        {
            get { return (QueryBuilderParameter<string>)_author.Value; }
            set { _author = new InputPropertyInfo { Name = "author", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> CategoryIds
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_categoryIds.Value; }
            set { _categoryIds = new InputPropertyInfo { Name = "categoryIds", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> ChaptersLastFetchedAt
        {
            get { return (QueryBuilderParameter<object>)_chaptersLastFetchedAt.Value; }
            set { _chaptersLastFetchedAt = new InputPropertyInfo { Name = "chaptersLastFetchedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Genre
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_genre.Value; }
            set { _genre = new InputPropertyInfo { Name = "genre", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> InLibrary
        {
            get { return (QueryBuilderParameter<bool?>)_inLibrary.Value; }
            set { _inLibrary = new InputPropertyInfo { Name = "inLibrary", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> InLibraryAt
        {
            get { return (QueryBuilderParameter<object>)_inLibraryAt.Value; }
            set { _inLibraryAt = new InputPropertyInfo { Name = "inLibraryAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Initialized
        {
            get { return (QueryBuilderParameter<bool?>)_initialized.Value; }
            set { _initialized = new InputPropertyInfo { Name = "initialized", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> LastFetchedAt
        {
            get { return (QueryBuilderParameter<object>)_lastFetchedAt.Value; }
            set { _lastFetchedAt = new InputPropertyInfo { Name = "lastFetchedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> RealUrl
        {
            get { return (QueryBuilderParameter<string>)_realUrl.Value; }
            set { _realUrl = new InputPropertyInfo { Name = "realUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> SourceId
        {
            get { return (QueryBuilderParameter<object>)_sourceId.Value; }
            set { _sourceId = new InputPropertyInfo { Name = "sourceId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> Status
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ThumbnailUrl
        {
            get { return (QueryBuilderParameter<string>)_thumbnailUrl.Value; }
            set { _thumbnailUrl = new InputPropertyInfo { Name = "thumbnailUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_artist.Name != null) yield return _artist;
            if (_author.Name != null) yield return _author;
            if (_categoryIds.Name != null) yield return _categoryIds;
            if (_chaptersLastFetchedAt.Name != null) yield return _chaptersLastFetchedAt;
            if (_description.Name != null) yield return _description;
            if (_genre.Name != null) yield return _genre;
            if (_id.Name != null) yield return _id;
            if (_inLibrary.Name != null) yield return _inLibrary;
            if (_inLibraryAt.Name != null) yield return _inLibraryAt;
            if (_initialized.Name != null) yield return _initialized;
            if (_lastFetchedAt.Name != null) yield return _lastFetchedAt;
            if (_realUrl.Name != null) yield return _realUrl;
            if (_sourceId.Name != null) yield return _sourceId;
            if (_status.Name != null) yield return _status;
            if (_thumbnailUrl.Name != null) yield return _thumbnailUrl;
            if (_title.Name != null) yield return _title;
            if (_url.Name != null) yield return _url;
        }
    }

    public class MangaFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _artist;
        private InputPropertyInfo _author;
        private InputPropertyInfo _categoryId;
        private InputPropertyInfo _chaptersLastFetchedAt;
        private InputPropertyInfo _description;
        private InputPropertyInfo _genre;
        private InputPropertyInfo _id;
        private InputPropertyInfo _inLibrary;
        private InputPropertyInfo _inLibraryAt;
        private InputPropertyInfo _initialized;
        private InputPropertyInfo _lastFetchedAt;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _realUrl;
        private InputPropertyInfo _sourceId;
        private InputPropertyInfo _status;
        private InputPropertyInfo _thumbnailUrl;
        private InputPropertyInfo _title;
        private InputPropertyInfo _url;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MangaFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MangaFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<MangaFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Artist
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_artist.Value; }
            set { _artist = new InputPropertyInfo { Name = "artist", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Author
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_author.Value; }
            set { _author = new InputPropertyInfo { Name = "author", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> CategoryId
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_categoryId.Value; }
            set { _categoryId = new InputPropertyInfo { Name = "categoryId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> ChaptersLastFetchedAt
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_chaptersLastFetchedAt.Value; }
            set { _chaptersLastFetchedAt = new InputPropertyInfo { Name = "chaptersLastFetchedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Description
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Genre
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_genre.Value; }
            set { _genre = new InputPropertyInfo { Name = "genre", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Id
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> InLibrary
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_inLibrary.Value; }
            set { _inLibrary = new InputPropertyInfo { Name = "inLibrary", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> InLibraryAt
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_inLibraryAt.Value; }
            set { _inLibraryAt = new InputPropertyInfo { Name = "inLibraryAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Initialized
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_initialized.Value; }
            set { _initialized = new InputPropertyInfo { Name = "initialized", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> LastFetchedAt
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_lastFetchedAt.Value; }
            set { _lastFetchedAt = new InputPropertyInfo { Name = "lastFetchedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaFilterInput>))]
        #endif
        public QueryBuilderParameter<MangaFilterInput> Not
        {
            get { return (QueryBuilderParameter<MangaFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MangaFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MangaFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<MangaFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> RealUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_realUrl.Value; }
            set { _realUrl = new InputPropertyInfo { Name = "realUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> SourceId
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_sourceId.Value; }
            set { _sourceId = new InputPropertyInfo { Name = "sourceId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatusFilterInput>))]
        #endif
        public QueryBuilderParameter<MangaStatusFilterInput> Status
        {
            get { return (QueryBuilderParameter<MangaStatusFilterInput>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ThumbnailUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_thumbnailUrl.Value; }
            set { _thumbnailUrl = new InputPropertyInfo { Name = "thumbnailUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Title
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_artist.Name != null) yield return _artist;
            if (_author.Name != null) yield return _author;
            if (_categoryId.Name != null) yield return _categoryId;
            if (_chaptersLastFetchedAt.Name != null) yield return _chaptersLastFetchedAt;
            if (_description.Name != null) yield return _description;
            if (_genre.Name != null) yield return _genre;
            if (_id.Name != null) yield return _id;
            if (_inLibrary.Name != null) yield return _inLibrary;
            if (_inLibraryAt.Name != null) yield return _inLibraryAt;
            if (_initialized.Name != null) yield return _initialized;
            if (_lastFetchedAt.Name != null) yield return _lastFetchedAt;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_realUrl.Name != null) yield return _realUrl;
            if (_sourceId.Name != null) yield return _sourceId;
            if (_status.Name != null) yield return _status;
            if (_thumbnailUrl.Name != null) yield return _thumbnailUrl;
            if (_title.Name != null) yield return _title;
            if (_url.Name != null) yield return _url;
        }
    }

    public class MangaMetaTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _mangaId;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MangaId
        {
            get { return (QueryBuilderParameter<int?>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_mangaId.Name != null) yield return _mangaId;
            if (_value.Name != null) yield return _value;
        }
    }

    public class MangaStatusFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _distinctFrom;
        private InputPropertyInfo _equalTo;
        private InputPropertyInfo _greaterThan;
        private InputPropertyInfo _greaterThanOrEqualTo;
        private InputPropertyInfo _in;
        private InputPropertyInfo _isNull;
        private InputPropertyInfo _lessThan;
        private InputPropertyInfo _lessThanOrEqualTo;
        private InputPropertyInfo _notDistinctFrom;
        private InputPropertyInfo _notEqualTo;
        private InputPropertyInfo _notIn;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> DistinctFrom
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_distinctFrom.Value; }
            set { _distinctFrom = new InputPropertyInfo { Name = "distinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> EqualTo
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_equalTo.Value; }
            set { _equalTo = new InputPropertyInfo { Name = "equalTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> GreaterThan
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_greaterThan.Value; }
            set { _greaterThan = new InputPropertyInfo { Name = "greaterThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> GreaterThanOrEqualTo
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_greaterThanOrEqualTo.Value; }
            set { _greaterThanOrEqualTo = new InputPropertyInfo { Name = "greaterThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MangaStatus>>))]
        #endif
        public QueryBuilderParameter<ICollection<MangaStatus>> In
        {
            get { return (QueryBuilderParameter<ICollection<MangaStatus>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNull
        {
            get { return (QueryBuilderParameter<bool?>)_isNull.Value; }
            set { _isNull = new InputPropertyInfo { Name = "isNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> LessThan
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_lessThan.Value; }
            set { _lessThan = new InputPropertyInfo { Name = "lessThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> LessThanOrEqualTo
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_lessThanOrEqualTo.Value; }
            set { _lessThanOrEqualTo = new InputPropertyInfo { Name = "lessThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> NotDistinctFrom
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_notDistinctFrom.Value; }
            set { _notDistinctFrom = new InputPropertyInfo { Name = "notDistinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaStatus?>))]
        #endif
        public QueryBuilderParameter<MangaStatus?> NotEqualTo
        {
            get { return (QueryBuilderParameter<MangaStatus?>)_notEqualTo.Value; }
            set { _notEqualTo = new InputPropertyInfo { Name = "notEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MangaStatus>>))]
        #endif
        public QueryBuilderParameter<ICollection<MangaStatus>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<MangaStatus>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_distinctFrom.Name != null) yield return _distinctFrom;
            if (_equalTo.Name != null) yield return _equalTo;
            if (_greaterThan.Name != null) yield return _greaterThan;
            if (_greaterThanOrEqualTo.Name != null) yield return _greaterThanOrEqualTo;
            if (_in.Name != null) yield return _in;
            if (_isNull.Name != null) yield return _isNull;
            if (_lessThan.Name != null) yield return _lessThan;
            if (_lessThanOrEqualTo.Name != null) yield return _lessThanOrEqualTo;
            if (_notDistinctFrom.Name != null) yield return _notDistinctFrom;
            if (_notEqualTo.Name != null) yield return _notEqualTo;
            if (_notIn.Name != null) yield return _notIn;
        }
    }

    public class MetaConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_value.Name != null) yield return _value;
        }
    }

    public class MetaFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _key;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MetaFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MetaFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<MetaFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Key
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MetaFilterInput>))]
        #endif
        public QueryBuilderParameter<MetaFilterInput> Not
        {
            get { return (QueryBuilderParameter<MetaFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MetaFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MetaFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<MetaFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Value
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_key.Name != null) yield return _key;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_value.Name != null) yield return _value;
        }
    }

    public class PartialSettingsTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _autoDownloadNewChapters;
        private InputPropertyInfo _autoDownloadNewChaptersLimit;
        private InputPropertyInfo _backupInterval;
        private InputPropertyInfo _backupPath;
        private InputPropertyInfo _backupTtl;
        private InputPropertyInfo _backupTime;
        private InputPropertyInfo _basicAuthEnabled;
        private InputPropertyInfo _basicAuthPassword;
        private InputPropertyInfo _basicAuthUsername;
        private InputPropertyInfo _debugLogsEnabled;
        private InputPropertyInfo _downloadAsCbz;
        private InputPropertyInfo _downloadsPath;
        private InputPropertyInfo _electronPath;
        private InputPropertyInfo _excludeCompleted;
        private InputPropertyInfo _excludeEntryWithUnreadChapters;
        private InputPropertyInfo _excludeNotStarted;
        private InputPropertyInfo _excludeUnreadChapters;
        private InputPropertyInfo _extensionRepos;
        private InputPropertyInfo _flareSolverrEnabled;
        private InputPropertyInfo _flareSolverrSessionName;
        private InputPropertyInfo _flareSolverrSessionTtl;
        private InputPropertyInfo _flareSolverrTimeout;
        private InputPropertyInfo _flareSolverrUrl;
        private InputPropertyInfo _globalUpdateInterval;
        private InputPropertyInfo _gqlDebugLogsEnabled;
        private InputPropertyInfo _initialOpenInBrowserEnabled;
        private InputPropertyInfo _ip;
        private InputPropertyInfo _localSourcePath;
        private InputPropertyInfo _maxSourcesInParallel;
        private InputPropertyInfo _port;
        private InputPropertyInfo _socksProxyEnabled;
        private InputPropertyInfo _socksProxyHost;
        private InputPropertyInfo _socksProxyPassword;
        private InputPropertyInfo _socksProxyPort;
        private InputPropertyInfo _socksProxyUsername;
        private InputPropertyInfo _socksProxyVersion;
        private InputPropertyInfo _systemTrayEnabled;
        private InputPropertyInfo _updateMangas;
        private InputPropertyInfo _webUiChannel;
        private InputPropertyInfo _webUiFlavor;
        private InputPropertyInfo _webUiInterface;
        private InputPropertyInfo _webUiUpdateCheckInterval;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> AutoDownloadNewChapters
        {
            get { return (QueryBuilderParameter<bool?>)_autoDownloadNewChapters.Value; }
            set { _autoDownloadNewChapters = new InputPropertyInfo { Name = "autoDownloadNewChapters", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> AutoDownloadNewChaptersLimit
        {
            get { return (QueryBuilderParameter<int?>)_autoDownloadNewChaptersLimit.Value; }
            set { _autoDownloadNewChaptersLimit = new InputPropertyInfo { Name = "autoDownloadNewChaptersLimit", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> BackupInterval
        {
            get { return (QueryBuilderParameter<int?>)_backupInterval.Value; }
            set { _backupInterval = new InputPropertyInfo { Name = "backupInterval", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BackupPath
        {
            get { return (QueryBuilderParameter<string>)_backupPath.Value; }
            set { _backupPath = new InputPropertyInfo { Name = "backupPath", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> BackupTtl
        {
            get { return (QueryBuilderParameter<int?>)_backupTtl.Value; }
            set { _backupTtl = new InputPropertyInfo { Name = "backupTTL", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BackupTime
        {
            get { return (QueryBuilderParameter<string>)_backupTime.Value; }
            set { _backupTime = new InputPropertyInfo { Name = "backupTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> BasicAuthEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_basicAuthEnabled.Value; }
            set { _basicAuthEnabled = new InputPropertyInfo { Name = "basicAuthEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BasicAuthPassword
        {
            get { return (QueryBuilderParameter<string>)_basicAuthPassword.Value; }
            set { _basicAuthPassword = new InputPropertyInfo { Name = "basicAuthPassword", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BasicAuthUsername
        {
            get { return (QueryBuilderParameter<string>)_basicAuthUsername.Value; }
            set { _basicAuthUsername = new InputPropertyInfo { Name = "basicAuthUsername", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DebugLogsEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_debugLogsEnabled.Value; }
            set { _debugLogsEnabled = new InputPropertyInfo { Name = "debugLogsEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> DownloadAsCbz
        {
            get { return (QueryBuilderParameter<bool?>)_downloadAsCbz.Value; }
            set { _downloadAsCbz = new InputPropertyInfo { Name = "downloadAsCbz", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DownloadsPath
        {
            get { return (QueryBuilderParameter<string>)_downloadsPath.Value; }
            set { _downloadsPath = new InputPropertyInfo { Name = "downloadsPath", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ElectronPath
        {
            get { return (QueryBuilderParameter<string>)_electronPath.Value; }
            set { _electronPath = new InputPropertyInfo { Name = "electronPath", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ExcludeCompleted
        {
            get { return (QueryBuilderParameter<bool?>)_excludeCompleted.Value; }
            set { _excludeCompleted = new InputPropertyInfo { Name = "excludeCompleted", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ExcludeEntryWithUnreadChapters
        {
            get { return (QueryBuilderParameter<bool?>)_excludeEntryWithUnreadChapters.Value; }
            set { _excludeEntryWithUnreadChapters = new InputPropertyInfo { Name = "excludeEntryWithUnreadChapters", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ExcludeNotStarted
        {
            get { return (QueryBuilderParameter<bool?>)_excludeNotStarted.Value; }
            set { _excludeNotStarted = new InputPropertyInfo { Name = "excludeNotStarted", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ExcludeUnreadChapters
        {
            get { return (QueryBuilderParameter<bool?>)_excludeUnreadChapters.Value; }
            set { _excludeUnreadChapters = new InputPropertyInfo { Name = "excludeUnreadChapters", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> ExtensionRepos
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_extensionRepos.Value; }
            set { _extensionRepos = new InputPropertyInfo { Name = "extensionRepos", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> FlareSolverrEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_flareSolverrEnabled.Value; }
            set { _flareSolverrEnabled = new InputPropertyInfo { Name = "flareSolverrEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FlareSolverrSessionName
        {
            get { return (QueryBuilderParameter<string>)_flareSolverrSessionName.Value; }
            set { _flareSolverrSessionName = new InputPropertyInfo { Name = "flareSolverrSessionName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> FlareSolverrSessionTtl
        {
            get { return (QueryBuilderParameter<int?>)_flareSolverrSessionTtl.Value; }
            set { _flareSolverrSessionTtl = new InputPropertyInfo { Name = "flareSolverrSessionTtl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> FlareSolverrTimeout
        {
            get { return (QueryBuilderParameter<int?>)_flareSolverrTimeout.Value; }
            set { _flareSolverrTimeout = new InputPropertyInfo { Name = "flareSolverrTimeout", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> FlareSolverrUrl
        {
            get { return (QueryBuilderParameter<string>)_flareSolverrUrl.Value; }
            set { _flareSolverrUrl = new InputPropertyInfo { Name = "flareSolverrUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> GlobalUpdateInterval
        {
            get { return (QueryBuilderParameter<decimal?>)_globalUpdateInterval.Value; }
            set { _globalUpdateInterval = new InputPropertyInfo { Name = "globalUpdateInterval", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> GqlDebugLogsEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_gqlDebugLogsEnabled.Value; }
            set { _gqlDebugLogsEnabled = new InputPropertyInfo { Name = "gqlDebugLogsEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> InitialOpenInBrowserEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_initialOpenInBrowserEnabled.Value; }
            set { _initialOpenInBrowserEnabled = new InputPropertyInfo { Name = "initialOpenInBrowserEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Ip
        {
            get { return (QueryBuilderParameter<string>)_ip.Value; }
            set { _ip = new InputPropertyInfo { Name = "ip", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LocalSourcePath
        {
            get { return (QueryBuilderParameter<string>)_localSourcePath.Value; }
            set { _localSourcePath = new InputPropertyInfo { Name = "localSourcePath", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MaxSourcesInParallel
        {
            get { return (QueryBuilderParameter<int?>)_maxSourcesInParallel.Value; }
            set { _maxSourcesInParallel = new InputPropertyInfo { Name = "maxSourcesInParallel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Port
        {
            get { return (QueryBuilderParameter<int?>)_port.Value; }
            set { _port = new InputPropertyInfo { Name = "port", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> SocksProxyEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_socksProxyEnabled.Value; }
            set { _socksProxyEnabled = new InputPropertyInfo { Name = "socksProxyEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SocksProxyHost
        {
            get { return (QueryBuilderParameter<string>)_socksProxyHost.Value; }
            set { _socksProxyHost = new InputPropertyInfo { Name = "socksProxyHost", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SocksProxyPassword
        {
            get { return (QueryBuilderParameter<string>)_socksProxyPassword.Value; }
            set { _socksProxyPassword = new InputPropertyInfo { Name = "socksProxyPassword", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SocksProxyPort
        {
            get { return (QueryBuilderParameter<string>)_socksProxyPort.Value; }
            set { _socksProxyPort = new InputPropertyInfo { Name = "socksProxyPort", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SocksProxyUsername
        {
            get { return (QueryBuilderParameter<string>)_socksProxyUsername.Value; }
            set { _socksProxyUsername = new InputPropertyInfo { Name = "socksProxyUsername", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> SocksProxyVersion
        {
            get { return (QueryBuilderParameter<int?>)_socksProxyVersion.Value; }
            set { _socksProxyVersion = new InputPropertyInfo { Name = "socksProxyVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> SystemTrayEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_systemTrayEnabled.Value; }
            set { _systemTrayEnabled = new InputPropertyInfo { Name = "systemTrayEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> UpdateMangas
        {
            get { return (QueryBuilderParameter<bool?>)_updateMangas.Value; }
            set { _updateMangas = new InputPropertyInfo { Name = "updateMangas", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebUiChannel?>))]
        #endif
        public QueryBuilderParameter<WebUiChannel?> WebUiChannel
        {
            get { return (QueryBuilderParameter<WebUiChannel?>)_webUiChannel.Value; }
            set { _webUiChannel = new InputPropertyInfo { Name = "webUIChannel", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebUiFlavor?>))]
        #endif
        public QueryBuilderParameter<WebUiFlavor?> WebUiFlavor
        {
            get { return (QueryBuilderParameter<WebUiFlavor?>)_webUiFlavor.Value; }
            set { _webUiFlavor = new InputPropertyInfo { Name = "webUIFlavor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<WebUiInterface?>))]
        #endif
        public QueryBuilderParameter<WebUiInterface?> WebUiInterface
        {
            get { return (QueryBuilderParameter<WebUiInterface?>)_webUiInterface.Value; }
            set { _webUiInterface = new InputPropertyInfo { Name = "webUIInterface", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> WebUiUpdateCheckInterval
        {
            get { return (QueryBuilderParameter<decimal?>)_webUiUpdateCheckInterval.Value; }
            set { _webUiUpdateCheckInterval = new InputPropertyInfo { Name = "webUIUpdateCheckInterval", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_autoDownloadNewChapters.Name != null) yield return _autoDownloadNewChapters;
            if (_autoDownloadNewChaptersLimit.Name != null) yield return _autoDownloadNewChaptersLimit;
            if (_backupInterval.Name != null) yield return _backupInterval;
            if (_backupPath.Name != null) yield return _backupPath;
            if (_backupTtl.Name != null) yield return _backupTtl;
            if (_backupTime.Name != null) yield return _backupTime;
            if (_basicAuthEnabled.Name != null) yield return _basicAuthEnabled;
            if (_basicAuthPassword.Name != null) yield return _basicAuthPassword;
            if (_basicAuthUsername.Name != null) yield return _basicAuthUsername;
            if (_debugLogsEnabled.Name != null) yield return _debugLogsEnabled;
            if (_downloadAsCbz.Name != null) yield return _downloadAsCbz;
            if (_downloadsPath.Name != null) yield return _downloadsPath;
            if (_electronPath.Name != null) yield return _electronPath;
            if (_excludeCompleted.Name != null) yield return _excludeCompleted;
            if (_excludeEntryWithUnreadChapters.Name != null) yield return _excludeEntryWithUnreadChapters;
            if (_excludeNotStarted.Name != null) yield return _excludeNotStarted;
            if (_excludeUnreadChapters.Name != null) yield return _excludeUnreadChapters;
            if (_extensionRepos.Name != null) yield return _extensionRepos;
            if (_flareSolverrEnabled.Name != null) yield return _flareSolverrEnabled;
            if (_flareSolverrSessionName.Name != null) yield return _flareSolverrSessionName;
            if (_flareSolverrSessionTtl.Name != null) yield return _flareSolverrSessionTtl;
            if (_flareSolverrTimeout.Name != null) yield return _flareSolverrTimeout;
            if (_flareSolverrUrl.Name != null) yield return _flareSolverrUrl;
            if (_globalUpdateInterval.Name != null) yield return _globalUpdateInterval;
            if (_gqlDebugLogsEnabled.Name != null) yield return _gqlDebugLogsEnabled;
            if (_initialOpenInBrowserEnabled.Name != null) yield return _initialOpenInBrowserEnabled;
            if (_ip.Name != null) yield return _ip;
            if (_localSourcePath.Name != null) yield return _localSourcePath;
            if (_maxSourcesInParallel.Name != null) yield return _maxSourcesInParallel;
            if (_port.Name != null) yield return _port;
            if (_socksProxyEnabled.Name != null) yield return _socksProxyEnabled;
            if (_socksProxyHost.Name != null) yield return _socksProxyHost;
            if (_socksProxyPassword.Name != null) yield return _socksProxyPassword;
            if (_socksProxyPort.Name != null) yield return _socksProxyPort;
            if (_socksProxyUsername.Name != null) yield return _socksProxyUsername;
            if (_socksProxyVersion.Name != null) yield return _socksProxyVersion;
            if (_systemTrayEnabled.Name != null) yield return _systemTrayEnabled;
            if (_updateMangas.Name != null) yield return _updateMangas;
            if (_webUiChannel.Name != null) yield return _webUiChannel;
            if (_webUiFlavor.Name != null) yield return _webUiFlavor;
            if (_webUiInterface.Name != null) yield return _webUiInterface;
            if (_webUiUpdateCheckInterval.Name != null) yield return _webUiUpdateCheckInterval;
        }
    }

    public class ReorderChapterDownloadInput : IGraphQlInputObject
    {
        private InputPropertyInfo _chapterId;
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _to;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ChapterId
        {
            get { return (QueryBuilderParameter<int?>)_chapterId.Value; }
            set { _chapterId = new InputPropertyInfo { Name = "chapterId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> To
        {
            get { return (QueryBuilderParameter<int?>)_to.Value; }
            set { _to = new InputPropertyInfo { Name = "to", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_chapterId.Name != null) yield return _chapterId;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_to.Name != null) yield return _to;
        }
    }

    public class ResetSettingsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class RestoreBackupInput : IGraphQlInputObject
    {
        private InputPropertyInfo _backup;
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Backup
        {
            get { return (QueryBuilderParameter<object>)_backup.Value; }
            set { _backup = new InputPropertyInfo { Name = "backup", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_backup.Name != null) yield return _backup;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class SearchTrackerInput : IGraphQlInputObject
    {
        private InputPropertyInfo _query;
        private InputPropertyInfo _trackerId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Query
        {
            get { return (QueryBuilderParameter<string>)_query.Value; }
            set { _query = new InputPropertyInfo { Name = "query", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TrackerId
        {
            get { return (QueryBuilderParameter<int?>)_trackerId.Value; }
            set { _trackerId = new InputPropertyInfo { Name = "trackerId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_query.Name != null) yield return _query;
            if (_trackerId.Name != null) yield return _trackerId;
        }
    }

    public class SetCategoryMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _meta;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CategoryMetaTypeInput>))]
        #endif
        public QueryBuilderParameter<CategoryMetaTypeInput> Meta
        {
            get { return (QueryBuilderParameter<CategoryMetaTypeInput>)_meta.Value; }
            set { _meta = new InputPropertyInfo { Name = "meta", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_meta.Name != null) yield return _meta;
        }
    }

    public class SetChapterMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _meta;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChapterMetaTypeInput>))]
        #endif
        public QueryBuilderParameter<ChapterMetaTypeInput> Meta
        {
            get { return (QueryBuilderParameter<ChapterMetaTypeInput>)_meta.Value; }
            set { _meta = new InputPropertyInfo { Name = "meta", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_meta.Name != null) yield return _meta;
        }
    }

    public class SetGlobalMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _meta;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GlobalMetaTypeInput>))]
        #endif
        public QueryBuilderParameter<GlobalMetaTypeInput> Meta
        {
            get { return (QueryBuilderParameter<GlobalMetaTypeInput>)_meta.Value; }
            set { _meta = new InputPropertyInfo { Name = "meta", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_meta.Name != null) yield return _meta;
        }
    }

    public class SetMangaMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _meta;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MangaMetaTypeInput>))]
        #endif
        public QueryBuilderParameter<MangaMetaTypeInput> Meta
        {
            get { return (QueryBuilderParameter<MangaMetaTypeInput>)_meta.Value; }
            set { _meta = new InputPropertyInfo { Name = "meta", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_meta.Name != null) yield return _meta;
        }
    }

    public class SetSettingsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _settings;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PartialSettingsTypeInput>))]
        #endif
        public QueryBuilderParameter<PartialSettingsTypeInput> Settings
        {
            get { return (QueryBuilderParameter<PartialSettingsTypeInput>)_settings.Value; }
            set { _settings = new InputPropertyInfo { Name = "settings", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_settings.Name != null) yield return _settings;
        }
    }

    public class SetSourceMetaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _meta;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SourceMetaTypeInput>))]
        #endif
        public QueryBuilderParameter<SourceMetaTypeInput> Meta
        {
            get { return (QueryBuilderParameter<SourceMetaTypeInput>)_meta.Value; }
            set { _meta = new InputPropertyInfo { Name = "meta", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_meta.Name != null) yield return _meta;
        }
    }

    public class SortSelectionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _ascending;
        private InputPropertyInfo _index;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Ascending
        {
            get { return (QueryBuilderParameter<bool?>)_ascending.Value; }
            set { _ascending = new InputPropertyInfo { Name = "ascending", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Index
        {
            get { return (QueryBuilderParameter<int?>)_index.Value; }
            set { _index = new InputPropertyInfo { Name = "index", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_ascending.Name != null) yield return _ascending;
            if (_index.Name != null) yield return _index;
        }
    }

    public class SourceConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _isNsfw;
        private InputPropertyInfo _lang;
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Id
        {
            get { return (QueryBuilderParameter<object>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNsfw
        {
            get { return (QueryBuilderParameter<bool?>)_isNsfw.Value; }
            set { _isNsfw = new InputPropertyInfo { Name = "isNsfw", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Lang
        {
            get { return (QueryBuilderParameter<string>)_lang.Value; }
            set { _lang = new InputPropertyInfo { Name = "lang", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_isNsfw.Name != null) yield return _isNsfw;
            if (_lang.Name != null) yield return _lang;
            if (_name.Name != null) yield return _name;
        }
    }

    public class SourceFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _id;
        private InputPropertyInfo _isNsfw;
        private InputPropertyInfo _lang;
        private InputPropertyInfo _name;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SourceFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<SourceFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<SourceFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> Id
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsNsfw
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isNsfw.Value; }
            set { _isNsfw = new InputPropertyInfo { Name = "isNsfw", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Lang
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_lang.Value; }
            set { _lang = new InputPropertyInfo { Name = "lang", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SourceFilterInput>))]
        #endif
        public QueryBuilderParameter<SourceFilterInput> Not
        {
            get { return (QueryBuilderParameter<SourceFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SourceFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<SourceFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<SourceFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_id.Name != null) yield return _id;
            if (_isNsfw.Name != null) yield return _isNsfw;
            if (_lang.Name != null) yield return _lang;
            if (_name.Name != null) yield return _name;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
        }
    }

    public class SourceMetaTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _key;
        private InputPropertyInfo _sourceId;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Key
        {
            get { return (QueryBuilderParameter<string>)_key.Value; }
            set { _key = new InputPropertyInfo { Name = "key", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> SourceId
        {
            get { return (QueryBuilderParameter<object>)_sourceId.Value; }
            set { _sourceId = new InputPropertyInfo { Name = "sourceId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_key.Name != null) yield return _key;
            if (_sourceId.Name != null) yield return _sourceId;
            if (_value.Name != null) yield return _value;
        }
    }

    public class SourcePreferenceChangeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _checkBoxState;
        private InputPropertyInfo _editTextState;
        private InputPropertyInfo _listState;
        private InputPropertyInfo _multiSelectState;
        private InputPropertyInfo _position;
        private InputPropertyInfo _switchState;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> CheckBoxState
        {
            get { return (QueryBuilderParameter<bool?>)_checkBoxState.Value; }
            set { _checkBoxState = new InputPropertyInfo { Name = "checkBoxState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EditTextState
        {
            get { return (QueryBuilderParameter<string>)_editTextState.Value; }
            set { _editTextState = new InputPropertyInfo { Name = "editTextState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ListState
        {
            get { return (QueryBuilderParameter<string>)_listState.Value; }
            set { _listState = new InputPropertyInfo { Name = "listState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> MultiSelectState
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_multiSelectState.Value; }
            set { _multiSelectState = new InputPropertyInfo { Name = "multiSelectState", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Position
        {
            get { return (QueryBuilderParameter<int?>)_position.Value; }
            set { _position = new InputPropertyInfo { Name = "position", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> SwitchState
        {
            get { return (QueryBuilderParameter<bool?>)_switchState.Value; }
            set { _switchState = new InputPropertyInfo { Name = "switchState", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_checkBoxState.Name != null) yield return _checkBoxState;
            if (_editTextState.Name != null) yield return _editTextState;
            if (_listState.Name != null) yield return _listState;
            if (_multiSelectState.Name != null) yield return _multiSelectState;
            if (_position.Name != null) yield return _position;
            if (_switchState.Name != null) yield return _switchState;
        }
    }

    public class StartDownloaderInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class StopDownloaderInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class StringFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _distinctFrom;
        private InputPropertyInfo _distinctFromInsensitive;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _endsWithInsensitive;
        private InputPropertyInfo _equalTo;
        private InputPropertyInfo _greaterThan;
        private InputPropertyInfo _greaterThanInsensitive;
        private InputPropertyInfo _greaterThanOrEqualTo;
        private InputPropertyInfo _greaterThanOrEqualToInsensitive;
        private InputPropertyInfo _in;
        private InputPropertyInfo _inInsensitive;
        private InputPropertyInfo _includes;
        private InputPropertyInfo _includesInsensitive;
        private InputPropertyInfo _isNull;
        private InputPropertyInfo _lessThan;
        private InputPropertyInfo _lessThanInsensitive;
        private InputPropertyInfo _lessThanOrEqualTo;
        private InputPropertyInfo _lessThanOrEqualToInsensitive;
        private InputPropertyInfo _like;
        private InputPropertyInfo _likeInsensitive;
        private InputPropertyInfo _notDistinctFrom;
        private InputPropertyInfo _notDistinctFromInsensitive;
        private InputPropertyInfo _notEndsWith;
        private InputPropertyInfo _notEndsWithInsensitive;
        private InputPropertyInfo _notEqualTo;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _notInInsensitive;
        private InputPropertyInfo _notIncludes;
        private InputPropertyInfo _notIncludesInsensitive;
        private InputPropertyInfo _notLike;
        private InputPropertyInfo _notLikeInsensitive;
        private InputPropertyInfo _notStartsWith;
        private InputPropertyInfo _notStartsWithInsensitive;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _startsWithInsensitive;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DistinctFrom
        {
            get { return (QueryBuilderParameter<string>)_distinctFrom.Value; }
            set { _distinctFrom = new InputPropertyInfo { Name = "distinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DistinctFromInsensitive
        {
            get { return (QueryBuilderParameter<string>)_distinctFromInsensitive.Value; }
            set { _distinctFromInsensitive = new InputPropertyInfo { Name = "distinctFromInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EndsWith
        {
            get { return (QueryBuilderParameter<string>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EndsWithInsensitive
        {
            get { return (QueryBuilderParameter<string>)_endsWithInsensitive.Value; }
            set { _endsWithInsensitive = new InputPropertyInfo { Name = "endsWithInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EqualTo
        {
            get { return (QueryBuilderParameter<string>)_equalTo.Value; }
            set { _equalTo = new InputPropertyInfo { Name = "equalTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> GreaterThan
        {
            get { return (QueryBuilderParameter<string>)_greaterThan.Value; }
            set { _greaterThan = new InputPropertyInfo { Name = "greaterThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> GreaterThanInsensitive
        {
            get { return (QueryBuilderParameter<string>)_greaterThanInsensitive.Value; }
            set { _greaterThanInsensitive = new InputPropertyInfo { Name = "greaterThanInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> GreaterThanOrEqualTo
        {
            get { return (QueryBuilderParameter<string>)_greaterThanOrEqualTo.Value; }
            set { _greaterThanOrEqualTo = new InputPropertyInfo { Name = "greaterThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> GreaterThanOrEqualToInsensitive
        {
            get { return (QueryBuilderParameter<string>)_greaterThanOrEqualToInsensitive.Value; }
            set { _greaterThanOrEqualToInsensitive = new InputPropertyInfo { Name = "greaterThanOrEqualToInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> InInsensitive
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_inInsensitive.Value; }
            set { _inInsensitive = new InputPropertyInfo { Name = "inInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Includes
        {
            get { return (QueryBuilderParameter<string>)_includes.Value; }
            set { _includes = new InputPropertyInfo { Name = "includes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IncludesInsensitive
        {
            get { return (QueryBuilderParameter<string>)_includesInsensitive.Value; }
            set { _includesInsensitive = new InputPropertyInfo { Name = "includesInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsNull
        {
            get { return (QueryBuilderParameter<bool?>)_isNull.Value; }
            set { _isNull = new InputPropertyInfo { Name = "isNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LessThan
        {
            get { return (QueryBuilderParameter<string>)_lessThan.Value; }
            set { _lessThan = new InputPropertyInfo { Name = "lessThan", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LessThanInsensitive
        {
            get { return (QueryBuilderParameter<string>)_lessThanInsensitive.Value; }
            set { _lessThanInsensitive = new InputPropertyInfo { Name = "lessThanInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LessThanOrEqualTo
        {
            get { return (QueryBuilderParameter<string>)_lessThanOrEqualTo.Value; }
            set { _lessThanOrEqualTo = new InputPropertyInfo { Name = "lessThanOrEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LessThanOrEqualToInsensitive
        {
            get { return (QueryBuilderParameter<string>)_lessThanOrEqualToInsensitive.Value; }
            set { _lessThanOrEqualToInsensitive = new InputPropertyInfo { Name = "lessThanOrEqualToInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Like
        {
            get { return (QueryBuilderParameter<string>)_like.Value; }
            set { _like = new InputPropertyInfo { Name = "like", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LikeInsensitive
        {
            get { return (QueryBuilderParameter<string>)_likeInsensitive.Value; }
            set { _likeInsensitive = new InputPropertyInfo { Name = "likeInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotDistinctFrom
        {
            get { return (QueryBuilderParameter<string>)_notDistinctFrom.Value; }
            set { _notDistinctFrom = new InputPropertyInfo { Name = "notDistinctFrom", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotDistinctFromInsensitive
        {
            get { return (QueryBuilderParameter<string>)_notDistinctFromInsensitive.Value; }
            set { _notDistinctFromInsensitive = new InputPropertyInfo { Name = "notDistinctFromInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotEndsWith
        {
            get { return (QueryBuilderParameter<string>)_notEndsWith.Value; }
            set { _notEndsWith = new InputPropertyInfo { Name = "notEndsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotEndsWithInsensitive
        {
            get { return (QueryBuilderParameter<string>)_notEndsWithInsensitive.Value; }
            set { _notEndsWithInsensitive = new InputPropertyInfo { Name = "notEndsWithInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotEqualTo
        {
            get { return (QueryBuilderParameter<string>)_notEqualTo.Value; }
            set { _notEqualTo = new InputPropertyInfo { Name = "notEqualTo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NotInInsensitive
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_notInInsensitive.Value; }
            set { _notInInsensitive = new InputPropertyInfo { Name = "notInInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotIncludes
        {
            get { return (QueryBuilderParameter<string>)_notIncludes.Value; }
            set { _notIncludes = new InputPropertyInfo { Name = "notIncludes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotIncludesInsensitive
        {
            get { return (QueryBuilderParameter<string>)_notIncludesInsensitive.Value; }
            set { _notIncludesInsensitive = new InputPropertyInfo { Name = "notIncludesInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotLike
        {
            get { return (QueryBuilderParameter<string>)_notLike.Value; }
            set { _notLike = new InputPropertyInfo { Name = "notLike", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotLikeInsensitive
        {
            get { return (QueryBuilderParameter<string>)_notLikeInsensitive.Value; }
            set { _notLikeInsensitive = new InputPropertyInfo { Name = "notLikeInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotStartsWith
        {
            get { return (QueryBuilderParameter<string>)_notStartsWith.Value; }
            set { _notStartsWith = new InputPropertyInfo { Name = "notStartsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotStartsWithInsensitive
        {
            get { return (QueryBuilderParameter<string>)_notStartsWithInsensitive.Value; }
            set { _notStartsWithInsensitive = new InputPropertyInfo { Name = "notStartsWithInsensitive", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> StartsWith
        {
            get { return (QueryBuilderParameter<string>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> StartsWithInsensitive
        {
            get { return (QueryBuilderParameter<string>)_startsWithInsensitive.Value; }
            set { _startsWithInsensitive = new InputPropertyInfo { Name = "startsWithInsensitive", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_distinctFrom.Name != null) yield return _distinctFrom;
            if (_distinctFromInsensitive.Name != null) yield return _distinctFromInsensitive;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_endsWithInsensitive.Name != null) yield return _endsWithInsensitive;
            if (_equalTo.Name != null) yield return _equalTo;
            if (_greaterThan.Name != null) yield return _greaterThan;
            if (_greaterThanInsensitive.Name != null) yield return _greaterThanInsensitive;
            if (_greaterThanOrEqualTo.Name != null) yield return _greaterThanOrEqualTo;
            if (_greaterThanOrEqualToInsensitive.Name != null) yield return _greaterThanOrEqualToInsensitive;
            if (_in.Name != null) yield return _in;
            if (_inInsensitive.Name != null) yield return _inInsensitive;
            if (_includes.Name != null) yield return _includes;
            if (_includesInsensitive.Name != null) yield return _includesInsensitive;
            if (_isNull.Name != null) yield return _isNull;
            if (_lessThan.Name != null) yield return _lessThan;
            if (_lessThanInsensitive.Name != null) yield return _lessThanInsensitive;
            if (_lessThanOrEqualTo.Name != null) yield return _lessThanOrEqualTo;
            if (_lessThanOrEqualToInsensitive.Name != null) yield return _lessThanOrEqualToInsensitive;
            if (_like.Name != null) yield return _like;
            if (_likeInsensitive.Name != null) yield return _likeInsensitive;
            if (_notDistinctFrom.Name != null) yield return _notDistinctFrom;
            if (_notDistinctFromInsensitive.Name != null) yield return _notDistinctFromInsensitive;
            if (_notEndsWith.Name != null) yield return _notEndsWith;
            if (_notEndsWithInsensitive.Name != null) yield return _notEndsWithInsensitive;
            if (_notEqualTo.Name != null) yield return _notEqualTo;
            if (_notIn.Name != null) yield return _notIn;
            if (_notInInsensitive.Name != null) yield return _notInInsensitive;
            if (_notIncludes.Name != null) yield return _notIncludes;
            if (_notIncludesInsensitive.Name != null) yield return _notIncludesInsensitive;
            if (_notLike.Name != null) yield return _notLike;
            if (_notLikeInsensitive.Name != null) yield return _notLikeInsensitive;
            if (_notStartsWith.Name != null) yield return _notStartsWith;
            if (_notStartsWithInsensitive.Name != null) yield return _notStartsWithInsensitive;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_startsWithInsensitive.Name != null) yield return _startsWithInsensitive;
        }
    }

    public class TrackRecordConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _finishDate;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastChapterRead;
        private InputPropertyInfo _libraryId;
        private InputPropertyInfo _mangaId;
        private InputPropertyInfo _remoteId;
        private InputPropertyInfo _remoteUrl;
        private InputPropertyInfo _score;
        private InputPropertyInfo _startDate;
        private InputPropertyInfo _status;
        private InputPropertyInfo _title;
        private InputPropertyInfo _totalChapters;
        private InputPropertyInfo _trackerId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> FinishDate
        {
            get { return (QueryBuilderParameter<object>)_finishDate.Value; }
            set { _finishDate = new InputPropertyInfo { Name = "finishDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> LastChapterRead
        {
            get { return (QueryBuilderParameter<decimal?>)_lastChapterRead.Value; }
            set { _lastChapterRead = new InputPropertyInfo { Name = "lastChapterRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> LibraryId
        {
            get { return (QueryBuilderParameter<object>)_libraryId.Value; }
            set { _libraryId = new InputPropertyInfo { Name = "libraryId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> MangaId
        {
            get { return (QueryBuilderParameter<int?>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> RemoteId
        {
            get { return (QueryBuilderParameter<object>)_remoteId.Value; }
            set { _remoteId = new InputPropertyInfo { Name = "remoteId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> RemoteUrl
        {
            get { return (QueryBuilderParameter<string>)_remoteUrl.Value; }
            set { _remoteUrl = new InputPropertyInfo { Name = "remoteUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Score
        {
            get { return (QueryBuilderParameter<decimal?>)_score.Value; }
            set { _score = new InputPropertyInfo { Name = "score", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> StartDate
        {
            get { return (QueryBuilderParameter<object>)_startDate.Value; }
            set { _startDate = new InputPropertyInfo { Name = "startDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Status
        {
            get { return (QueryBuilderParameter<int?>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TotalChapters
        {
            get { return (QueryBuilderParameter<int?>)_totalChapters.Value; }
            set { _totalChapters = new InputPropertyInfo { Name = "totalChapters", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> TrackerId
        {
            get { return (QueryBuilderParameter<int?>)_trackerId.Value; }
            set { _trackerId = new InputPropertyInfo { Name = "trackerId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_finishDate.Name != null) yield return _finishDate;
            if (_id.Name != null) yield return _id;
            if (_lastChapterRead.Name != null) yield return _lastChapterRead;
            if (_libraryId.Name != null) yield return _libraryId;
            if (_mangaId.Name != null) yield return _mangaId;
            if (_remoteId.Name != null) yield return _remoteId;
            if (_remoteUrl.Name != null) yield return _remoteUrl;
            if (_score.Name != null) yield return _score;
            if (_startDate.Name != null) yield return _startDate;
            if (_status.Name != null) yield return _status;
            if (_title.Name != null) yield return _title;
            if (_totalChapters.Name != null) yield return _totalChapters;
            if (_trackerId.Name != null) yield return _trackerId;
        }
    }

    public class TrackRecordFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _finishDate;
        private InputPropertyInfo _id;
        private InputPropertyInfo _lastChapterRead;
        private InputPropertyInfo _libraryId;
        private InputPropertyInfo _mangaId;
        private InputPropertyInfo _not;
        private InputPropertyInfo _or;
        private InputPropertyInfo _remoteId;
        private InputPropertyInfo _remoteUrl;
        private InputPropertyInfo _score;
        private InputPropertyInfo _startDate;
        private InputPropertyInfo _status;
        private InputPropertyInfo _title;
        private InputPropertyInfo _totalChapters;
        private InputPropertyInfo _trackerId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TrackRecordFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<TrackRecordFilterInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<TrackRecordFilterInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> FinishDate
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_finishDate.Value; }
            set { _finishDate = new InputPropertyInfo { Name = "finishDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Id
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DoubleFilterInput>))]
        #endif
        public QueryBuilderParameter<DoubleFilterInput> LastChapterRead
        {
            get { return (QueryBuilderParameter<DoubleFilterInput>)_lastChapterRead.Value; }
            set { _lastChapterRead = new InputPropertyInfo { Name = "lastChapterRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> LibraryId
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_libraryId.Value; }
            set { _libraryId = new InputPropertyInfo { Name = "libraryId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> MangaId
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_mangaId.Value; }
            set { _mangaId = new InputPropertyInfo { Name = "mangaId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TrackRecordFilterInput>))]
        #endif
        public QueryBuilderParameter<TrackRecordFilterInput> Not
        {
            get { return (QueryBuilderParameter<TrackRecordFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TrackRecordFilterInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<TrackRecordFilterInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<TrackRecordFilterInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> RemoteId
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_remoteId.Value; }
            set { _remoteId = new InputPropertyInfo { Name = "remoteId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> RemoteUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_remoteUrl.Value; }
            set { _remoteUrl = new InputPropertyInfo { Name = "remoteUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DoubleFilterInput>))]
        #endif
        public QueryBuilderParameter<DoubleFilterInput> Score
        {
            get { return (QueryBuilderParameter<DoubleFilterInput>)_score.Value; }
            set { _score = new InputPropertyInfo { Name = "score", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> StartDate
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_startDate.Value; }
            set { _startDate = new InputPropertyInfo { Name = "startDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Status
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Title
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> TotalChapters
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_totalChapters.Value; }
            set { _totalChapters = new InputPropertyInfo { Name = "totalChapters", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> TrackerId
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_trackerId.Value; }
            set { _trackerId = new InputPropertyInfo { Name = "trackerId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_finishDate.Name != null) yield return _finishDate;
            if (_id.Name != null) yield return _id;
            if (_lastChapterRead.Name != null) yield return _lastChapterRead;
            if (_libraryId.Name != null) yield return _libraryId;
            if (_mangaId.Name != null) yield return _mangaId;
            if (_not.Name != null) yield return _not;
            if (_or.Name != null) yield return _or;
            if (_remoteId.Name != null) yield return _remoteId;
            if (_remoteUrl.Name != null) yield return _remoteUrl;
            if (_score.Name != null) yield return _score;
            if (_startDate.Name != null) yield return _startDate;
            if (_status.Name != null) yield return _status;
            if (_title.Name != null) yield return _title;
            if (_totalChapters.Name != null) yield return _totalChapters;
            if (_trackerId.Name != null) yield return _trackerId;
        }
    }

    public class TrackerConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _icon;
        private InputPropertyInfo _id;
        private InputPropertyInfo _isLoggedIn;
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLoggedIn
        {
            get { return (QueryBuilderParameter<bool?>)_isLoggedIn.Value; }
            set { _isLoggedIn = new InputPropertyInfo { Name = "isLoggedIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_icon.Name != null) yield return _icon;
            if (_id.Name != null) yield return _id;
            if (_isLoggedIn.Name != null) yield return _isLoggedIn;
            if (_name.Name != null) yield return _name;
        }
    }

    public class UpdateCategoriesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateCategoryPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateCategoryPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateCategoryPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateCategoryInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateCategoryPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateCategoryPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateCategoryPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateCategoryMangaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _categories;
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Categories
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_categories.Value; }
            set { _categories = new InputPropertyInfo { Name = "categories", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_categories.Name != null) yield return _categories;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class UpdateCategoryOrderInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _position;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Position
        {
            get { return (QueryBuilderParameter<int?>)_position.Value; }
            set { _position = new InputPropertyInfo { Name = "position", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
            if (_position.Name != null) yield return _position;
        }
    }

    public class UpdateCategoryPatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _default;
        private InputPropertyInfo _includeInDownload;
        private InputPropertyInfo _includeInUpdate;
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Default
        {
            get { return (QueryBuilderParameter<bool?>)_default.Value; }
            set { _default = new InputPropertyInfo { Name = "default", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IncludeOrExclude?>))]
        #endif
        public QueryBuilderParameter<IncludeOrExclude?> IncludeInDownload
        {
            get { return (QueryBuilderParameter<IncludeOrExclude?>)_includeInDownload.Value; }
            set { _includeInDownload = new InputPropertyInfo { Name = "includeInDownload", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IncludeOrExclude?>))]
        #endif
        public QueryBuilderParameter<IncludeOrExclude?> IncludeInUpdate
        {
            get { return (QueryBuilderParameter<IncludeOrExclude?>)_includeInUpdate.Value; }
            set { _includeInUpdate = new InputPropertyInfo { Name = "includeInUpdate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_default.Name != null) yield return _default;
            if (_includeInDownload.Name != null) yield return _includeInDownload;
            if (_includeInUpdate.Name != null) yield return _includeInUpdate;
            if (_name.Name != null) yield return _name;
        }
    }

    public class UpdateChapterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateChapterPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateChapterPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateChapterPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateChapterPatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _isBookmarked;
        private InputPropertyInfo _isRead;
        private InputPropertyInfo _lastPageRead;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsBookmarked
        {
            get { return (QueryBuilderParameter<bool?>)_isBookmarked.Value; }
            set { _isBookmarked = new InputPropertyInfo { Name = "isBookmarked", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsRead
        {
            get { return (QueryBuilderParameter<bool?>)_isRead.Value; }
            set { _isRead = new InputPropertyInfo { Name = "isRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> LastPageRead
        {
            get { return (QueryBuilderParameter<int?>)_lastPageRead.Value; }
            set { _lastPageRead = new InputPropertyInfo { Name = "lastPageRead", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_isBookmarked.Name != null) yield return _isBookmarked;
            if (_isRead.Name != null) yield return _isRead;
            if (_lastPageRead.Name != null) yield return _lastPageRead;
        }
    }

    public class UpdateChaptersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateChapterPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateChapterPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateChapterPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateExtensionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateExtensionPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateExtensionPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateExtensionPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateExtensionPatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _install;
        private InputPropertyInfo _uninstall;
        private InputPropertyInfo _update;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Install
        {
            get { return (QueryBuilderParameter<bool?>)_install.Value; }
            set { _install = new InputPropertyInfo { Name = "install", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Uninstall
        {
            get { return (QueryBuilderParameter<bool?>)_uninstall.Value; }
            set { _uninstall = new InputPropertyInfo { Name = "uninstall", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Update
        {
            get { return (QueryBuilderParameter<bool?>)_update.Value; }
            set { _update = new InputPropertyInfo { Name = "update", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_install.Name != null) yield return _install;
            if (_uninstall.Name != null) yield return _uninstall;
            if (_update.Name != null) yield return _update;
        }
    }

    public class UpdateExtensionsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateExtensionPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateExtensionPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateExtensionPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateLibraryMangaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class UpdateMangaCategoriesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateMangaCategoriesPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateMangaCategoriesPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateMangaCategoriesPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateMangaCategoriesPatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _addToCategories;
        private InputPropertyInfo _clearCategories;
        private InputPropertyInfo _removeFromCategories;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> AddToCategories
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_addToCategories.Value; }
            set { _addToCategories = new InputPropertyInfo { Name = "addToCategories", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ClearCategories
        {
            get { return (QueryBuilderParameter<bool?>)_clearCategories.Value; }
            set { _clearCategories = new InputPropertyInfo { Name = "clearCategories", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> RemoveFromCategories
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_removeFromCategories.Value; }
            set { _removeFromCategories = new InputPropertyInfo { Name = "removeFromCategories", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_addToCategories.Name != null) yield return _addToCategories;
            if (_clearCategories.Name != null) yield return _clearCategories;
            if (_removeFromCategories.Name != null) yield return _removeFromCategories;
        }
    }

    public class UpdateMangaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _id;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Id
        {
            get { return (QueryBuilderParameter<int?>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateMangaPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateMangaPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateMangaPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_id.Name != null) yield return _id;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateMangaPatchInput : IGraphQlInputObject
    {
        private InputPropertyInfo _inLibrary;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> InLibrary
        {
            get { return (QueryBuilderParameter<bool?>)_inLibrary.Value; }
            set { _inLibrary = new InputPropertyInfo { Name = "inLibrary", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_inLibrary.Name != null) yield return _inLibrary;
        }
    }

    public class UpdateMangasCategoriesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateMangaCategoriesPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateMangaCategoriesPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateMangaCategoriesPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateMangasInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _ids;
        private InputPropertyInfo _patch;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int>>))]
        #endif
        public QueryBuilderParameter<ICollection<int>> Ids
        {
            get { return (QueryBuilderParameter<ICollection<int>>)_ids.Value; }
            set { _ids = new InputPropertyInfo { Name = "ids", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UpdateMangaPatchInput>))]
        #endif
        public QueryBuilderParameter<UpdateMangaPatchInput> Patch
        {
            get { return (QueryBuilderParameter<UpdateMangaPatchInput>)_patch.Value; }
            set { _patch = new InputPropertyInfo { Name = "patch", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_ids.Name != null) yield return _ids;
            if (_patch.Name != null) yield return _patch;
        }
    }

    public class UpdateSourcePreferenceInput : IGraphQlInputObject
    {
        private InputPropertyInfo _change;
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _source;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SourcePreferenceChangeInput>))]
        #endif
        public QueryBuilderParameter<SourcePreferenceChangeInput> Change
        {
            get { return (QueryBuilderParameter<SourcePreferenceChangeInput>)_change.Value; }
            set { _change = new InputPropertyInfo { Name = "change", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Source
        {
            get { return (QueryBuilderParameter<object>)_source.Value; }
            set { _source = new InputPropertyInfo { Name = "source", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_change.Name != null) yield return _change;
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_source.Name != null) yield return _source;
        }
    }

    public class UpdateStopInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }

    public class UpdateTrackInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;
        private InputPropertyInfo _finishDate;
        private InputPropertyInfo _lastChapterRead;
        private InputPropertyInfo _recordId;
        private InputPropertyInfo _scoreString;
        private InputPropertyInfo _startDate;
        private InputPropertyInfo _status;
        private InputPropertyInfo _unbind;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> FinishDate
        {
            get { return (QueryBuilderParameter<object>)_finishDate.Value; }
            set { _finishDate = new InputPropertyInfo { Name = "finishDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> LastChapterRead
        {
            get { return (QueryBuilderParameter<decimal?>)_lastChapterRead.Value; }
            set { _lastChapterRead = new InputPropertyInfo { Name = "lastChapterRead", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> RecordId
        {
            get { return (QueryBuilderParameter<int?>)_recordId.Value; }
            set { _recordId = new InputPropertyInfo { Name = "recordId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ScoreString
        {
            get { return (QueryBuilderParameter<string>)_scoreString.Value; }
            set { _scoreString = new InputPropertyInfo { Name = "scoreString", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> StartDate
        {
            get { return (QueryBuilderParameter<object>)_startDate.Value; }
            set { _startDate = new InputPropertyInfo { Name = "startDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Status
        {
            get { return (QueryBuilderParameter<int?>)_status.Value; }
            set { _status = new InputPropertyInfo { Name = "status", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Unbind
        {
            get { return (QueryBuilderParameter<bool?>)_unbind.Value; }
            set { _unbind = new InputPropertyInfo { Name = "unbind", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
            if (_finishDate.Name != null) yield return _finishDate;
            if (_lastChapterRead.Name != null) yield return _lastChapterRead;
            if (_recordId.Name != null) yield return _recordId;
            if (_scoreString.Name != null) yield return _scoreString;
            if (_startDate.Name != null) yield return _startDate;
            if (_status.Name != null) yield return _status;
            if (_unbind.Name != null) yield return _unbind;
        }
    }

    public class ValidateBackupInput : IGraphQlInputObject
    {
        private InputPropertyInfo _backup;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Backup
        {
            get { return (QueryBuilderParameter<object>)_backup.Value; }
            set { _backup = new InputPropertyInfo { Name = "backup", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_backup.Name != null) yield return _backup;
        }
    }

    public class WebUiUpdateInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clientMutationId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClientMutationId
        {
            get { return (QueryBuilderParameter<string>)_clientMutationId.Value; }
            set { _clientMutationId = new InputPropertyInfo { Name = "clientMutationId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clientMutationId.Name != null) yield return _clientMutationId;
        }
    }
    #endregion

    #region data classes
    public class AboutServerPayload
    {
        public object BuildTime { get; set; }
        public string BuildType { get; set; }
        public string Discord { get; set; }
        public string Github { get; set; }
        public string Name { get; set; }
        public string Revision { get; set; }
        public string Version { get; set; }
    }

    public class AboutWebUi
    {
        public string Channel { get; set; }
        public string Tag { get; set; }
    }

    public class BackupRestoreStatus
    {
        public int? MangaProgress { get; set; }
        public BackupRestoreState? State { get; set; }
        public int? TotalManga { get; set; }
    }

    public class BindTrackPayload
    {
        public string ClientMutationId { get; set; }
        public TrackRecordType TrackRecord { get; set; }
    }

    [GraphQlObjectType("CategoryEdge")]
    public class CategoryEdge : IEdge
    {
        public object Cursor { get; set; }
        public CategoryType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"CategoryEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("CategoryMetaType")]
    public class CategoryMetaType : INode, IMetaType
    {
        public int? CategoryId { get; set; }
        public string Key { get; set; }
        public string Value { get; set; }
        public CategoryType Category { get; set; }
    }

    [GraphQlObjectType("CategoryNodeList")]
    public class CategoryNodeList : INodeList
    {
        public ICollection<CategoryEdge> Edges { get; set; }
        public ICollection<CategoryType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"CategoryNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"CategoryNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("CategoryType")]
    public class CategoryType : INode
    {
        public bool? Default { get; set; }
        public int? Id { get; set; }
        public IncludeOrExclude? IncludeInDownload { get; set; }
        public IncludeOrExclude? IncludeInUpdate { get; set; }
        public string Name { get; set; }
        public int? Order { get; set; }
        public MangaNodeList Mangas { get; set; }
        public ICollection<CategoryMetaType> Meta { get; set; }
    }

    [GraphQlObjectType("ChapterEdge")]
    public class ChapterEdge : IEdge
    {
        public object Cursor { get; set; }
        public ChapterType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"ChapterEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("ChapterMetaType")]
    public class ChapterMetaType : INode, IMetaType
    {
        public int? ChapterId { get; set; }
        public string Key { get; set; }
        public string Value { get; set; }
        public ChapterType Chapter { get; set; }
    }

    [GraphQlObjectType("ChapterNodeList")]
    public class ChapterNodeList : INodeList
    {
        public ICollection<ChapterEdge> Edges { get; set; }
        public ICollection<ChapterType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"ChapterNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"ChapterNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("ChapterType")]
    public class ChapterType : INode
    {
        public decimal? ChapterNumber { get; set; }
        public object FetchedAt { get; set; }
        public int? Id { get; set; }
        public bool? IsBookmarked { get; set; }
        public bool? IsDownloaded { get; set; }
        public bool? IsRead { get; set; }
        public int? LastPageRead { get; set; }
        public object LastReadAt { get; set; }
        public int? MangaId { get; set; }
        public string Name { get; set; }
        public int? PageCount { get; set; }
        public string RealUrl { get; set; }
        public string Scanlator { get; set; }
        public int? SourceOrder { get; set; }
        public object UploadDate { get; set; }
        public string Url { get; set; }
        public MangaType Manga { get; set; }
        public ICollection<ChapterMetaType> Meta { get; set; }
    }

    [GraphQlObjectType("CheckBoxFilter")]
    public class CheckBoxFilter : IFilter
    {
        public bool? Default { get; set; }
        public string Name { get; set; }
    }

    [GraphQlObjectType("CheckBoxPreference")]
    public class CheckBoxPreference : IPreference
    {
        public bool? CurrentValue { get; set; }
        public bool? Default { get; set; }
        public string Key { get; set; }
        public string Summary { get; set; }
        public string Title { get; set; }
        public bool? Visible { get; set; }
    }

    public class CheckForServerUpdatesPayload
    {
        public string Channel { get; set; }
        public string Tag { get; set; }
        public string Url { get; set; }
    }

    public class ClearCachedImagesPayload
    {
        public bool? CachedPages { get; set; }
        public bool? CachedThumbnails { get; set; }
        public string ClientMutationId { get; set; }
        public bool? DownloadedThumbnails { get; set; }
    }

    public class ClearDownloaderPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    public class CreateBackupPayload
    {
        public string ClientMutationId { get; set; }
        public string Url { get; set; }
    }

    public class CreateCategoryPayload
    {
        public CategoryType Category { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class DeleteCategoryMetaPayload
    {
        public CategoryType Category { get; set; }
        public string ClientMutationId { get; set; }
        public CategoryMetaType Meta { get; set; }
    }

    public class DeleteCategoryPayload
    {
        public CategoryType Category { get; set; }
        public string ClientMutationId { get; set; }
        public ICollection<MangaType> Mangas { get; set; }
    }

    public class DeleteChapterMetaPayload
    {
        public ChapterType Chapter { get; set; }
        public string ClientMutationId { get; set; }
        public ChapterMetaType Meta { get; set; }
    }

    public class DeleteDownloadedChapterPayload
    {
        public ChapterType Chapters { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class DeleteDownloadedChaptersPayload
    {
        public ICollection<ChapterType> Chapters { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class DeleteGlobalMetaPayload
    {
        public string ClientMutationId { get; set; }
        public GlobalMetaType Meta { get; set; }
    }

    public class DeleteMangaMetaPayload
    {
        public string ClientMutationId { get; set; }
        public MangaType Manga { get; set; }
        public MangaMetaType Meta { get; set; }
    }

    public class DeleteSourceMetaPayload
    {
        public string ClientMutationId { get; set; }
        public SourceMetaType Meta { get; set; }
        public SourceType Source { get; set; }
    }

    public class DequeueChapterDownloadPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    public class DequeueChapterDownloadsPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    [GraphQlObjectType("DownloadEdge")]
    public class DownloadEdge : IEdge
    {
        public object Cursor { get; set; }
        public DownloadType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"DownloadEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("DownloadNodeList")]
    public class DownloadNodeList : INodeList
    {
        public ICollection<DownloadEdge> Edges { get; set; }
        public ICollection<DownloadType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"DownloadNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"DownloadNodeList.Nodes\" property setter"); } }
    }

    public class DownloadStatus
    {
        public ICollection<DownloadType> Queue { get; set; }
        public DownloaderState? State { get; set; }
    }

    [GraphQlObjectType("DownloadType")]
    public class DownloadType : INode
    {
        public decimal? Progress { get; set; }
        public DownloadState? State { get; set; }
        public int? Tries { get; set; }
        public ChapterType Chapter { get; set; }
        public MangaType Manga { get; set; }
    }

    public interface IEdge
    {
        object Cursor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        INode Node { get; set; }
    }

    [GraphQlObjectType("EditTextPreference")]
    public class EditTextPreference : IPreference
    {
        public string CurrentValue { get; set; }
        public string Default { get; set; }
        public string DialogMessage { get; set; }
        public string DialogTitle { get; set; }
        public string Key { get; set; }
        public string Summary { get; set; }
        public string Text { get; set; }
        public string Title { get; set; }
        public bool? Visible { get; set; }
    }

    public class EnqueueChapterDownloadPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    public class EnqueueChapterDownloadsPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    [GraphQlObjectType("ExtensionEdge")]
    public class ExtensionEdge : IEdge
    {
        public object Cursor { get; set; }
        public ExtensionType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"ExtensionEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("ExtensionNodeList")]
    public class ExtensionNodeList : INodeList
    {
        public ICollection<ExtensionEdge> Edges { get; set; }
        public ICollection<ExtensionType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"ExtensionNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"ExtensionNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("ExtensionType")]
    public class ExtensionType : INode
    {
        public string ApkName { get; set; }
        public bool? HasUpdate { get; set; }
        public string IconUrl { get; set; }
        public bool? IsInstalled { get; set; }
        public bool? IsNsfw { get; set; }
        public bool? IsObsolete { get; set; }
        public string Lang { get; set; }
        public string Name { get; set; }
        public string PkgName { get; set; }
        public string Repo { get; set; }
        public int? VersionCode { get; set; }
        public string VersionName { get; set; }
        public SourceNodeList Source { get; set; }
    }

    public class FetchChapterPagesPayload
    {
        public ChapterType Chapter { get; set; }
        public string ClientMutationId { get; set; }
        public ICollection<string> Pages { get; set; }
    }

    public class FetchChaptersPayload
    {
        public ICollection<ChapterType> Chapters { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class FetchExtensionsPayload
    {
        public string ClientMutationId { get; set; }
        public ICollection<ExtensionType> Extensions { get; set; }
    }

    public class FetchMangaPayload
    {
        public string ClientMutationId { get; set; }
        public MangaType Manga { get; set; }
    }

    public class FetchSourceMangaPayload
    {
        public string ClientMutationId { get; set; }
        public bool? HasNextPage { get; set; }
        public ICollection<MangaType> Mangas { get; set; }
    }

    public interface IFilter
    {
    }

    [GraphQlObjectType("GlobalMetaNodeList")]
    public class GlobalMetaNodeList : INodeList
    {
        public ICollection<MetaEdge> Edges { get; set; }
        public ICollection<GlobalMetaType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"GlobalMetaNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"GlobalMetaNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("GlobalMetaType")]
    public class GlobalMetaType : INode, IMetaType
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("GroupFilter")]
    public class GroupFilter : IFilter
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IFilter> Filters { get; set; }
        public string Name { get; set; }
    }

    [GraphQlObjectType("HeaderFilter")]
    public class HeaderFilter : IFilter
    {
        public string Name { get; set; }
    }

    public class InstallExternalExtensionPayload
    {
        public string ClientMutationId { get; set; }
        public ExtensionType Extension { get; set; }
    }

    public class LastUpdateTimestampPayload
    {
        public DateTimeOffset? Timestamp { get; set; }
    }

    [GraphQlObjectType("ListPreference")]
    public class ListPreference : IPreference
    {
        public string CurrentValue { get; set; }
        public string Default { get; set; }
        public ICollection<string> Entries { get; set; }
        public ICollection<string> EntryValues { get; set; }
        public string Key { get; set; }
        public string Summary { get; set; }
        public string Title { get; set; }
        public bool? Visible { get; set; }
    }

    public class LoginTrackerCredentialsPayload
    {
        public string ClientMutationId { get; set; }
        public bool? IsLoggedIn { get; set; }
        public TrackerType Tracker { get; set; }
    }

    public class LoginTrackerOAuthPayload
    {
        public string ClientMutationId { get; set; }
        public bool? IsLoggedIn { get; set; }
        public TrackerType Tracker { get; set; }
    }

    public class LogoutTrackerPayload
    {
        public string ClientMutationId { get; set; }
        public bool? IsLoggedIn { get; set; }
        public TrackerType Tracker { get; set; }
    }

    [GraphQlObjectType("MangaEdge")]
    public class MangaEdge : IEdge
    {
        public object Cursor { get; set; }
        public MangaType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"MangaEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("MangaMetaType")]
    public class MangaMetaType : INode, IMetaType
    {
        public string Key { get; set; }
        public int? MangaId { get; set; }
        public string Value { get; set; }
        public MangaType Manga { get; set; }
    }

    [GraphQlObjectType("MangaNodeList")]
    public class MangaNodeList : INodeList
    {
        public ICollection<MangaEdge> Edges { get; set; }
        public ICollection<MangaType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"MangaNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"MangaNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("MangaType")]
    public class MangaType : INode
    {
        public string Artist { get; set; }
        public string Author { get; set; }
        public object ChaptersLastFetchedAt { get; set; }
        public string Description { get; set; }
        public ICollection<string> Genre { get; set; }
        public int? Id { get; set; }
        public bool? InLibrary { get; set; }
        public object InLibraryAt { get; set; }
        public bool? Initialized { get; set; }
        public object LastFetchedAt { get; set; }
        public string RealUrl { get; set; }
        public object SourceId { get; set; }
        public MangaStatus? Status { get; set; }
        public string ThumbnailUrl { get; set; }
        public object ThumbnailUrlLastFetched { get; set; }
        public string Title { get; set; }
        public UpdateStrategy? UpdateStrategy { get; set; }
        public string Url { get; set; }
        public object Age { get; set; }
        public CategoryNodeList Categories { get; set; }
        public ChapterNodeList Chapters { get; set; }
        public object ChaptersAge { get; set; }
        public int? DownloadCount { get; set; }
        public ChapterType LastReadChapter { get; set; }
        public ChapterType LatestFetchedChapter { get; set; }
        public ChapterType LatestReadChapter { get; set; }
        public ChapterType LatestUploadedChapter { get; set; }
        public ICollection<MangaMetaType> Meta { get; set; }
        public SourceType Source { get; set; }
        public TrackRecordNodeList TrackRecords { get; set; }
        public int? UnreadCount { get; set; }
    }

    [GraphQlObjectType("MetaEdge")]
    public class MetaEdge : IEdge
    {
        public object Cursor { get; set; }
        public GlobalMetaType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"MetaEdge.Node\" property setter"); } }
    }

    public interface IMetaType
    {
        string Key { get; set; }
        string Value { get; set; }
    }

    [GraphQlObjectType("MultiSelectListPreference")]
    public class MultiSelectListPreference : IPreference
    {
        public ICollection<string> CurrentValue { get; set; }
        public ICollection<string> Default { get; set; }
        public string DialogMessage { get; set; }
        public string DialogTitle { get; set; }
        public ICollection<string> Entries { get; set; }
        public ICollection<string> EntryValues { get; set; }
        public string Key { get; set; }
        public string Summary { get; set; }
        public string Title { get; set; }
        public bool? Visible { get; set; }
    }

    public class Mutation
    {
        public CreateBackupPayload CreateBackup { get; set; }
        public RestoreBackupPayload RestoreBackup { get; set; }
        public CreateCategoryPayload CreateCategory { get; set; }
        public DeleteCategoryPayload DeleteCategory { get; set; }
        public DeleteCategoryMetaPayload DeleteCategoryMeta { get; set; }
        public SetCategoryMetaPayload SetCategoryMeta { get; set; }
        public UpdateCategoriesPayload UpdateCategories { get; set; }
        public UpdateCategoryPayload UpdateCategory { get; set; }
        public UpdateCategoryOrderPayload UpdateCategoryOrder { get; set; }
        public UpdateMangaCategoriesPayload UpdateMangaCategories { get; set; }
        public UpdateMangasCategoriesPayload UpdateMangasCategories { get; set; }
        public DeleteChapterMetaPayload DeleteChapterMeta { get; set; }
        public FetchChapterPagesPayload FetchChapterPages { get; set; }
        public FetchChaptersPayload FetchChapters { get; set; }
        public SetChapterMetaPayload SetChapterMeta { get; set; }
        public UpdateChapterPayload UpdateChapter { get; set; }
        public UpdateChaptersPayload UpdateChapters { get; set; }
        public ClearDownloaderPayload ClearDownloader { get; set; }
        public DeleteDownloadedChapterPayload DeleteDownloadedChapter { get; set; }
        public DeleteDownloadedChaptersPayload DeleteDownloadedChapters { get; set; }
        public DequeueChapterDownloadPayload DequeueChapterDownload { get; set; }
        public DequeueChapterDownloadsPayload DequeueChapterDownloads { get; set; }
        public EnqueueChapterDownloadPayload EnqueueChapterDownload { get; set; }
        public EnqueueChapterDownloadsPayload EnqueueChapterDownloads { get; set; }
        public ReorderChapterDownloadPayload ReorderChapterDownload { get; set; }
        public StartDownloaderPayload StartDownloader { get; set; }
        public StopDownloaderPayload StopDownloader { get; set; }
        public FetchExtensionsPayload FetchExtensions { get; set; }
        public InstallExternalExtensionPayload InstallExternalExtension { get; set; }
        public UpdateExtensionPayload UpdateExtension { get; set; }
        public UpdateExtensionsPayload UpdateExtensions { get; set; }
        public ClearCachedImagesPayload ClearCachedImages { get; set; }
        public WebUiUpdateStatus ResetWebUiUpdateStatus { get; set; }
        public WebUiUpdatePayload UpdateWebUi { get; set; }
        public DeleteMangaMetaPayload DeleteMangaMeta { get; set; }
        public FetchMangaPayload FetchManga { get; set; }
        public SetMangaMetaPayload SetMangaMeta { get; set; }
        public UpdateMangaPayload UpdateManga { get; set; }
        public UpdateMangasPayload UpdateMangas { get; set; }
        public DeleteGlobalMetaPayload DeleteGlobalMeta { get; set; }
        public SetGlobalMetaPayload SetGlobalMeta { get; set; }
        public ResetSettingsPayload ResetSettings { get; set; }
        public SetSettingsPayload SetSettings { get; set; }
        public DeleteSourceMetaPayload DeleteSourceMeta { get; set; }
        public FetchSourceMangaPayload FetchSourceManga { get; set; }
        public SetSourceMetaPayload SetSourceMeta { get; set; }
        public UpdateSourcePreferencePayload UpdateSourcePreference { get; set; }
        public BindTrackPayload BindTrack { get; set; }
        public LoginTrackerCredentialsPayload LoginTrackerCredentials { get; set; }
        public LoginTrackerOAuthPayload LoginTrackerOAuth { get; set; }
        public LogoutTrackerPayload LogoutTracker { get; set; }
        public UpdateTrackPayload UpdateTrack { get; set; }
        public UpdateCategoryMangaPayload UpdateCategoryManga { get; set; }
        public UpdateLibraryMangaPayload UpdateLibraryManga { get; set; }
        public UpdateStopPayload UpdateStop { get; set; }
    }

    public interface INode
    {
    }

    public interface INodeList
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        IEnumerable<IEdge> Edges { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        IEnumerable<INode> Nodes { get; set; }
        PageInfo PageInfo { get; set; }
        int? TotalCount { get; set; }
    }

    public class PageInfo
    {
        public object EndCursor { get; set; }
        public bool? HasNextPage { get; set; }
        public bool? HasPreviousPage { get; set; }
        public object StartCursor { get; set; }
    }

    [GraphQlObjectType("PartialSettingsType")]
    public class PartialSettingsType : INode, ISettings
    {
        public bool? AutoDownloadNewChapters { get; set; }
        public int? AutoDownloadNewChaptersLimit { get; set; }
        public int? BackupInterval { get; set; }
        public string BackupPath { get; set; }
        public int? BackupTtl { get; set; }
        public string BackupTime { get; set; }
        public bool? BasicAuthEnabled { get; set; }
        public string BasicAuthPassword { get; set; }
        public string BasicAuthUsername { get; set; }
        public bool? DebugLogsEnabled { get; set; }
        public bool? DownloadAsCbz { get; set; }
        public string DownloadsPath { get; set; }
        public string ElectronPath { get; set; }
        public bool? ExcludeCompleted { get; set; }
        public bool? ExcludeEntryWithUnreadChapters { get; set; }
        public bool? ExcludeNotStarted { get; set; }
        public bool? ExcludeUnreadChapters { get; set; }
        public ICollection<string> ExtensionRepos { get; set; }
        public bool? FlareSolverrEnabled { get; set; }
        public string FlareSolverrSessionName { get; set; }
        public int? FlareSolverrSessionTtl { get; set; }
        public int? FlareSolverrTimeout { get; set; }
        public string FlareSolverrUrl { get; set; }
        public decimal? GlobalUpdateInterval { get; set; }
        public bool? GqlDebugLogsEnabled { get; set; }
        public bool? InitialOpenInBrowserEnabled { get; set; }
        public string Ip { get; set; }
        public string LocalSourcePath { get; set; }
        public int? MaxSourcesInParallel { get; set; }
        public int? Port { get; set; }
        public bool? SocksProxyEnabled { get; set; }
        public string SocksProxyHost { get; set; }
        public string SocksProxyPassword { get; set; }
        public string SocksProxyPort { get; set; }
        public string SocksProxyUsername { get; set; }
        public int? SocksProxyVersion { get; set; }
        public bool? SystemTrayEnabled { get; set; }
        public bool? UpdateMangas { get; set; }
        public WebUiChannel? WebUiChannel { get; set; }
        public WebUiFlavor? WebUiFlavor { get; set; }
        public WebUiInterface? WebUiInterface { get; set; }
        public decimal? WebUiUpdateCheckInterval { get; set; }
        IEnumerable<string> ISettings.ExtensionRepos { get { return ExtensionRepos; } set { throw new NotSupportedException("Use \"PartialSettingsType.ExtensionRepos\" property setter"); } }
    }

    public interface IPreference
    {
    }

    public class Query
    {
        public BackupRestoreStatus RestoreStatus { get; set; }
        public ValidateBackupResult ValidateBackup { get; set; }
        public CategoryNodeList Categories { get; set; }
        public CategoryType Category { get; set; }
        public ChapterType Chapter { get; set; }
        public ChapterNodeList Chapters { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
        public ExtensionType Extension { get; set; }
        public ExtensionNodeList Extensions { get; set; }
        public AboutServerPayload AboutServer { get; set; }
        public AboutWebUi AboutWebUi { get; set; }
        public ICollection<CheckForServerUpdatesPayload> CheckForServerUpdates { get; set; }
        public WebUiUpdateCheck CheckForWebUiUpdate { get; set; }
        public WebUiUpdateStatus GetWebUiUpdateStatus { get; set; }
        public MangaType Manga { get; set; }
        public MangaNodeList Mangas { get; set; }
        public GlobalMetaType Meta { get; set; }
        public GlobalMetaNodeList Metas { get; set; }
        public SettingsType Settings { get; set; }
        public SourceType Source { get; set; }
        public SourceNodeList Sources { get; set; }
        public SearchTrackerPayload SearchTracker { get; set; }
        public TrackRecordType TrackRecord { get; set; }
        public TrackRecordNodeList TrackRecords { get; set; }
        public TrackerType Tracker { get; set; }
        public TrackerNodeList Trackers { get; set; }
        public LastUpdateTimestampPayload LastUpdateTimestamp { get; set; }
        public UpdateStatus UpdateStatus { get; set; }
    }

    public class ReorderChapterDownloadPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    public class ResetSettingsPayload
    {
        public string ClientMutationId { get; set; }
        public SettingsType Settings { get; set; }
    }

    public class RestoreBackupPayload
    {
        public string ClientMutationId { get; set; }
        public string Id { get; set; }
        public BackupRestoreStatus Status { get; set; }
    }

    public class SearchTrackerPayload
    {
        public ICollection<TrackSearchType> TrackSearches { get; set; }
    }

    [GraphQlObjectType("SelectFilter")]
    public class SelectFilter : IFilter
    {
        public int? Default { get; set; }
        public string Name { get; set; }
        public ICollection<string> Values { get; set; }
    }

    [GraphQlObjectType("SeparatorFilter")]
    public class SeparatorFilter : IFilter
    {
        public string Name { get; set; }
    }

    public class SetCategoryMetaPayload
    {
        public string ClientMutationId { get; set; }
        public CategoryMetaType Meta { get; set; }
    }

    public class SetChapterMetaPayload
    {
        public string ClientMutationId { get; set; }
        public ChapterMetaType Meta { get; set; }
    }

    public class SetGlobalMetaPayload
    {
        public string ClientMutationId { get; set; }
        public GlobalMetaType Meta { get; set; }
    }

    public class SetMangaMetaPayload
    {
        public string ClientMutationId { get; set; }
        public MangaMetaType Meta { get; set; }
    }

    public class SetSettingsPayload
    {
        public string ClientMutationId { get; set; }
        public SettingsType Settings { get; set; }
    }

    public class SetSourceMetaPayload
    {
        public string ClientMutationId { get; set; }
        public SourceMetaType Meta { get; set; }
    }

    public interface ISettings
    {
        bool? AutoDownloadNewChapters { get; set; }
        int? AutoDownloadNewChaptersLimit { get; set; }
        int? BackupInterval { get; set; }
        string BackupPath { get; set; }
        int? BackupTtl { get; set; }
        string BackupTime { get; set; }
        bool? BasicAuthEnabled { get; set; }
        string BasicAuthPassword { get; set; }
        string BasicAuthUsername { get; set; }
        bool? DebugLogsEnabled { get; set; }
        bool? DownloadAsCbz { get; set; }
        string DownloadsPath { get; set; }
        string ElectronPath { get; set; }
        bool? ExcludeCompleted { get; set; }
        bool? ExcludeEntryWithUnreadChapters { get; set; }
        bool? ExcludeNotStarted { get; set; }
        bool? ExcludeUnreadChapters { get; set; }
        IEnumerable<string> ExtensionRepos { get; set; }
        bool? FlareSolverrEnabled { get; set; }
        string FlareSolverrSessionName { get; set; }
        int? FlareSolverrSessionTtl { get; set; }
        int? FlareSolverrTimeout { get; set; }
        string FlareSolverrUrl { get; set; }
        decimal? GlobalUpdateInterval { get; set; }
        bool? GqlDebugLogsEnabled { get; set; }
        bool? InitialOpenInBrowserEnabled { get; set; }
        string Ip { get; set; }
        string LocalSourcePath { get; set; }
        int? MaxSourcesInParallel { get; set; }
        int? Port { get; set; }
        bool? SocksProxyEnabled { get; set; }
        string SocksProxyHost { get; set; }
        string SocksProxyPassword { get; set; }
        string SocksProxyPort { get; set; }
        string SocksProxyUsername { get; set; }
        int? SocksProxyVersion { get; set; }
        bool? SystemTrayEnabled { get; set; }
        bool? UpdateMangas { get; set; }
        WebUiChannel? WebUiChannel { get; set; }
        WebUiFlavor? WebUiFlavor { get; set; }
        WebUiInterface? WebUiInterface { get; set; }
        decimal? WebUiUpdateCheckInterval { get; set; }
    }

    [GraphQlObjectType("SettingsType")]
    public class SettingsType : INode, ISettings
    {
        public bool? AutoDownloadNewChapters { get; set; }
        public int? AutoDownloadNewChaptersLimit { get; set; }
        public int? BackupInterval { get; set; }
        public string BackupPath { get; set; }
        public int? BackupTtl { get; set; }
        public string BackupTime { get; set; }
        public bool? BasicAuthEnabled { get; set; }
        public string BasicAuthPassword { get; set; }
        public string BasicAuthUsername { get; set; }
        public bool? DebugLogsEnabled { get; set; }
        public bool? DownloadAsCbz { get; set; }
        public string DownloadsPath { get; set; }
        public string ElectronPath { get; set; }
        public bool? ExcludeCompleted { get; set; }
        public bool? ExcludeEntryWithUnreadChapters { get; set; }
        public bool? ExcludeNotStarted { get; set; }
        public bool? ExcludeUnreadChapters { get; set; }
        public ICollection<string> ExtensionRepos { get; set; }
        public bool? FlareSolverrEnabled { get; set; }
        public string FlareSolverrSessionName { get; set; }
        public int? FlareSolverrSessionTtl { get; set; }
        public int? FlareSolverrTimeout { get; set; }
        public string FlareSolverrUrl { get; set; }
        public decimal? GlobalUpdateInterval { get; set; }
        public bool? GqlDebugLogsEnabled { get; set; }
        public bool? InitialOpenInBrowserEnabled { get; set; }
        public string Ip { get; set; }
        public string LocalSourcePath { get; set; }
        public int? MaxSourcesInParallel { get; set; }
        public int? Port { get; set; }
        public bool? SocksProxyEnabled { get; set; }
        public string SocksProxyHost { get; set; }
        public string SocksProxyPassword { get; set; }
        public string SocksProxyPort { get; set; }
        public string SocksProxyUsername { get; set; }
        public int? SocksProxyVersion { get; set; }
        public bool? SystemTrayEnabled { get; set; }
        public bool? UpdateMangas { get; set; }
        public WebUiChannel? WebUiChannel { get; set; }
        public WebUiFlavor? WebUiFlavor { get; set; }
        public WebUiInterface? WebUiInterface { get; set; }
        public decimal? WebUiUpdateCheckInterval { get; set; }
        IEnumerable<string> ISettings.ExtensionRepos { get { return ExtensionRepos; } set { throw new NotSupportedException("Use \"SettingsType.ExtensionRepos\" property setter"); } }
    }

    [GraphQlObjectType("SortFilter")]
    public class SortFilter : IFilter
    {
        public SortSelection Default { get; set; }
        public string Name { get; set; }
        public ICollection<string> Values { get; set; }
    }

    public class SortSelection
    {
        public bool? Ascending { get; set; }
        public int? Index { get; set; }
    }

    [GraphQlObjectType("SourceEdge")]
    public class SourceEdge : IEdge
    {
        public object Cursor { get; set; }
        public SourceType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"SourceEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("SourceMetaType")]
    public class SourceMetaType : INode, IMetaType
    {
        public string Key { get; set; }
        public object SourceId { get; set; }
        public string Value { get; set; }
        public SourceType Source { get; set; }
    }

    [GraphQlObjectType("SourceNodeList")]
    public class SourceNodeList : INodeList
    {
        public ICollection<SourceEdge> Edges { get; set; }
        public ICollection<SourceType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"SourceNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"SourceNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("SourceType")]
    public class SourceType : INode
    {
        public string DisplayName { get; set; }
        public string IconUrl { get; set; }
        public object Id { get; set; }
        public bool? IsConfigurable { get; set; }
        public bool? IsNsfw { get; set; }
        public string Lang { get; set; }
        public string Name { get; set; }
        public bool? SupportsLatest { get; set; }
        public ExtensionType Extension { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IFilter> Filters { get; set; }
        public MangaNodeList Manga { get; set; }
        public ICollection<SourceMetaType> Meta { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IPreference> Preferences { get; set; }
    }

    public class StartDownloaderPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    public class StopDownloaderPayload
    {
        public string ClientMutationId { get; set; }
        public DownloadStatus DownloadStatus { get; set; }
    }

    public class Subscription
    {
        public DownloadStatus DownloadChanged { get; set; }
        public WebUiUpdateStatus WebUiUpdateStatusChange { get; set; }
        public UpdateStatus UpdateStatusChanged { get; set; }
    }

    [GraphQlObjectType("SwitchPreference")]
    public class SwitchPreference : IPreference
    {
        public bool? CurrentValue { get; set; }
        public bool? Default { get; set; }
        public string Key { get; set; }
        public string Summary { get; set; }
        public string Title { get; set; }
        public bool? Visible { get; set; }
    }

    [GraphQlObjectType("TextFilter")]
    public class TextFilter : IFilter
    {
        public string Default { get; set; }
        public string Name { get; set; }
    }

    [GraphQlObjectType("TrackRecordEdge")]
    public class TrackRecordEdge : IEdge
    {
        public object Cursor { get; set; }
        public TrackRecordType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"TrackRecordEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("TrackRecordNodeList")]
    public class TrackRecordNodeList : INodeList
    {
        public ICollection<TrackRecordEdge> Edges { get; set; }
        public ICollection<TrackRecordType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"TrackRecordNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"TrackRecordNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("TrackRecordType")]
    public class TrackRecordType : INode
    {
        public object FinishDate { get; set; }
        public int? Id { get; set; }
        public decimal? LastChapterRead { get; set; }
        public object LibraryId { get; set; }
        public int? MangaId { get; set; }
        public object RemoteId { get; set; }
        public string RemoteUrl { get; set; }
        public decimal? Score { get; set; }
        public object StartDate { get; set; }
        public int? Status { get; set; }
        public string Title { get; set; }
        public int? TotalChapters { get; set; }
        public int? TrackerId { get; set; }
        public string DisplayScore { get; set; }
        public MangaType Manga { get; set; }
        public TrackerType Tracker { get; set; }
    }

    public class TrackSearchType
    {
        public string CoverUrl { get; set; }
        public int? Id { get; set; }
        public string PublishingStatus { get; set; }
        public string PublishingType { get; set; }
        public object RemoteId { get; set; }
        public string StartDate { get; set; }
        public string Summary { get; set; }
        public string Title { get; set; }
        public int? TotalChapters { get; set; }
        public int? TrackerId { get; set; }
        public string TrackingUrl { get; set; }
        public TrackerType Tracker { get; set; }
    }

    public class TrackStatusType
    {
        public string Name { get; set; }
        public int? Value { get; set; }
    }

    [GraphQlObjectType("TrackerEdge")]
    public class TrackerEdge : IEdge
    {
        public object Cursor { get; set; }
        public TrackerType Node { get; set; }
        INode IEdge.Node { get { return Node; } set { throw new NotSupportedException("Use \"TrackerEdge.Node\" property setter"); } }
    }

    [GraphQlObjectType("TrackerNodeList")]
    public class TrackerNodeList : INodeList
    {
        public ICollection<TrackerEdge> Edges { get; set; }
        public ICollection<TrackerType> Nodes { get; set; }
        public PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
        IEnumerable<IEdge> INodeList.Edges { get { return Edges; } set { throw new NotSupportedException("Use \"TrackerNodeList.Edges\" property setter"); } }
        IEnumerable<INode> INodeList.Nodes { get { return Nodes; } set { throw new NotSupportedException("Use \"TrackerNodeList.Nodes\" property setter"); } }
    }

    [GraphQlObjectType("TrackerType")]
    public class TrackerType : INode
    {
        public string AuthUrl { get; set; }
        public string Icon { get; set; }
        public int? Id { get; set; }
        public bool? IsLoggedIn { get; set; }
        public string Name { get; set; }
        public bool? IsTokenExpired { get; set; }
        public ICollection<string> Scores { get; set; }
        public ICollection<TrackStatusType> Statuses { get; set; }
        public TrackRecordNodeList TrackRecords { get; set; }
    }

    [GraphQlObjectType("TriStateFilter")]
    public class TriStateFilter : IFilter
    {
        public TriState? Default { get; set; }
        public string Name { get; set; }
    }

    public class UpdateCategoriesPayload
    {
        public ICollection<CategoryType> Categories { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class UpdateCategoryMangaPayload
    {
        public string ClientMutationId { get; set; }
        public UpdateStatus UpdateStatus { get; set; }
    }

    public class UpdateCategoryOrderPayload
    {
        public ICollection<CategoryType> Categories { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class UpdateCategoryPayload
    {
        public CategoryType Category { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class UpdateChapterPayload
    {
        public ChapterType Chapter { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class UpdateChaptersPayload
    {
        public ICollection<ChapterType> Chapters { get; set; }
        public string ClientMutationId { get; set; }
    }

    public class UpdateExtensionPayload
    {
        public string ClientMutationId { get; set; }
        public ExtensionType Extension { get; set; }
    }

    public class UpdateExtensionsPayload
    {
        public string ClientMutationId { get; set; }
        public ICollection<ExtensionType> Extensions { get; set; }
    }

    public class UpdateLibraryMangaPayload
    {
        public string ClientMutationId { get; set; }
        public UpdateStatus UpdateStatus { get; set; }
    }

    public class UpdateMangaCategoriesPayload
    {
        public string ClientMutationId { get; set; }
        public MangaType Manga { get; set; }
    }

    public class UpdateMangaPayload
    {
        public string ClientMutationId { get; set; }
        public MangaType Manga { get; set; }
    }

    public class UpdateMangasCategoriesPayload
    {
        public string ClientMutationId { get; set; }
        public ICollection<MangaType> Mangas { get; set; }
    }

    public class UpdateMangasPayload
    {
        public string ClientMutationId { get; set; }
        public ICollection<MangaType> Mangas { get; set; }
    }

    public class UpdateSourcePreferencePayload
    {
        public string ClientMutationId { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IPreference> Preferences { get; set; }
        public SourceType Source { get; set; }
    }

    public class UpdateStatus
    {
        public UpdateStatusType CompleteJobs { get; set; }
        public UpdateStatusType FailedJobs { get; set; }
        public bool? IsRunning { get; set; }
        public UpdateStatusType PendingJobs { get; set; }
        public UpdateStatusType RunningJobs { get; set; }
        public UpdateStatusCategoryType SkippedCategories { get; set; }
        public UpdateStatusType SkippedJobs { get; set; }
        public UpdateStatusCategoryType UpdatingCategories { get; set; }
    }

    public class UpdateStatusCategoryType
    {
        public CategoryNodeList Categories { get; set; }
    }

    public class UpdateStatusType
    {
        public MangaNodeList Mangas { get; set; }
    }

    public class UpdateStopPayload
    {
        public string ClientMutationId { get; set; }
    }

    public class UpdateTrackPayload
    {
        public string ClientMutationId { get; set; }
        public TrackRecordType TrackRecord { get; set; }
    }

    public class ValidateBackupResult
    {
        public ICollection<ValidateBackupSource> MissingSources { get; set; }
    }

    public class ValidateBackupSource
    {
        public object Id { get; set; }
        public string Name { get; set; }
    }

    public class WebUiUpdateCheck
    {
        public string Channel { get; set; }
        public string Tag { get; set; }
        public bool? UpdateAvailable { get; set; }
    }

    public class WebUiUpdateInfo
    {
        public string Channel { get; set; }
        public string Tag { get; set; }
    }

    public class WebUiUpdatePayload
    {
        public string ClientMutationId { get; set; }
        public WebUiUpdateStatus UpdateStatus { get; set; }
    }

    public class WebUiUpdateStatus
    {
        public WebUiUpdateInfo Info { get; set; }
        public int? Progress { get; set; }
        public UpdateState? State { get; set; }
    }
    #endregion
}
