name: Dev build
on:
  push:
    branches:
      - master
  workflow_dispatch:
    
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
jobs:
  get-props:
    name: Get Props
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      hash: ${{ steps.get-hash.outputs.hash }}
      repo_url: ${{ steps.get-repo-url.outputs.repo_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get Version
        id: get-version
        run: echo "version=$(grep -oE '<Version>[^<]+' src/Avayomi/Avayomi.csproj | sed 's/<Version>//')-dev.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Get Hash
        id: get-hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get Repo Url
        id: get-repo-url
        run: echo "repo_url=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_OUTPUT
  
  build:
    name: Build Avayomi
    needs: get-props
    strategy:
      fail-fast: true
      matrix:
        target-platform:
          - windows
          - linux
        target-arch:
          - x64
        include:
          - target-platform: windows
            os: windows-latest
            channel: win-x64-dev
          - target-platform: linux
            os: ubuntu-latest
            channel: linux-x64-dev
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      NUGET_CERT_REVOCATION_MODE: offline
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Check Cache
        id: check-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/toolResolverCache
            ${{ github.workspace }}/.config
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Install FUSE
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo add-apt-repository universe
          sudo apt install libfuse2

      - name: Install Velopack
        if: ${{ steps.check-cache.outputs.cache-hit == false }}
        run: dotnet tool install vpk -g

      - name: Restore
        if: ${{ steps.check-cache.outputs.cache-hit == false }}
        run: dotnet restore

      - name: Publish
        run: dotnet publish src/Avayomi/Avayomi.csproj -c Release -o publish -p:Version=${{ needs.get-props.outputs.version }}

      - name: Download Previous Release
        run: vpk download github --repoUrl ${{ needs.get-props.outputs.repo_url }} -c ${{ matrix.channel }} --token ${{ secrets.GITHUB_TOKEN }} --pre
        
      - name: Pack Release
        shell: bash
        run: >
          vpk pack  
          -u Avayomi  
          -v ${{ needs.get-props.outputs.version }}  
          -p publish 
          -c ${{ matrix.channel }}  
          ${{ matrix.target-platform == 'linux' && '-i src/Avayomi/Assets/faviconlogo.png' || '' }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.channel }}-build
          path: |
            Releases/
            !Releases/RELEASES-*
  
  release:
    name: Release
    needs:
      - get-props
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  
        
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: Releases
          merge-multiple: true

      - name: Delete Old Dev Build Release
        run: gh release delete dev-build -y --cleanup-tag
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          bodyFile: .github/dev-build-release.md
          name: Dev Build ${{ needs.get-props.outputs.hash }}
          prerelease: true
          draft: false
          tag: dev-build
          artifacts: Releases/*