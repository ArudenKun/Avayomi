name: Dev build
on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Avayomi
    strategy:
      fail-fast: true
      matrix:
        runtime: [ linux-x64, win-x64 ]
        target-arch:
          - x64
        include:
          - runtime: linux-x64
            channel: linux-x64-dev
            os: linux
          - runtime: win-x64
            channel: win-x64-dev
            os: win
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      NUGET_CERT_REVOCATION_MODE: offline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Check Cache
        id: check-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.dotnet/toolResolverCache
            ~/.dotnet/tools
            ${{ github.workspace }}/.config
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Install Velopack
        if: ${{ steps.check-cache.outputs.cache-hit == false }}
        run: |
          dotnet new tool-manifest
          dotnet tool install vpk --prerelease

      - name: Restore
        if: ${{ steps.check-cache.outputs.cache-hit == false }}
        run: dotnet restore

      - name: Get Version
        id: get-version
        run: echo "version=$(grep -oE '<Version>[^<]+' src/Avayomi/Avayomi.csproj | sed 's/<Version>//')-dev.${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Publish
        run: dotnet publish src/Avayomi/Avayomi.csproj -c Release -r ${{ matrix.runtime }} -o publish -p:Version=${{ steps.get-version.outputs.version }}

      - name: Download Previous Release
        run: dotnet vpk download github --pre --repoUrl ${{ github.server_url }}/${{ github.repository }} -c ${{ matrix.channel }} --token ${{ secrets.GITHUB_TOKEN }}

      - name: Pack Release
        shell: bash
        run: >
          dotnet vpk [${{ matrix.os }}] pack  
          -u Avayomi  
          -v ${{ steps.get-version.outputs.version }}  
          -p publish 
          -c ${{ matrix.channel }}  
          -i src/Avayomi/Assets/faviconlogo.${{ matrix.os == 'linux' && 'png' || 'ico' }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.channel }}-build
          path: |
            Releases/
            !Releases/RELEASES-*
  
  release:
    name: Release
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Hash
        id: get-hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: Releases
          merge-multiple: true

      - name: Delete Last Dev Build
        run: gh release delete dev-build -y --cleanup-tag
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          bodyFile: .github/dev-build-release.md
          name: Dev Build ${{ steps.get-props.outputs.hash }}
          prerelease: true
          draft: false
          tag: dev-build
          artifacts: Releases/*